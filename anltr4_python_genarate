PythonLexer.py
# Generated from PythonLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


if "." in __name__:
    from .PythonLexerBase import PythonLexerBase
else:
    from PythonLexerBase import PythonLexerBase

def serializedATN():
    return [
        4,0,97,1160,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,
        2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,
        10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
        16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,
        23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,
        29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,
        36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
        42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
        49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,
        55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,
        62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,
        68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,
        75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,
        81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,
        88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,
        94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,
        2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,2,106,
        7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
        2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,
        7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
        2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,
        7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,
        2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,
        7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,
        2,145,7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,
        7,150,2,151,7,151,2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,
        2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,2,160,7,160,2,161,
        7,161,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,
        5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
        32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,
        35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,
        42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,
        48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,
        55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,
        59,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,
        64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,
        68,1,69,1,69,1,69,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,
        72,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,76,1,
        76,1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,
        80,1,80,1,81,1,81,1,81,1,82,1,82,1,83,1,83,5,83,649,8,83,10,83,12,
        83,652,9,83,1,84,1,84,1,84,3,84,657,8,84,1,85,1,85,3,85,661,8,85,
        1,86,1,86,3,86,665,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,
        674,8,86,10,86,12,86,677,9,86,1,87,1,87,1,88,1,88,5,88,683,8,88,
        10,88,12,88,686,9,88,1,88,1,88,1,89,4,89,691,8,89,11,89,12,89,692,
        1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,
        1,92,1,92,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,96,1,96,
        1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,98,1,98,1,98,1,98,1,99,1,99,
        1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,101,1,101,1,101,1,101,1,
        102,1,102,1,102,1,102,1,102,1,102,1,102,1,103,1,103,1,103,1,103,
        1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,108,4,108,789,
        8,108,11,108,12,108,790,1,108,1,108,1,109,1,109,1,109,1,109,1,110,
        1,110,1,110,1,110,1,111,4,111,804,8,111,11,111,12,111,805,1,111,
        1,111,1,112,1,112,1,112,1,112,1,113,1,113,1,113,1,113,1,114,3,114,
        819,8,114,1,114,1,114,3,114,823,8,114,1,115,1,115,1,116,1,116,5,
        116,829,8,116,10,116,12,116,832,9,116,1,116,1,116,1,116,5,116,837,
        8,116,10,116,12,116,840,9,116,1,116,3,116,843,8,116,1,117,1,117,
        1,117,1,117,1,117,5,117,850,8,117,10,117,12,117,853,9,117,1,117,
        1,117,1,117,1,117,1,117,1,117,1,117,1,117,5,117,863,8,117,10,117,
        12,117,866,9,117,1,117,1,117,1,117,3,117,871,8,117,1,118,1,118,3,
        118,875,8,118,1,119,1,119,3,119,879,8,119,1,120,1,120,3,120,883,
        8,120,1,121,1,121,1,122,1,122,1,123,1,123,1,124,1,124,1,124,1,124,
        3,124,895,8,124,1,125,1,125,1,125,3,125,900,8,125,1,126,1,126,1,
        126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,1,126,
        1,126,1,126,1,126,1,126,3,126,919,8,126,1,127,1,127,5,127,923,8,
        127,10,127,12,127,926,9,127,1,127,1,127,1,127,5,127,931,8,127,10,
        127,12,127,934,9,127,1,127,3,127,937,8,127,1,128,1,128,1,128,1,128,
        1,128,5,128,944,8,128,10,128,12,128,947,9,128,1,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,5,128,957,8,128,10,128,12,128,960,
        9,128,1,128,1,128,1,128,3,128,965,8,128,1,129,1,129,3,129,969,8,
        129,1,130,1,130,3,130,973,8,130,1,131,1,131,3,131,977,8,131,1,132,
        3,132,980,8,132,1,133,3,133,983,8,133,1,134,3,134,986,8,134,1,135,
        1,135,1,135,1,136,1,136,4,136,993,8,136,11,136,12,136,994,1,137,
        1,137,4,137,999,8,137,11,137,12,137,1000,1,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,3,138,1020,8,138,1,139,1,139,1,140,1,140,1,141,1,141,
        1,141,1,141,3,141,1030,8,141,1,142,1,142,1,142,1,142,3,142,1036,
        8,142,1,143,1,143,3,143,1040,8,143,1,143,5,143,1043,8,143,10,143,
        12,143,1046,9,143,1,143,4,143,1049,8,143,11,143,12,143,1050,1,143,
        3,143,1054,8,143,1,143,5,143,1057,8,143,10,143,12,143,1060,9,143,
        3,143,1062,8,143,1,144,1,144,1,144,3,144,1067,8,144,1,144,4,144,
        1070,8,144,11,144,12,144,1071,1,145,1,145,1,145,3,145,1077,8,145,
        1,145,4,145,1080,8,145,11,145,12,145,1081,1,146,1,146,1,146,3,146,
        1087,8,146,1,146,4,146,1090,8,146,11,146,12,146,1091,1,147,1,147,
        1,148,1,148,1,149,1,149,1,150,1,150,1,151,1,151,3,151,1104,8,151,
        1,152,1,152,3,152,1108,8,152,1,153,3,153,1111,8,153,1,153,1,153,
        1,153,1,153,3,153,1117,8,153,1,154,1,154,3,154,1121,8,154,1,154,
        1,154,1,155,1,155,3,155,1127,8,155,1,155,5,155,1130,8,155,10,155,
        12,155,1133,9,155,1,156,1,156,1,156,1,157,1,157,3,157,1140,8,157,
        1,157,1,157,1,158,1,158,3,158,1146,8,158,1,158,1,158,1,159,3,159,
        1151,8,159,1,159,1,159,1,160,1,160,3,160,1157,8,160,1,161,1,161,
        4,851,864,945,958,0,162,7,6,9,7,11,8,13,9,15,10,17,11,19,12,21,13,
        23,14,25,15,27,16,29,17,31,18,33,19,35,20,37,21,39,22,41,23,43,24,
        45,25,47,26,49,27,51,28,53,29,55,30,57,31,59,32,61,33,63,34,65,35,
        67,36,69,37,71,38,73,39,75,40,77,41,79,42,81,43,83,44,85,45,87,46,
        89,47,91,48,93,49,95,50,97,51,99,52,101,53,103,54,105,55,107,56,
        109,57,111,58,113,59,115,60,117,61,119,62,121,63,123,64,125,65,127,
        66,129,67,131,68,133,69,135,70,137,71,139,72,141,73,143,74,145,75,
        147,76,149,77,151,78,153,79,155,80,157,81,159,82,161,83,163,84,165,
        85,167,86,169,87,171,88,173,89,175,90,177,91,179,92,181,93,183,94,
        185,95,187,96,189,0,191,0,193,0,195,0,197,97,199,0,201,0,203,0,205,
        0,207,0,209,0,211,0,213,0,215,0,217,0,219,0,221,0,223,0,225,0,227,
        0,229,0,231,0,233,0,235,0,237,0,239,0,241,0,243,0,245,0,247,0,249,
        0,251,0,253,0,255,0,257,0,259,0,261,0,263,0,265,0,267,0,269,0,271,
        0,273,0,275,0,277,0,279,0,281,0,283,0,285,0,287,0,289,0,291,0,293,
        0,295,0,297,0,299,0,301,0,303,0,305,0,307,0,309,0,311,0,313,0,315,
        0,317,0,319,0,321,0,323,0,325,0,327,0,329,0,7,0,1,2,3,4,5,6,27,2,
        0,10,10,13,13,3,0,9,9,12,12,32,32,1,0,39,39,1,0,34,34,4,0,82,82,
        85,85,114,114,117,117,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,
        34,34,92,92,1,0,92,92,2,0,66,66,98,98,5,0,0,9,11,12,14,38,40,91,
        93,127,5,0,0,9,11,12,14,33,35,91,93,127,2,0,0,91,93,127,1,0,0,127,
        2,0,70,70,102,102,3,0,39,39,123,123,125,125,3,0,34,34,123,123,125,
        125,2,0,79,79,111,111,2,0,88,88,120,120,1,0,49,57,1,0,48,57,1,0,
        48,55,2,0,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,2,0,74,
        74,106,106,354,0,48,57,183,183,768,879,903,903,1155,1159,1425,1469,
        1471,1471,1473,1474,1476,1477,1479,1479,1552,1562,1611,1641,1648,
        1648,1750,1756,1759,1764,1767,1768,1770,1773,1776,1785,1809,1809,
        1840,1866,1958,1968,1984,1993,2027,2035,2045,2045,2070,2073,2075,
        2083,2085,2087,2089,2093,2137,2139,2259,2273,2275,2307,2362,2364,
        2366,2383,2385,2391,2402,2403,2406,2415,2433,2435,2492,2492,2494,
        2500,2503,2504,2507,2509,2519,2519,2530,2531,2534,2543,2558,2558,
        2561,2563,2620,2620,2622,2626,2631,2632,2635,2637,2641,2641,2662,
        2673,2677,2677,2689,2691,2748,2748,2750,2757,2759,2761,2763,2765,
        2786,2787,2790,2799,2810,2815,2817,2819,2876,2876,2878,2884,2887,
        2888,2891,2893,2901,2903,2914,2915,2918,2927,2946,2946,3006,3010,
        3014,3016,3018,3021,3031,3031,3046,3055,3072,3076,3134,3140,3142,
        3144,3146,3149,3157,3158,3170,3171,3174,3183,3201,3203,3260,3260,
        3262,3268,3270,3272,3274,3277,3285,3286,3298,3299,3302,3311,3328,
        3331,3387,3388,3390,3396,3398,3400,3402,3405,3415,3415,3426,3427,
        3430,3439,3457,3459,3530,3530,3535,3540,3542,3542,3544,3551,3558,
        3567,3570,3571,3633,3633,3635,3642,3655,3662,3664,3673,3761,3761,
        3763,3772,3784,3789,3792,3801,3864,3865,3872,3881,3893,3893,3895,
        3895,3897,3897,3902,3903,3953,3972,3974,3975,3981,3991,3993,4028,
        4038,4038,4139,4158,4160,4169,4182,4185,4190,4192,4194,4196,4199,
        4205,4209,4212,4226,4237,4239,4253,4957,4959,4969,4977,5906,5908,
        5938,5940,5970,5971,6002,6003,6068,6099,6109,6109,6112,6121,6155,
        6157,6160,6169,6313,6313,6432,6443,6448,6459,6470,6479,6608,6618,
        6679,6683,6741,6750,6752,6780,6783,6793,6800,6809,6832,6845,6847,
        6848,6912,6916,6964,6980,6992,7001,7019,7027,7040,7042,7073,7085,
        7088,7097,7142,7155,7204,7223,7232,7241,7248,7257,7376,7378,7380,
        7400,7405,7405,7412,7412,7415,7417,7616,7673,7675,7679,8255,8256,
        8276,8276,8400,8412,8417,8417,8421,8432,11503,11505,11647,11647,
        11744,11775,12330,12335,12441,12442,42528,42537,42607,42607,42612,
        42621,42654,42655,42736,42737,43010,43010,43014,43014,43019,43019,
        43043,43047,43052,43052,43136,43137,43188,43205,43216,43225,43232,
        43249,43263,43273,43302,43309,43335,43347,43392,43395,43443,43456,
        43472,43481,43493,43493,43504,43513,43561,43574,43587,43587,43596,
        43597,43600,43609,43643,43645,43696,43696,43698,43700,43703,43704,
        43710,43711,43713,43713,43755,43759,43765,43766,44003,44010,44012,
        44013,44016,44025,64286,64286,65024,65039,65056,65071,65075,65076,
        65101,65103,65296,65305,65343,65343,65438,65439,66045,66045,66272,
        66272,66422,66426,66720,66729,68097,68099,68101,68102,68108,68111,
        68152,68154,68159,68159,68325,68326,68900,68903,68912,68921,69291,
        69292,69446,69456,69632,69634,69688,69702,69734,69743,69759,69762,
        69808,69818,69872,69881,69888,69890,69927,69940,69942,69951,69957,
        69958,70003,70003,70016,70018,70067,70080,70089,70092,70094,70105,
        70188,70199,70206,70206,70367,70378,70384,70393,70400,70403,70459,
        70460,70462,70468,70471,70472,70475,70477,70487,70487,70498,70499,
        70502,70508,70512,70516,70709,70726,70736,70745,70750,70750,70832,
        70851,70864,70873,71087,71093,71096,71104,71132,71133,71216,71232,
        71248,71257,71339,71351,71360,71369,71453,71467,71472,71481,71724,
        71738,71904,71913,71984,71989,71991,71992,71995,71998,72000,72000,
        72002,72003,72016,72025,72145,72151,72154,72160,72164,72164,72193,
        72202,72243,72249,72251,72254,72263,72263,72273,72283,72330,72345,
        72751,72758,72760,72767,72784,72793,72850,72871,72873,72886,73009,
        73014,73018,73018,73020,73021,73023,73029,73031,73031,73040,73049,
        73098,73102,73104,73105,73107,73111,73120,73129,73459,73462,92768,
        92777,92912,92916,92976,92982,93008,93017,94031,94031,94033,94087,
        94095,94098,94180,94180,94192,94193,113821,113822,119141,119145,
        119149,119154,119163,119170,119173,119179,119210,119213,119362,119364,
        120782,120831,121344,121398,121403,121452,121461,121461,121476,121476,
        121499,121503,121505,121519,122880,122886,122888,122904,122907,122913,
        122915,122916,122918,122922,123184,123190,123200,123209,123628,123641,
        125136,125142,125252,125258,125264,125273,130032,130041,917760,917999,
        630,0,65,90,95,95,97,122,170,170,181,181,186,186,192,214,216,246,
        248,705,710,721,736,740,748,748,750,750,880,884,886,887,891,893,
        895,895,902,902,904,906,908,908,910,929,931,1013,1015,1153,1162,
        1327,1329,1366,1369,1369,1376,1416,1488,1514,1519,1522,1568,1610,
        1646,1647,1649,1747,1749,1749,1765,1766,1774,1775,1786,1788,1791,
        1791,1808,1808,1810,1839,1869,1957,1969,1969,1994,2026,2036,2037,
        2042,2042,2048,2069,2074,2074,2084,2084,2088,2088,2112,2136,2144,
        2154,2208,2228,2230,2247,2308,2361,2365,2365,2384,2384,2392,2401,
        2417,2432,2437,2444,2447,2448,2451,2472,2474,2480,2482,2482,2486,
        2489,2493,2493,2510,2510,2524,2525,2527,2529,2544,2545,2556,2556,
        2565,2570,2575,2576,2579,2600,2602,2608,2610,2611,2613,2614,2616,
        2617,2649,2652,2654,2654,2674,2676,2693,2701,2703,2705,2707,2728,
        2730,2736,2738,2739,2741,2745,2749,2749,2768,2768,2784,2785,2809,
        2809,2821,2828,2831,2832,2835,2856,2858,2864,2866,2867,2869,2873,
        2877,2877,2908,2909,2911,2913,2929,2929,2947,2947,2949,2954,2958,
        2960,2962,2965,2969,2970,2972,2972,2974,2975,2979,2980,2984,2986,
        2990,3001,3024,3024,3077,3084,3086,3088,3090,3112,3114,3129,3133,
        3133,3160,3162,3168,3169,3200,3200,3205,3212,3214,3216,3218,3240,
        3242,3251,3253,3257,3261,3261,3294,3294,3296,3297,3313,3314,3332,
        3340,3342,3344,3346,3386,3389,3389,3406,3406,3412,3414,3423,3425,
        3450,3455,3461,3478,3482,3505,3507,3515,3517,3517,3520,3526,3585,
        3632,3634,3634,3648,3654,3713,3714,3716,3716,3718,3722,3724,3747,
        3749,3749,3751,3760,3762,3762,3773,3773,3776,3780,3782,3782,3804,
        3807,3840,3840,3904,3911,3913,3948,3976,3980,4096,4138,4159,4159,
        4176,4181,4186,4189,4193,4193,4197,4198,4206,4208,4213,4225,4238,
        4238,4256,4293,4295,4295,4301,4301,4304,4346,4348,4680,4682,4685,
        4688,4694,4696,4696,4698,4701,4704,4744,4746,4749,4752,4784,4786,
        4789,4792,4798,4800,4800,4802,4805,4808,4822,4824,4880,4882,4885,
        4888,4954,4992,5007,5024,5109,5112,5117,5121,5740,5743,5759,5761,
        5786,5792,5866,5870,5880,5888,5900,5902,5905,5920,5937,5952,5969,
        5984,5996,5998,6000,6016,6067,6103,6103,6108,6108,6176,6264,6272,
        6312,6314,6314,6320,6389,6400,6430,6480,6509,6512,6516,6528,6571,
        6576,6601,6656,6678,6688,6740,6823,6823,6917,6963,6981,6987,7043,
        7072,7086,7087,7098,7141,7168,7203,7245,7247,7258,7293,7296,7304,
        7312,7354,7357,7359,7401,7404,7406,7411,7413,7414,7418,7418,7424,
        7615,7680,7957,7960,7965,7968,8005,8008,8013,8016,8023,8025,8025,
        8027,8027,8029,8029,8031,8061,8064,8116,8118,8124,8126,8126,8130,
        8132,8134,8140,8144,8147,8150,8155,8160,8172,8178,8180,8182,8188,
        8305,8305,8319,8319,8336,8348,8450,8450,8455,8455,8458,8467,8469,
        8469,8472,8477,8484,8484,8486,8486,8488,8488,8490,8505,8508,8511,
        8517,8521,8526,8526,8544,8584,11264,11310,11312,11358,11360,11492,
        11499,11502,11506,11507,11520,11557,11559,11559,11565,11565,11568,
        11623,11631,11631,11648,11670,11680,11686,11688,11694,11696,11702,
        11704,11710,11712,11718,11720,11726,11728,11734,11736,11742,12293,
        12295,12321,12329,12337,12341,12344,12348,12353,12438,12445,12447,
        12449,12538,12540,12543,12549,12591,12593,12686,12704,12735,12784,
        12799,13312,19903,19968,40956,40960,42124,42192,42237,42240,42508,
        42512,42527,42538,42539,42560,42606,42623,42653,42656,42735,42775,
        42783,42786,42888,42891,42943,42946,42954,42997,43009,43011,43013,
        43015,43018,43020,43042,43072,43123,43138,43187,43250,43255,43259,
        43259,43261,43262,43274,43301,43312,43334,43360,43388,43396,43442,
        43471,43471,43488,43492,43494,43503,43514,43518,43520,43560,43584,
        43586,43588,43595,43616,43638,43642,43642,43646,43695,43697,43697,
        43701,43702,43705,43709,43712,43712,43714,43714,43739,43741,43744,
        43754,43762,43764,43777,43782,43785,43790,43793,43798,43808,43814,
        43816,43822,43824,43866,43868,43881,43888,44002,44032,55203,55216,
        55238,55243,55291,63744,64109,64112,64217,64256,64262,64275,64279,
        64285,64285,64287,64296,64298,64310,64312,64316,64318,64318,64320,
        64321,64323,64324,64326,64433,64467,64605,64612,64829,64848,64911,
        64914,64967,65008,65017,65137,65137,65139,65139,65143,65143,65145,
        65145,65147,65147,65149,65149,65151,65276,65313,65338,65345,65370,
        65382,65437,65440,65470,65474,65479,65482,65487,65490,65495,65498,
        65500,65536,65547,65549,65574,65576,65594,65596,65597,65599,65613,
        65616,65629,65664,65786,65856,65908,66176,66204,66208,66256,66304,
        66335,66349,66378,66384,66421,66432,66461,66464,66499,66504,66511,
        66513,66517,66560,66717,66736,66771,66776,66811,66816,66855,66864,
        66915,67072,67382,67392,67413,67424,67431,67584,67589,67592,67592,
        67594,67637,67639,67640,67644,67644,67647,67669,67680,67702,67712,
        67742,67808,67826,67828,67829,67840,67861,67872,67897,67968,68023,
        68030,68031,68096,68096,68112,68115,68117,68119,68121,68149,68192,
        68220,68224,68252,68288,68295,68297,68324,68352,68405,68416,68437,
        68448,68466,68480,68497,68608,68680,68736,68786,68800,68850,68864,
        68899,69248,69289,69296,69297,69376,69404,69415,69415,69424,69445,
        69552,69572,69600,69622,69635,69687,69763,69807,69840,69864,69891,
        69926,69956,69956,69959,69959,69968,70002,70006,70006,70019,70066,
        70081,70084,70106,70106,70108,70108,70144,70161,70163,70187,70272,
        70278,70280,70280,70282,70285,70287,70301,70303,70312,70320,70366,
        70405,70412,70415,70416,70419,70440,70442,70448,70450,70451,70453,
        70457,70461,70461,70480,70480,70493,70497,70656,70708,70727,70730,
        70751,70753,70784,70831,70852,70853,70855,70855,71040,71086,71128,
        71131,71168,71215,71236,71236,71296,71338,71352,71352,71424,71450,
        71680,71723,71840,71903,71935,71942,71945,71945,71948,71955,71957,
        71958,71960,71983,71999,71999,72001,72001,72096,72103,72106,72144,
        72161,72161,72163,72163,72192,72192,72203,72242,72250,72250,72272,
        72272,72284,72329,72349,72349,72384,72440,72704,72712,72714,72750,
        72768,72768,72818,72847,72960,72966,72968,72969,72971,73008,73030,
        73030,73056,73061,73063,73064,73066,73097,73112,73112,73440,73458,
        73648,73648,73728,74649,74752,74862,74880,75075,77824,78894,82944,
        83526,92160,92728,92736,92766,92880,92909,92928,92975,92992,92995,
        93027,93047,93053,93071,93760,93823,93952,94026,94032,94032,94099,
        94111,94176,94177,94179,94179,94208,100343,100352,101589,101632,
        101640,110592,110878,110928,110930,110948,110951,110960,111355,113664,
        113770,113776,113788,113792,113800,113808,113817,119808,119892,119894,
        119964,119966,119967,119970,119970,119973,119974,119977,119980,119982,
        119993,119995,119995,119997,120003,120005,120069,120071,120074,120077,
        120084,120086,120092,120094,120121,120123,120126,120128,120132,120134,
        120134,120138,120144,120146,120485,120488,120512,120514,120538,120540,
        120570,120572,120596,120598,120628,120630,120654,120656,120686,120688,
        120712,120714,120744,120746,120770,120772,120779,123136,123180,123191,
        123197,123214,123214,123584,123627,124928,125124,125184,125251,125259,
        125259,126464,126467,126469,126495,126497,126498,126500,126500,126503,
        126503,126505,126514,126516,126519,126521,126521,126523,126523,126530,
        126530,126535,126535,126537,126537,126539,126539,126541,126543,126545,
        126546,126548,126548,126551,126551,126553,126553,126555,126555,126557,
        126557,126559,126559,126561,126562,126564,126564,126567,126570,126572,
        126578,126580,126583,126585,126588,126590,126590,126592,126601,126603,
        126619,126625,126627,126629,126633,126635,126651,131072,173789,173824,
        177972,177984,178205,178208,183969,183984,191456,194560,195101,196608,
        201546,1184,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,
        85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,
        95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,
        0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,
        0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
        123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,
        0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,
        1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,
        0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,
        0,0,0,0,161,1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,
        169,1,0,0,0,0,171,1,0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,
        0,0,0,179,1,0,0,0,0,181,1,0,0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,
        1,0,0,0,0,189,1,0,0,0,0,191,1,0,0,0,0,193,1,0,0,0,0,195,1,0,0,0,
        0,197,1,0,0,0,1,199,1,0,0,0,1,201,1,0,0,0,1,203,1,0,0,0,2,205,1,
        0,0,0,2,207,1,0,0,0,2,209,1,0,0,0,3,211,1,0,0,0,3,213,1,0,0,0,3,
        215,1,0,0,0,4,217,1,0,0,0,4,219,1,0,0,0,4,221,1,0,0,0,5,223,1,0,
        0,0,5,225,1,0,0,0,5,227,1,0,0,0,6,229,1,0,0,0,6,231,1,0,0,0,6,233,
        1,0,0,0,7,331,1,0,0,0,9,337,1,0,0,0,11,343,1,0,0,0,13,348,1,0,0,
        0,15,355,1,0,0,0,17,360,1,0,0,0,19,365,1,0,0,0,21,371,1,0,0,0,23,
        378,1,0,0,0,25,381,1,0,0,0,27,387,1,0,0,0,29,392,1,0,0,0,31,398,
        1,0,0,0,33,406,1,0,0,0,35,409,1,0,0,0,37,416,1,0,0,0,39,420,1,0,
        0,0,41,429,1,0,0,0,43,433,1,0,0,0,45,440,1,0,0,0,47,444,1,0,0,0,
        49,447,1,0,0,0,51,451,1,0,0,0,53,456,1,0,0,0,55,465,1,0,0,0,57,471,
        1,0,0,0,59,478,1,0,0,0,61,482,1,0,0,0,63,489,1,0,0,0,65,493,1,0,
        0,0,67,498,1,0,0,0,69,504,1,0,0,0,71,509,1,0,0,0,73,512,1,0,0,0,
        75,515,1,0,0,0,77,521,1,0,0,0,79,523,1,0,0,0,81,525,1,0,0,0,83,527,
        1,0,0,0,85,529,1,0,0,0,87,531,1,0,0,0,89,533,1,0,0,0,91,535,1,0,
        0,0,93,537,1,0,0,0,95,539,1,0,0,0,97,541,1,0,0,0,99,543,1,0,0,0,
        101,545,1,0,0,0,103,547,1,0,0,0,105,549,1,0,0,0,107,551,1,0,0,0,
        109,553,1,0,0,0,111,555,1,0,0,0,113,557,1,0,0,0,115,559,1,0,0,0,
        117,561,1,0,0,0,119,564,1,0,0,0,121,567,1,0,0,0,123,570,1,0,0,0,
        125,573,1,0,0,0,127,575,1,0,0,0,129,577,1,0,0,0,131,580,1,0,0,0,
        133,583,1,0,0,0,135,586,1,0,0,0,137,589,1,0,0,0,139,592,1,0,0,0,
        141,595,1,0,0,0,143,598,1,0,0,0,145,601,1,0,0,0,147,604,1,0,0,0,
        149,607,1,0,0,0,151,610,1,0,0,0,153,614,1,0,0,0,155,618,1,0,0,0,
        157,622,1,0,0,0,159,625,1,0,0,0,161,629,1,0,0,0,163,631,1,0,0,0,
        165,634,1,0,0,0,167,637,1,0,0,0,169,641,1,0,0,0,171,644,1,0,0,0,
        173,646,1,0,0,0,175,656,1,0,0,0,177,660,1,0,0,0,179,662,1,0,0,0,
        181,678,1,0,0,0,183,680,1,0,0,0,185,690,1,0,0,0,187,696,1,0,0,0,
        189,701,1,0,0,0,191,707,1,0,0,0,193,713,1,0,0,0,195,721,1,0,0,0,
        197,729,1,0,0,0,199,731,1,0,0,0,201,736,1,0,0,0,203,740,1,0,0,0,
        205,744,1,0,0,0,207,749,1,0,0,0,209,753,1,0,0,0,211,757,1,0,0,0,
        213,764,1,0,0,0,215,768,1,0,0,0,217,772,1,0,0,0,219,779,1,0,0,0,
        221,783,1,0,0,0,223,788,1,0,0,0,225,794,1,0,0,0,227,798,1,0,0,0,
        229,803,1,0,0,0,231,809,1,0,0,0,233,813,1,0,0,0,235,818,1,0,0,0,
        237,824,1,0,0,0,239,842,1,0,0,0,241,870,1,0,0,0,243,874,1,0,0,0,
        245,878,1,0,0,0,247,882,1,0,0,0,249,884,1,0,0,0,251,886,1,0,0,0,
        253,888,1,0,0,0,255,894,1,0,0,0,257,896,1,0,0,0,259,918,1,0,0,0,
        261,936,1,0,0,0,263,964,1,0,0,0,265,968,1,0,0,0,267,972,1,0,0,0,
        269,976,1,0,0,0,271,979,1,0,0,0,273,982,1,0,0,0,275,985,1,0,0,0,
        277,987,1,0,0,0,279,992,1,0,0,0,281,998,1,0,0,0,283,1019,1,0,0,0,
        285,1021,1,0,0,0,287,1023,1,0,0,0,289,1029,1,0,0,0,291,1035,1,0,
        0,0,293,1061,1,0,0,0,295,1063,1,0,0,0,297,1073,1,0,0,0,299,1083,
        1,0,0,0,301,1093,1,0,0,0,303,1095,1,0,0,0,305,1097,1,0,0,0,307,1099,
        1,0,0,0,309,1103,1,0,0,0,311,1107,1,0,0,0,313,1116,1,0,0,0,315,1120,
        1,0,0,0,317,1124,1,0,0,0,319,1134,1,0,0,0,321,1137,1,0,0,0,323,1145,
        1,0,0,0,325,1150,1,0,0,0,327,1156,1,0,0,0,329,1158,1,0,0,0,331,332,
        5,70,0,0,332,333,5,97,0,0,333,334,5,108,0,0,334,335,5,115,0,0,335,
        336,5,101,0,0,336,8,1,0,0,0,337,338,5,97,0,0,338,339,5,119,0,0,339,
        340,5,97,0,0,340,341,5,105,0,0,341,342,5,116,0,0,342,10,1,0,0,0,
        343,344,5,101,0,0,344,345,5,108,0,0,345,346,5,115,0,0,346,347,5,
        101,0,0,347,12,1,0,0,0,348,349,5,105,0,0,349,350,5,109,0,0,350,351,
        5,112,0,0,351,352,5,111,0,0,352,353,5,114,0,0,353,354,5,116,0,0,
        354,14,1,0,0,0,355,356,5,112,0,0,356,357,5,97,0,0,357,358,5,115,
        0,0,358,359,5,115,0,0,359,16,1,0,0,0,360,361,5,78,0,0,361,362,5,
        111,0,0,362,363,5,110,0,0,363,364,5,101,0,0,364,18,1,0,0,0,365,366,
        5,98,0,0,366,367,5,114,0,0,367,368,5,101,0,0,368,369,5,97,0,0,369,
        370,5,107,0,0,370,20,1,0,0,0,371,372,5,101,0,0,372,373,5,120,0,0,
        373,374,5,99,0,0,374,375,5,101,0,0,375,376,5,112,0,0,376,377,5,116,
        0,0,377,22,1,0,0,0,378,379,5,105,0,0,379,380,5,110,0,0,380,24,1,
        0,0,0,381,382,5,114,0,0,382,383,5,97,0,0,383,384,5,105,0,0,384,385,
        5,115,0,0,385,386,5,101,0,0,386,26,1,0,0,0,387,388,5,84,0,0,388,
        389,5,114,0,0,389,390,5,117,0,0,390,391,5,101,0,0,391,28,1,0,0,0,
        392,393,5,99,0,0,393,394,5,108,0,0,394,395,5,97,0,0,395,396,5,115,
        0,0,396,397,5,115,0,0,397,30,1,0,0,0,398,399,5,102,0,0,399,400,5,
        105,0,0,400,401,5,110,0,0,401,402,5,97,0,0,402,403,5,108,0,0,403,
        404,5,108,0,0,404,405,5,121,0,0,405,32,1,0,0,0,406,407,5,105,0,0,
        407,408,5,115,0,0,408,34,1,0,0,0,409,410,5,114,0,0,410,411,5,101,
        0,0,411,412,5,116,0,0,412,413,5,117,0,0,413,414,5,114,0,0,414,415,
        5,110,0,0,415,36,1,0,0,0,416,417,5,97,0,0,417,418,5,110,0,0,418,
        419,5,100,0,0,419,38,1,0,0,0,420,421,5,99,0,0,421,422,5,111,0,0,
        422,423,5,110,0,0,423,424,5,116,0,0,424,425,5,105,0,0,425,426,5,
        110,0,0,426,427,5,117,0,0,427,428,5,101,0,0,428,40,1,0,0,0,429,430,
        5,102,0,0,430,431,5,111,0,0,431,432,5,114,0,0,432,42,1,0,0,0,433,
        434,5,108,0,0,434,435,5,97,0,0,435,436,5,109,0,0,436,437,5,98,0,
        0,437,438,5,100,0,0,438,439,5,97,0,0,439,44,1,0,0,0,440,441,5,116,
        0,0,441,442,5,114,0,0,442,443,5,121,0,0,443,46,1,0,0,0,444,445,5,
        97,0,0,445,446,5,115,0,0,446,48,1,0,0,0,447,448,5,100,0,0,448,449,
        5,101,0,0,449,450,5,102,0,0,450,50,1,0,0,0,451,452,5,102,0,0,452,
        453,5,114,0,0,453,454,5,111,0,0,454,455,5,109,0,0,455,52,1,0,0,0,
        456,457,5,110,0,0,457,458,5,111,0,0,458,459,5,110,0,0,459,460,5,
        108,0,0,460,461,5,111,0,0,461,462,5,99,0,0,462,463,5,97,0,0,463,
        464,5,108,0,0,464,54,1,0,0,0,465,466,5,119,0,0,466,467,5,104,0,0,
        467,468,5,105,0,0,468,469,5,108,0,0,469,470,5,101,0,0,470,56,1,0,
        0,0,471,472,5,97,0,0,472,473,5,115,0,0,473,474,5,115,0,0,474,475,
        5,101,0,0,475,476,5,114,0,0,476,477,5,116,0,0,477,58,1,0,0,0,478,
        479,5,100,0,0,479,480,5,101,0,0,480,481,5,108,0,0,481,60,1,0,0,0,
        482,483,5,103,0,0,483,484,5,108,0,0,484,485,5,111,0,0,485,486,5,
        98,0,0,486,487,5,97,0,0,487,488,5,108,0,0,488,62,1,0,0,0,489,490,
        5,110,0,0,490,491,5,111,0,0,491,492,5,116,0,0,492,64,1,0,0,0,493,
        494,5,119,0,0,494,495,5,105,0,0,495,496,5,116,0,0,496,497,5,104,
        0,0,497,66,1,0,0,0,498,499,5,97,0,0,499,500,5,115,0,0,500,501,5,
        121,0,0,501,502,5,110,0,0,502,503,5,99,0,0,503,68,1,0,0,0,504,505,
        5,101,0,0,505,506,5,108,0,0,506,507,5,105,0,0,507,508,5,102,0,0,
        508,70,1,0,0,0,509,510,5,105,0,0,510,511,5,102,0,0,511,72,1,0,0,
        0,512,513,5,111,0,0,513,514,5,114,0,0,514,74,1,0,0,0,515,516,5,121,
        0,0,516,517,5,105,0,0,517,518,5,101,0,0,518,519,5,108,0,0,519,520,
        5,100,0,0,520,76,1,0,0,0,521,522,5,40,0,0,522,78,1,0,0,0,523,524,
        5,91,0,0,524,80,1,0,0,0,525,526,5,123,0,0,526,82,1,0,0,0,527,528,
        5,41,0,0,528,84,1,0,0,0,529,530,5,93,0,0,530,86,1,0,0,0,531,532,
        5,125,0,0,532,88,1,0,0,0,533,534,5,46,0,0,534,90,1,0,0,0,535,536,
        5,58,0,0,536,92,1,0,0,0,537,538,5,44,0,0,538,94,1,0,0,0,539,540,
        5,59,0,0,540,96,1,0,0,0,541,542,5,43,0,0,542,98,1,0,0,0,543,544,
        5,45,0,0,544,100,1,0,0,0,545,546,5,42,0,0,546,102,1,0,0,0,547,548,
        5,47,0,0,548,104,1,0,0,0,549,550,5,124,0,0,550,106,1,0,0,0,551,552,
        5,38,0,0,552,108,1,0,0,0,553,554,5,60,0,0,554,110,1,0,0,0,555,556,
        5,62,0,0,556,112,1,0,0,0,557,558,5,61,0,0,558,114,1,0,0,0,559,560,
        5,37,0,0,560,116,1,0,0,0,561,562,5,61,0,0,562,563,5,61,0,0,563,118,
        1,0,0,0,564,565,5,33,0,0,565,566,5,61,0,0,566,120,1,0,0,0,567,568,
        5,60,0,0,568,569,5,61,0,0,569,122,1,0,0,0,570,571,5,62,0,0,571,572,
        5,61,0,0,572,124,1,0,0,0,573,574,5,126,0,0,574,126,1,0,0,0,575,576,
        5,94,0,0,576,128,1,0,0,0,577,578,5,60,0,0,578,579,5,60,0,0,579,130,
        1,0,0,0,580,581,5,62,0,0,581,582,5,62,0,0,582,132,1,0,0,0,583,584,
        5,42,0,0,584,585,5,42,0,0,585,134,1,0,0,0,586,587,5,43,0,0,587,588,
        5,61,0,0,588,136,1,0,0,0,589,590,5,45,0,0,590,591,5,61,0,0,591,138,
        1,0,0,0,592,593,5,42,0,0,593,594,5,61,0,0,594,140,1,0,0,0,595,596,
        5,47,0,0,596,597,5,61,0,0,597,142,1,0,0,0,598,599,5,37,0,0,599,600,
        5,61,0,0,600,144,1,0,0,0,601,602,5,38,0,0,602,603,5,61,0,0,603,146,
        1,0,0,0,604,605,5,124,0,0,605,606,5,61,0,0,606,148,1,0,0,0,607,608,
        5,94,0,0,608,609,5,61,0,0,609,150,1,0,0,0,610,611,5,60,0,0,611,612,
        5,60,0,0,612,613,5,61,0,0,613,152,1,0,0,0,614,615,5,62,0,0,615,616,
        5,62,0,0,616,617,5,61,0,0,617,154,1,0,0,0,618,619,5,42,0,0,619,620,
        5,42,0,0,620,621,5,61,0,0,621,156,1,0,0,0,622,623,5,47,0,0,623,624,
        5,47,0,0,624,158,1,0,0,0,625,626,5,47,0,0,626,627,5,47,0,0,627,628,
        5,61,0,0,628,160,1,0,0,0,629,630,5,64,0,0,630,162,1,0,0,0,631,632,
        5,64,0,0,632,633,5,61,0,0,633,164,1,0,0,0,634,635,5,45,0,0,635,636,
        5,62,0,0,636,166,1,0,0,0,637,638,5,46,0,0,638,639,5,46,0,0,639,640,
        5,46,0,0,640,168,1,0,0,0,641,642,5,58,0,0,642,643,5,61,0,0,643,170,
        1,0,0,0,644,645,5,33,0,0,645,172,1,0,0,0,646,650,3,329,161,0,647,
        649,3,327,160,0,648,647,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,
        650,651,1,0,0,0,651,174,1,0,0,0,652,650,1,0,0,0,653,657,3,291,142,
        0,654,657,3,311,152,0,655,657,3,323,158,0,656,653,1,0,0,0,656,654,
        1,0,0,0,656,655,1,0,0,0,657,176,1,0,0,0,658,661,3,235,114,0,659,
        661,3,257,125,0,660,658,1,0,0,0,660,659,1,0,0,0,661,178,1,0,0,0,
        662,664,5,35,0,0,663,665,3,185,89,0,664,663,1,0,0,0,664,665,1,0,
        0,0,665,666,1,0,0,0,666,667,5,116,0,0,667,668,5,121,0,0,668,669,
        5,112,0,0,669,670,5,101,0,0,670,671,5,58,0,0,671,675,1,0,0,0,672,
        674,8,0,0,0,673,672,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,
        676,1,0,0,0,676,180,1,0,0,0,677,675,1,0,0,0,678,679,3,325,159,0,
        679,182,1,0,0,0,680,684,5,35,0,0,681,683,8,0,0,0,682,681,1,0,0,0,
        683,686,1,0,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,
        686,684,1,0,0,0,687,688,6,88,0,0,688,184,1,0,0,0,689,691,7,1,0,0,
        690,689,1,0,0,0,691,692,1,0,0,0,692,690,1,0,0,0,692,693,1,0,0,0,
        693,694,1,0,0,0,694,695,6,89,0,0,695,186,1,0,0,0,696,697,5,92,0,
        0,697,698,3,181,87,0,698,699,1,0,0,0,699,700,6,90,0,0,700,188,1,
        0,0,0,701,702,3,283,138,0,702,703,7,2,0,0,703,704,1,0,0,0,704,705,
        6,91,1,0,705,706,6,91,2,0,706,190,1,0,0,0,707,708,3,283,138,0,708,
        709,7,3,0,0,709,710,1,0,0,0,710,711,6,92,1,0,711,712,6,92,3,0,712,
        192,1,0,0,0,713,714,3,283,138,0,714,715,7,2,0,0,715,716,7,2,0,0,
        716,717,7,2,0,0,717,718,1,0,0,0,718,719,6,93,1,0,719,720,6,93,4,
        0,720,194,1,0,0,0,721,722,3,283,138,0,722,723,7,3,0,0,723,724,7,
        3,0,0,724,725,7,3,0,0,725,726,1,0,0,0,726,727,6,94,1,0,727,728,6,
        94,5,0,728,196,1,0,0,0,729,730,9,0,0,0,730,198,1,0,0,0,731,732,7,
        2,0,0,732,733,1,0,0,0,733,734,6,96,6,0,734,735,6,96,7,0,735,200,
        1,0,0,0,736,737,3,279,136,0,737,738,1,0,0,0,738,739,6,97,8,0,739,
        202,1,0,0,0,740,741,5,123,0,0,741,742,1,0,0,0,742,743,6,98,9,0,743,
        204,1,0,0,0,744,745,7,3,0,0,745,746,1,0,0,0,746,747,6,99,6,0,747,
        748,6,99,7,0,748,206,1,0,0,0,749,750,3,281,137,0,750,751,1,0,0,0,
        751,752,6,100,8,0,752,208,1,0,0,0,753,754,5,123,0,0,754,755,1,0,
        0,0,755,756,6,101,9,0,756,210,1,0,0,0,757,758,7,2,0,0,758,759,7,
        2,0,0,759,760,7,2,0,0,760,761,1,0,0,0,761,762,6,102,6,0,762,763,
        6,102,7,0,763,212,1,0,0,0,764,765,3,279,136,0,765,766,1,0,0,0,766,
        767,6,103,8,0,767,214,1,0,0,0,768,769,5,123,0,0,769,770,1,0,0,0,
        770,771,6,104,9,0,771,216,1,0,0,0,772,773,7,3,0,0,773,774,7,3,0,
        0,774,775,7,3,0,0,775,776,1,0,0,0,776,777,6,105,6,0,777,778,6,105,
        7,0,778,218,1,0,0,0,779,780,3,281,137,0,780,781,1,0,0,0,781,782,
        6,106,8,0,782,220,1,0,0,0,783,784,5,123,0,0,784,785,1,0,0,0,785,
        786,6,107,9,0,786,222,1,0,0,0,787,789,3,285,139,0,788,787,1,0,0,
        0,789,790,1,0,0,0,790,788,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,
        0,792,793,6,108,8,0,793,224,1,0,0,0,794,795,5,123,0,0,795,796,1,
        0,0,0,796,797,6,109,9,0,797,226,1,0,0,0,798,799,5,125,0,0,799,800,
        1,0,0,0,800,801,6,110,10,0,801,228,1,0,0,0,802,804,3,287,140,0,803,
        802,1,0,0,0,804,805,1,0,0,0,805,803,1,0,0,0,805,806,1,0,0,0,806,
        807,1,0,0,0,807,808,6,111,8,0,808,230,1,0,0,0,809,810,5,123,0,0,
        810,811,1,0,0,0,811,812,6,112,9,0,812,232,1,0,0,0,813,814,5,125,
        0,0,814,815,1,0,0,0,815,816,6,113,10,0,816,234,1,0,0,0,817,819,3,
        237,115,0,818,817,1,0,0,0,818,819,1,0,0,0,819,822,1,0,0,0,820,823,
        3,239,116,0,821,823,3,241,117,0,822,820,1,0,0,0,822,821,1,0,0,0,
        823,236,1,0,0,0,824,825,7,4,0,0,825,238,1,0,0,0,826,830,5,39,0,0,
        827,829,3,243,118,0,828,827,1,0,0,0,829,832,1,0,0,0,830,828,1,0,
        0,0,830,831,1,0,0,0,831,833,1,0,0,0,832,830,1,0,0,0,833,843,5,39,
        0,0,834,838,5,34,0,0,835,837,3,245,119,0,836,835,1,0,0,0,837,840,
        1,0,0,0,838,836,1,0,0,0,838,839,1,0,0,0,839,841,1,0,0,0,840,838,
        1,0,0,0,841,843,5,34,0,0,842,826,1,0,0,0,842,834,1,0,0,0,843,240,
        1,0,0,0,844,845,5,39,0,0,845,846,5,39,0,0,846,847,5,39,0,0,847,851,
        1,0,0,0,848,850,3,247,120,0,849,848,1,0,0,0,850,853,1,0,0,0,851,
        852,1,0,0,0,851,849,1,0,0,0,852,854,1,0,0,0,853,851,1,0,0,0,854,
        855,5,39,0,0,855,856,5,39,0,0,856,871,5,39,0,0,857,858,5,34,0,0,
        858,859,5,34,0,0,859,860,5,34,0,0,860,864,1,0,0,0,861,863,3,247,
        120,0,862,861,1,0,0,0,863,866,1,0,0,0,864,865,1,0,0,0,864,862,1,
        0,0,0,865,867,1,0,0,0,866,864,1,0,0,0,867,868,5,34,0,0,868,869,5,
        34,0,0,869,871,5,34,0,0,870,844,1,0,0,0,870,857,1,0,0,0,871,242,
        1,0,0,0,872,875,3,249,121,0,873,875,3,255,124,0,874,872,1,0,0,0,
        874,873,1,0,0,0,875,244,1,0,0,0,876,879,3,251,122,0,877,879,3,255,
        124,0,878,876,1,0,0,0,878,877,1,0,0,0,879,246,1,0,0,0,880,883,3,
        253,123,0,881,883,3,255,124,0,882,880,1,0,0,0,882,881,1,0,0,0,883,
        248,1,0,0,0,884,885,8,5,0,0,885,250,1,0,0,0,886,887,8,6,0,0,887,
        252,1,0,0,0,888,889,8,7,0,0,889,254,1,0,0,0,890,891,5,92,0,0,891,
        895,3,325,159,0,892,893,5,92,0,0,893,895,9,0,0,0,894,890,1,0,0,0,
        894,892,1,0,0,0,895,256,1,0,0,0,896,899,3,259,126,0,897,900,3,261,
        127,0,898,900,3,263,128,0,899,897,1,0,0,0,899,898,1,0,0,0,900,258,
        1,0,0,0,901,919,7,8,0,0,902,903,5,98,0,0,903,919,5,114,0,0,904,905,
        5,66,0,0,905,919,5,114,0,0,906,907,5,98,0,0,907,919,5,82,0,0,908,
        909,5,66,0,0,909,919,5,82,0,0,910,911,5,114,0,0,911,919,5,98,0,0,
        912,913,5,114,0,0,913,919,5,66,0,0,914,915,5,82,0,0,915,919,5,98,
        0,0,916,917,5,82,0,0,917,919,5,66,0,0,918,901,1,0,0,0,918,902,1,
        0,0,0,918,904,1,0,0,0,918,906,1,0,0,0,918,908,1,0,0,0,918,910,1,
        0,0,0,918,912,1,0,0,0,918,914,1,0,0,0,918,916,1,0,0,0,919,260,1,
        0,0,0,920,924,5,39,0,0,921,923,3,265,129,0,922,921,1,0,0,0,923,926,
        1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,927,1,0,0,0,926,924,
        1,0,0,0,927,937,5,39,0,0,928,932,5,34,0,0,929,931,3,267,130,0,930,
        929,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,
        935,1,0,0,0,934,932,1,0,0,0,935,937,5,34,0,0,936,920,1,0,0,0,936,
        928,1,0,0,0,937,262,1,0,0,0,938,939,5,39,0,0,939,940,5,39,0,0,940,
        941,5,39,0,0,941,945,1,0,0,0,942,944,3,269,131,0,943,942,1,0,0,0,
        944,947,1,0,0,0,945,946,1,0,0,0,945,943,1,0,0,0,946,948,1,0,0,0,
        947,945,1,0,0,0,948,949,5,39,0,0,949,950,5,39,0,0,950,965,5,39,0,
        0,951,952,5,34,0,0,952,953,5,34,0,0,953,954,5,34,0,0,954,958,1,0,
        0,0,955,957,3,269,131,0,956,955,1,0,0,0,957,960,1,0,0,0,958,959,
        1,0,0,0,958,956,1,0,0,0,959,961,1,0,0,0,960,958,1,0,0,0,961,962,
        5,34,0,0,962,963,5,34,0,0,963,965,5,34,0,0,964,938,1,0,0,0,964,951,
        1,0,0,0,965,264,1,0,0,0,966,969,3,271,132,0,967,969,3,277,135,0,
        968,966,1,0,0,0,968,967,1,0,0,0,969,266,1,0,0,0,970,973,3,273,133,
        0,971,973,3,277,135,0,972,970,1,0,0,0,972,971,1,0,0,0,973,268,1,
        0,0,0,974,977,3,275,134,0,975,977,3,277,135,0,976,974,1,0,0,0,976,
        975,1,0,0,0,977,270,1,0,0,0,978,980,7,9,0,0,979,978,1,0,0,0,980,
        272,1,0,0,0,981,983,7,10,0,0,982,981,1,0,0,0,983,274,1,0,0,0,984,
        986,7,11,0,0,985,984,1,0,0,0,986,276,1,0,0,0,987,988,5,92,0,0,988,
        989,7,12,0,0,989,278,1,0,0,0,990,993,3,285,139,0,991,993,3,289,141,
        0,992,990,1,0,0,0,992,991,1,0,0,0,993,994,1,0,0,0,994,992,1,0,0,
        0,994,995,1,0,0,0,995,280,1,0,0,0,996,999,3,287,140,0,997,999,3,
        289,141,0,998,996,1,0,0,0,998,997,1,0,0,0,999,1000,1,0,0,0,1000,
        998,1,0,0,0,1000,1001,1,0,0,0,1001,282,1,0,0,0,1002,1020,7,13,0,
        0,1003,1004,5,102,0,0,1004,1020,5,114,0,0,1005,1006,5,70,0,0,1006,
        1020,5,114,0,0,1007,1008,5,102,0,0,1008,1020,5,82,0,0,1009,1010,
        5,70,0,0,1010,1020,5,82,0,0,1011,1012,5,114,0,0,1012,1020,5,102,
        0,0,1013,1014,5,114,0,0,1014,1020,5,70,0,0,1015,1016,5,82,0,0,1016,
        1020,5,102,0,0,1017,1018,5,82,0,0,1018,1020,5,70,0,0,1019,1002,1,
        0,0,0,1019,1003,1,0,0,0,1019,1005,1,0,0,0,1019,1007,1,0,0,0,1019,
        1009,1,0,0,0,1019,1011,1,0,0,0,1019,1013,1,0,0,0,1019,1015,1,0,0,
        0,1019,1017,1,0,0,0,1020,284,1,0,0,0,1021,1022,8,14,0,0,1022,286,
        1,0,0,0,1023,1024,8,15,0,0,1024,288,1,0,0,0,1025,1026,5,123,0,0,
        1026,1030,5,123,0,0,1027,1028,5,125,0,0,1028,1030,5,125,0,0,1029,
        1025,1,0,0,0,1029,1027,1,0,0,0,1030,290,1,0,0,0,1031,1036,3,293,
        143,0,1032,1036,3,295,144,0,1033,1036,3,297,145,0,1034,1036,3,299,
        146,0,1035,1031,1,0,0,0,1035,1032,1,0,0,0,1035,1033,1,0,0,0,1035,
        1034,1,0,0,0,1036,292,1,0,0,0,1037,1044,3,301,147,0,1038,1040,5,
        95,0,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1041,1,0,0,0,1041,
        1043,3,303,148,0,1042,1039,1,0,0,0,1043,1046,1,0,0,0,1044,1042,1,
        0,0,0,1044,1045,1,0,0,0,1045,1062,1,0,0,0,1046,1044,1,0,0,0,1047,
        1049,5,48,0,0,1048,1047,1,0,0,0,1049,1050,1,0,0,0,1050,1048,1,0,
        0,0,1050,1051,1,0,0,0,1051,1058,1,0,0,0,1052,1054,5,95,0,0,1053,
        1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1057,5,48,
        0,0,1056,1053,1,0,0,0,1057,1060,1,0,0,0,1058,1056,1,0,0,0,1058,1059,
        1,0,0,0,1059,1062,1,0,0,0,1060,1058,1,0,0,0,1061,1037,1,0,0,0,1061,
        1048,1,0,0,0,1062,294,1,0,0,0,1063,1064,5,48,0,0,1064,1069,7,8,0,
        0,1065,1067,5,95,0,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,
        1,0,0,0,1068,1070,3,305,149,0,1069,1066,1,0,0,0,1070,1071,1,0,0,
        0,1071,1069,1,0,0,0,1071,1072,1,0,0,0,1072,296,1,0,0,0,1073,1074,
        5,48,0,0,1074,1079,7,16,0,0,1075,1077,5,95,0,0,1076,1075,1,0,0,0,
        1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,1080,3,307,150,0,1079,1076,
        1,0,0,0,1080,1081,1,0,0,0,1081,1079,1,0,0,0,1081,1082,1,0,0,0,1082,
        298,1,0,0,0,1083,1084,5,48,0,0,1084,1089,7,17,0,0,1085,1087,5,95,
        0,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,1088,1,0,0,0,1088,1090,
        3,309,151,0,1089,1086,1,0,0,0,1090,1091,1,0,0,0,1091,1089,1,0,0,
        0,1091,1092,1,0,0,0,1092,300,1,0,0,0,1093,1094,7,18,0,0,1094,302,
        1,0,0,0,1095,1096,7,19,0,0,1096,304,1,0,0,0,1097,1098,2,48,49,0,
        1098,306,1,0,0,0,1099,1100,7,20,0,0,1100,308,1,0,0,0,1101,1104,3,
        303,148,0,1102,1104,7,21,0,0,1103,1101,1,0,0,0,1103,1102,1,0,0,0,
        1104,310,1,0,0,0,1105,1108,3,313,153,0,1106,1108,3,315,154,0,1107,
        1105,1,0,0,0,1107,1106,1,0,0,0,1108,312,1,0,0,0,1109,1111,3,317,
        155,0,1110,1109,1,0,0,0,1110,1111,1,0,0,0,1111,1112,1,0,0,0,1112,
        1117,3,319,156,0,1113,1114,3,317,155,0,1114,1115,5,46,0,0,1115,1117,
        1,0,0,0,1116,1110,1,0,0,0,1116,1113,1,0,0,0,1117,314,1,0,0,0,1118,
        1121,3,317,155,0,1119,1121,3,313,153,0,1120,1118,1,0,0,0,1120,1119,
        1,0,0,0,1121,1122,1,0,0,0,1122,1123,3,321,157,0,1123,316,1,0,0,0,
        1124,1131,3,303,148,0,1125,1127,5,95,0,0,1126,1125,1,0,0,0,1126,
        1127,1,0,0,0,1127,1128,1,0,0,0,1128,1130,3,303,148,0,1129,1126,1,
        0,0,0,1130,1133,1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,
        318,1,0,0,0,1133,1131,1,0,0,0,1134,1135,5,46,0,0,1135,1136,3,317,
        155,0,1136,320,1,0,0,0,1137,1139,7,22,0,0,1138,1140,7,23,0,0,1139,
        1138,1,0,0,0,1139,1140,1,0,0,0,1140,1141,1,0,0,0,1141,1142,3,317,
        155,0,1142,322,1,0,0,0,1143,1146,3,311,152,0,1144,1146,3,317,155,
        0,1145,1143,1,0,0,0,1145,1144,1,0,0,0,1146,1147,1,0,0,0,1147,1148,
        7,24,0,0,1148,324,1,0,0,0,1149,1151,5,13,0,0,1150,1149,1,0,0,0,1150,
        1151,1,0,0,0,1151,1152,1,0,0,0,1152,1153,5,10,0,0,1153,326,1,0,0,
        0,1154,1157,3,329,161,0,1155,1157,7,25,0,0,1156,1154,1,0,0,0,1156,
        1155,1,0,0,0,1157,328,1,0,0,0,1158,1159,7,26,0,0,1159,330,1,0,0,
        0,72,0,1,2,3,4,5,6,650,656,660,664,675,684,692,790,805,818,822,830,
        838,842,851,864,870,874,878,882,894,899,918,924,932,936,945,958,
        964,968,972,976,979,982,985,992,994,998,1000,1019,1029,1035,1039,
        1044,1050,1053,1058,1061,1066,1071,1076,1081,1086,1091,1103,1107,
        1110,1116,1120,1126,1131,1139,1145,1150,1156,11,0,1,0,7,3,0,5,1,
        0,5,2,0,5,3,0,5,4,0,7,5,0,4,0,0,7,4,0,7,43,0,7,46,0
    ]

class PythonLexer(PythonLexerBase):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SINGLE_QUOTE_FSTRING_MODE = 1
    DOUBLE_QUOTE_FSTRING_MODE = 2
    LONG_SINGLE_QUOTE_FSTRING_MODE = 3
    LONG_DOUBLE_QUOTE_FSTRING_MODE = 4
    SINGLE_QUOTE_FORMAT_SPECIFICATION_MODE = 5
    DOUBLE_QUOTE_FORMAT_SPECIFICATION_MODE = 6

    INDENT = 1
    DEDENT = 2
    FSTRING_START = 3
    FSTRING_MIDDLE = 4
    FSTRING_END = 5
    FALSE = 6
    AWAIT = 7
    ELSE = 8
    IMPORT = 9
    PASS = 10
    NONE = 11
    BREAK = 12
    EXCEPT = 13
    IN = 14
    RAISE = 15
    TRUE = 16
    CLASS = 17
    FINALLY = 18
    IS = 19
    RETURN = 20
    AND = 21
    CONTINUE = 22
    FOR = 23
    LAMBDA = 24
    TRY = 25
    AS = 26
    DEF = 27
    FROM = 28
    NONLOCAL = 29
    WHILE = 30
    ASSERT = 31
    DEL = 32
    GLOBAL = 33
    NOT = 34
    WITH = 35
    ASYNC = 36
    ELIF = 37
    IF = 38
    OR = 39
    YIELD = 40
    LPAR = 41
    LSQB = 42
    LBRACE = 43
    RPAR = 44
    RSQB = 45
    RBRACE = 46
    DOT = 47
    COLON = 48
    COMMA = 49
    SEMI = 50
    PLUS = 51
    MINUS = 52
    STAR = 53
    SLASH = 54
    VBAR = 55
    AMPER = 56
    LESS = 57
    GREATER = 58
    EQUAL = 59
    PERCENT = 60
    EQEQUAL = 61
    NOTEQUAL = 62
    LESSEQUAL = 63
    GREATEREQUAL = 64
    TILDE = 65
    CIRCUMFLEX = 66
    LEFTSHIFT = 67
    RIGHTSHIFT = 68
    DOUBLESTAR = 69
    PLUSEQUAL = 70
    MINEQUAL = 71
    STAREQUAL = 72
    SLASHEQUAL = 73
    PERCENTEQUAL = 74
    AMPEREQUAL = 75
    VBAREQUAL = 76
    CIRCUMFLEXEQUAL = 77
    LEFTSHIFTEQUAL = 78
    RIGHTSHIFTEQUAL = 79
    DOUBLESTAREQUAL = 80
    DOUBLESLASH = 81
    DOUBLESLASHEQUAL = 82
    AT = 83
    ATEQUAL = 84
    RARROW = 85
    ELLIPSIS = 86
    COLONEQUAL = 87
    EXCLAMATION = 88
    NAME = 89
    NUMBER = 90
    STRING = 91
    TYPE_COMMENT = 92
    NEWLINE = 93
    COMMENT = 94
    WS = 95
    EXPLICIT_LINE_JOINING = 96
    ERROR_TOKEN = 97

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "SINGLE_QUOTE_FSTRING_MODE", "DOUBLE_QUOTE_FSTRING_MODE", 
                  "LONG_SINGLE_QUOTE_FSTRING_MODE", "LONG_DOUBLE_QUOTE_FSTRING_MODE", 
                  "SINGLE_QUOTE_FORMAT_SPECIFICATION_MODE", "DOUBLE_QUOTE_FORMAT_SPECIFICATION_MODE" ]

    literalNames = [ "<INVALID>",
            "'False'", "'await'", "'else'", "'import'", "'pass'", "'None'", 
            "'break'", "'except'", "'in'", "'raise'", "'True'", "'class'", 
            "'finally'", "'is'", "'return'", "'and'", "'continue'", "'for'", 
            "'lambda'", "'try'", "'as'", "'def'", "'from'", "'nonlocal'", 
            "'while'", "'assert'", "'del'", "'global'", "'not'", "'with'", 
            "'async'", "'elif'", "'if'", "'or'", "'yield'", "'('", "'['", 
            "')'", "']'", "'.'", "':'", "','", "';'", "'+'", "'-'", "'*'", 
            "'/'", "'|'", "'&'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", 
            "'<='", "'>='", "'~'", "'^'", "'<<'", "'>>'", "'**'", "'+='", 
            "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", 
            "'>>='", "'**='", "'//'", "'//='", "'@'", "'@='", "'->'", "'...'", 
            "':='", "'!'" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "FSTRING_START", "FSTRING_MIDDLE", "FSTRING_END", 
            "FALSE", "AWAIT", "ELSE", "IMPORT", "PASS", "NONE", "BREAK", 
            "EXCEPT", "IN", "RAISE", "TRUE", "CLASS", "FINALLY", "IS", "RETURN", 
            "AND", "CONTINUE", "FOR", "LAMBDA", "TRY", "AS", "DEF", "FROM", 
            "NONLOCAL", "WHILE", "ASSERT", "DEL", "GLOBAL", "NOT", "WITH", 
            "ASYNC", "ELIF", "IF", "OR", "YIELD", "LPAR", "LSQB", "LBRACE", 
            "RPAR", "RSQB", "RBRACE", "DOT", "COLON", "COMMA", "SEMI", "PLUS", 
            "MINUS", "STAR", "SLASH", "VBAR", "AMPER", "LESS", "GREATER", 
            "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", 
            "TILDE", "CIRCUMFLEX", "LEFTSHIFT", "RIGHTSHIFT", "DOUBLESTAR", 
            "PLUSEQUAL", "MINEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", 
            "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", 
            "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASH", "DOUBLESLASHEQUAL", 
            "AT", "ATEQUAL", "RARROW", "ELLIPSIS", "COLONEQUAL", "EXCLAMATION", 
            "NAME", "NUMBER", "STRING", "TYPE_COMMENT", "NEWLINE", "COMMENT", 
            "WS", "EXPLICIT_LINE_JOINING", "ERROR_TOKEN" ]

    ruleNames = [ "FALSE", "AWAIT", "ELSE", "IMPORT", "PASS", "NONE", "BREAK", 
                  "EXCEPT", "IN", "RAISE", "TRUE", "CLASS", "FINALLY", "IS", 
                  "RETURN", "AND", "CONTINUE", "FOR", "LAMBDA", "TRY", "AS", 
                  "DEF", "FROM", "NONLOCAL", "WHILE", "ASSERT", "DEL", "GLOBAL", 
                  "NOT", "WITH", "ASYNC", "ELIF", "IF", "OR", "YIELD", "LPAR", 
                  "LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", "DOT", "COLON", 
                  "COMMA", "SEMI", "PLUS", "MINUS", "STAR", "SLASH", "VBAR", 
                  "AMPER", "LESS", "GREATER", "EQUAL", "PERCENT", "EQEQUAL", 
                  "NOTEQUAL", "LESSEQUAL", "GREATEREQUAL", "TILDE", "CIRCUMFLEX", 
                  "LEFTSHIFT", "RIGHTSHIFT", "DOUBLESTAR", "PLUSEQUAL", 
                  "MINEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", 
                  "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", 
                  "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASH", "DOUBLESLASHEQUAL", 
                  "AT", "ATEQUAL", "RARROW", "ELLIPSIS", "COLONEQUAL", "EXCLAMATION", 
                  "NAME", "NUMBER", "STRING", "TYPE_COMMENT", "NEWLINE", 
                  "COMMENT", "WS", "EXPLICIT_LINE_JOINING", "SINGLE_QUOTE_FSTRING_START", 
                  "DOUBLE_QUOTE_FSTRING_START", "LONG_SINGLE_QUOTE_FSTRING_START", 
                  "LONG_DOUBLE_QUOTE_FSTRING_START", "ERROR_TOKEN", "SINGLE_QUOTE_FSTRING_END", 
                  "SINGLE_QUOTE_FSTRING_MIDDLE", "SINGLE_QUOTE_FSTRING_LBRACE", 
                  "DOUBLE_QUOTE_FSTRING_END", "DOUBLE_QUOTE_FSTRING_MIDDLE", 
                  "DOUBLE_QUOTE_FSTRING_LBRACE", "LONG_SINGLE_QUOTE_FSTRING_END", 
                  "LONG_SINGLE_QUOTE_FSTRING_MIDDLE", "LONG_SINGLE_QUOTE_FSTRING_LBRACE", 
                  "LONG_DOUBLE_QUOTE_FSTRING_END", "LONG_DOUBLE_QUOTE_FSTRING_MIDDLE", 
                  "LONG_DOUBLE_QUOTE_FSTRING_LBRACE", "SINGLE_QUOTE_FORMAT_SPECIFICATION_FSTRING_MIDDLE", 
                  "SINGLE_QUOTE_FORMAT_SPECIFICATION_LBRACE", "SINGLE_QUOTE_FORMAT_SPECIFICATION_RBRACE", 
                  "DOUBLE_QUOTE_FORMAT_SPECIFICATION_FSTRING_MIDDLE", "DOUBLE_QUOTE_FORMAT_SPECIFICATION_LBRACE", 
                  "DOUBLE_QUOTE_FORMAT_SPECIFICATION_RBRACE", "STRING_LITERAL", 
                  "STRING_PREFIX", "SHORT_STRING", "LONG_STRING", "SHORT_STRING_ITEM_FOR_SINGLE_QUOTE", 
                  "SHORT_STRING_ITEM_FOR_DOUBLE_QUOTE", "LONG_STRING_ITEM", 
                  "SHORT_STRING_CHAR_NO_SINGLE_QUOTE", "SHORT_STRING_CHAR_NO_DOUBLE_QUOTE", 
                  "LONG_STRING_CHAR", "STRING_ESCAPE_SEQ", "BYTES_LITERAL", 
                  "BYTES_PREFIX", "SHORT_BYTES", "LONG_BYTES", "SHORT_BYTES_ITEM_FOR_SINGLE_QUOTE", 
                  "SHORT_BYTES_ITEM_FOR_DOUBLE_QUOTE", "LONG_BYTES_ITEM", 
                  "SHORT_BYTES_CHAR_NO_SINGLE_QUOTE", "SHORT_BYTES_CHAR_NO_DOUBLE_QUOTE", 
                  "LONG_BYTES_CHAR", "BYTES_ESCAPE_SEQ", "SINGLE_QUOTE_FSTRING_LITERAL", 
                  "DOUBLE_QUOTE_FSTRING_LITERAL", "F_STRING_PREFIX", "FORMAT_SPEC_CHAR_NO_SINGLE_QUOTE", 
                  "FORMAT_SPEC_CHAR_NO_DOUBLE_QUOTE", "DOUBLE_BRACES", "INTEGER", 
                  "DEC_INTEGER", "BIN_INTEGER", "OCT_INTEGER", "HEX_INTEGER", 
                  "NON_ZERO_DIGIT", "DIGIT", "BIN_DIGIT", "OCT_DIGIT", "HEX_DIGIT", 
                  "FLOAT_NUMBER", "POINT_FLOAT", "EXPONENT_FLOAT", "DIGIT_PART", 
                  "FRACTION", "EXPONENT", "IMAG_NUMBER", "OS_INDEPENDENT_NL", 
                  "ID_CONTINUE", "ID_START" ]

    grammarFileName = "PythonLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


PythonLexerBase.py
# The MIT License (MIT)
# Copyright (c) 2021 Robert Einhorn
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Project      : Python Indent/Dedent handler for ANTLR4 grammars
# 
# Developed by : Robert Einhorn

from typing import TextIO
from antlr4 import InputStream, Lexer, Token
from antlr4.Token import CommonToken
import sys
import re

class PythonLexerBase(Lexer):
    def __init__(self, input: InputStream, output: TextIO = sys.stdout):
        super().__init__(input, output)

        # A stack that keeps track of the indentation lengths
        self._indent_lengths: list[int] = []

        # A list where tokens are waiting to be loaded into the token stream
        self._pending_tokens: list[CommonToken] = []

        # last pending token types
        self._previous_pending_token_type: int = 0
        self._last_pending_token_type_for_default_channel: int = 0

        # The amount of opened parentheses, square brackets or curly braces
        self._opened: int = 0
        # The amount of opened parentheses and square brackets in the current lexer mode
        self._paren_or_bracket_opened: list[int] = []

        self._was_space_indentation: bool = False
        self._was_tab_indentation: bool = False
        self._was_indentation_mixed_with_spaces_and_tabs: bool = False
        self._INVALID_LENGTH: int = -1

        self._cur_token: CommonToken = None # current (under processing) token
        self._ffg_token: CommonToken = None # following (look ahead) token

        self._ERR_TXT: str = " ERROR: "

    def nextToken(self) -> CommonToken: # reading the input stream until a return EOF
        self.check_next_token()
        return self._pending_tokens.pop(0) # add the queued token to the token stream

    def check_next_token(self):
        if self._previous_pending_token_type != Token.EOF:
            self.set_current_and_following_tokens()
            if len(self._indent_lengths) == 0: # We're at the first token
                self.handle_start_of_input()
            match self._cur_token.type:
                case self.LPAR | self.LSQB | self.LBRACE:
                    self._opened += 1
                    self.add_pending_token(self._cur_token)
                case self.RPAR | self.RSQB | self.RBRACE:
                    self._opened -= 1
                    self.add_pending_token(self._cur_token)
                case self.NEWLINE:
                    self.handle_NEWLINE_token()
                case self.STRING:
                    self.handle_STRING_token()
                case self.FSTRING_MIDDLE:
                    self.handle_FSTRING_MIDDLE_token()
                case self.ERROR_TOKEN:
                    self.report_lexer_error("token recognition error at: '" + self._cur_token.text + "'")
                    self.add_pending_token(self._cur_token)
                case Token.EOF:
                    self.handle_EOF_token()
                case other:
                    self.add_pending_token(self._cur_token)
            self.handle_FORMAT_SPECIFICATION_MODE()

    def set_current_and_following_tokens(self):
        self._cur_token = super().nextToken() if self._ffg_token is None else \
                          self._ffg_token

        self.handle_fstring_lexer_modes()
        
        self._ffg_token = self._cur_token if self._cur_token.type == Token.EOF else \
                          super().nextToken()

    # initialize the _indent_lengths stack
    # hide the leading NEWLINE token(s)
    # if exists, find the first statement (not NEWLINE, not EOF token) that comes from the default channel
    # insert a leading INDENT token if necessary
    def handle_start_of_input(self):
        # initialize the stack with a default 0 indentation length
        self._indent_lengths.append(0) # this will never be popped off
        while self._cur_token.type != Token.EOF:
            if self._cur_token.channel == Token.DEFAULT_CHANNEL:
                if self._cur_token.type == self.NEWLINE:
                    # all the NEWLINE tokens must be ignored before the first statement
                    self.hide_and_add_pending_token(self._cur_token)
                else: # We're at the first statement
                    self.insert_leading_indent_token()
                    return # continue the processing of the current token with check_next_token()
            else:
                self.add_pending_token(self._cur_token) # it can be WS, EXPLICIT_LINE_JOINING or COMMENT token
            self.set_current_and_following_tokens()
        # continue the processing of the EOF token with check_next_token()

    def insert_leading_indent_token(self):
        if self._previous_pending_token_type == self.WS:
            prev_token: CommonToken = self._pending_tokens[-1]  # WS token
            if self.get_indentation_length(prev_token.text) != 0: # there is an "indentation" before the first statement
                err_msg: str = "first statement indented"
                self.report_lexer_error(err_msg)
                # insert an INDENT token before the first statement to raise an 'unexpected indent' error later by the parser
                self.create_and_add_pending_token(self.INDENT, Token.DEFAULT_CHANNEL, self._ERR_TXT + err_msg, self._cur_token)

    def handle_NEWLINE_token(self):
        if self._opened > 0: # We're in an implicit line joining, ignore the current NEWLINE token
            self.hide_and_add_pending_token(self._cur_token)
        else:
            nl_token: CommonToken = self._cur_token # save the current NEWLINE token
            is_looking_ahead: bool = self._ffg_token.type == self.WS
            if is_looking_ahead:
                self.set_current_and_following_tokens() # set the two next tokens

            match self._ffg_token.type:
                case self.NEWLINE | self.COMMENT | self.TYPE_COMMENT:
                    # We're before a blank line or a comment or a type comment
                    self.hide_and_add_pending_token(nl_token)     # ignore the NEWLINE token
                    if is_looking_ahead:
                        self.add_pending_token(self._cur_token) # WS token
                case other:
                    self.add_pending_token(nl_token)
                    if is_looking_ahead: # We're on a whitespace(s) followed by a statement
                        indentation_length: int = 0 if self._ffg_token.type == Token.EOF else \
                                                  self.get_indentation_length(self._cur_token.text)

                        if indentation_length != self._INVALID_LENGTH:
                            self.add_pending_token(self._cur_token) # WS token
                            self.insert_indent_or_dedent_token(indentation_length) # may insert INDENT token or DEDENT token(s)
                        else:
                            self.report_error("inconsistent use of tabs and spaces in indentation")
                    else: # We're at a newline followed by a statement (there is no whitespace before the statement)
                        self.insert_indent_or_dedent_token(0) # may insert DEDENT token(s)

    def insert_indent_or_dedent_token(self, cur_indent_length: int):
        prev_indent_length: int = self._indent_lengths[-1]
        if cur_indent_length > prev_indent_length:
            self.create_and_add_pending_token(self.INDENT, Token.DEFAULT_CHANNEL, None, self._ffg_token)
            self._indent_lengths.append(cur_indent_length)
        else:
            while cur_indent_length < prev_indent_length: # more than 1 DEDENT token may be inserted to the token stream
                self._indent_lengths.pop()
                prev_indent_length = self._indent_lengths[-1]
                if cur_indent_length <= prev_indent_length:
                    self.create_and_add_pending_token(self.DEDENT, Token.DEFAULT_CHANNEL, None, self._ffg_token)
                else:
                    self.report_error("inconsistent dedent")

    def handle_STRING_token(self): # remove the \<newline> escape sequences from the string literal
        # https://docs.python.org/3.11/reference/lexical_analysis.html#string-and-bytes-literals
        line_joinFreeStringLiteral: str = re.sub(r"\\\r?\n", "", self._cur_token.text)
        if len(self._cur_token.text) == len(line_joinFreeStringLiteral):
            self.add_pending_token(self._cur_token)
        else:
            originalSTRINGtoken: CommonToken = self._cur_token.clone() # backup the original token
            self._cur_token.text = line_joinFreeStringLiteral
            self.add_pending_token(self._cur_token)              # add the modified token with inline string literal
            self.hide_and_add_pending_token(originalSTRINGtoken) # add the original token to the hidden channel
            # this inserted hidden token allows to restore the original string literal with the \<newline> escape sequences

    def handle_FSTRING_MIDDLE_token(self): # replace the double braces '{{' or '}}' to single braces and hide the second braces
            fs_mid: str = self._cur_token.text
            fs_mid = fs_mid.replace("{{", "{_").replace("}}", "}_") # replace: {{ --> {_    }} --> }_
            arrOfStr: list[str] = re.split(r"(?<=[{}])_", fs_mid) # split by {_  or  }_
            s: str
            for s in arrOfStr:
                if s:
                    self.create_and_add_pending_token(self.FSTRING_MIDDLE, Token.DEFAULT_CHANNEL, s, self._ffg_token)
                    lastCharacter: str = s[-1:]
                    if lastCharacter in "{}":
                        self.create_and_add_pending_token(self.FSTRING_MIDDLE, Token.HIDDEN_CHANNEL, lastCharacter, self._ffg_token)

    def handle_fstring_lexer_modes(self):
        if self._modeStack:
            match self._cur_token.type:
                case self.LBRACE:
                    self.pushMode(Lexer.DEFAULT_MODE)
                    self._paren_or_bracket_opened.append(0)
                case self.LPAR | self.LSQB:
                    # https://peps.python.org/pep-0498/#lambdas-inside-expressions
                    self._paren_or_bracket_opened[-1] += 1 # increment the last element
                case self.RPAR | self.RSQB:
                    self._paren_or_bracket_opened[-1] -= 1 # decrement the last element
                case self.COLON:
                    if self._paren_or_bracket_opened[-1] == 0:
                        match self._modeStack[-1]: # check the previous lexer mode (the current is DEFAULT_MODE)
                            case self.SINGLE_QUOTE_FSTRING_MODE \
                               | self.LONG_SINGLE_QUOTE_FSTRING_MODE \
                               | self.SINGLE_QUOTE_FORMAT_SPECIFICATION_MODE:

                                self.mode(self.SINGLE_QUOTE_FORMAT_SPECIFICATION_MODE) # continue in format spec. mode
                            case self.DOUBLE_QUOTE_FSTRING_MODE \
                               | self.LONG_DOUBLE_QUOTE_FSTRING_MODE \
                               | self.DOUBLE_QUOTE_FORMAT_SPECIFICATION_MODE:

                                self.mode(self.DOUBLE_QUOTE_FORMAT_SPECIFICATION_MODE) # continue in format spec. mode
                case self.RBRACE:
                    match self._mode:
                        case Lexer.DEFAULT_MODE \
                           | self.SINGLE_QUOTE_FORMAT_SPECIFICATION_MODE \
                           | self.DOUBLE_QUOTE_FORMAT_SPECIFICATION_MODE:

                            self.popMode()
                            self._paren_or_bracket_opened.pop()
                        case other:
                            self.report_lexer_error("f-string: single '}' is not allowed")

    def handle_FORMAT_SPECIFICATION_MODE(self):
        if len(self._modeStack) != 0 \
           and self._ffg_token.type == self.RBRACE:
            
            match self._cur_token.type:
                case self.COLON | self.RBRACE:
                    # insert an empty FSTRING_MIDDLE token instead of the missing format specification
                    self.create_and_add_pending_token(self.FSTRING_MIDDLE, Token.DEFAULT_CHANNEL, "", self._ffg_token)

    def insert_trailing_tokens(self):
        match self._last_pending_token_type_for_default_channel:
            case self.NEWLINE | self.DEDENT:
                pass # no trailing NEWLINE token is needed
            case other:
                # insert an extra trailing NEWLINE token that serves as the end of the last statement
                self.create_and_add_pending_token(self.NEWLINE, Token.DEFAULT_CHANNEL, None, self._ffg_token) # _ffg_token is EOF
        self.insert_indent_or_dedent_token(0) # Now insert as much trailing DEDENT tokens as needed

    def handle_EOF_token(self):
        if self._last_pending_token_type_for_default_channel > 0:
            # there was statement in the input (leading NEWLINE tokens are hidden)
            self.insert_trailing_tokens()
        self.add_pending_token(self._cur_token)

    def hide_and_add_pending_token(self, token: CommonToken):
        token.channel = Token.HIDDEN_CHANNEL
        self.add_pending_token(token)

    def create_and_add_pending_token(self, type: int, channel: int, text: str, base_token: CommonToken):
        token: CommonToken = base_token.clone()
        token.type  = type
        token.channel = channel
        token.stop = base_token.start - 1
        token.text = "<" + self.symbolicNames[type] + ">" if text is None else \
                     text

        self.add_pending_token(token)

    def add_pending_token(self, token: CommonToken):
        # save the last pending token type because the _pending_tokens list can be empty by the nextToken()
        self._previous_pending_token_type = token.type
        if token.channel == Token.DEFAULT_CHANNEL:
            self._last_pending_token_type_for_default_channel = self._previous_pending_token_type
        self._pending_tokens.append(token)

    def get_indentation_length(self, textWS: str) -> int: # the textWS may contain spaces, tabs or formfeeds
        TAB_LENGTH: int = 8 # the standard number of spaces to replace a tab to spaces
        length: int = 0
        ch: str
        for ch in textWS:
            match ch:
                case ' ':
                    self._was_space_indentation = True
                    length += 1
                case '\t':
                    self._was_tab_indentation = True
                    length += TAB_LENGTH - (length % TAB_LENGTH)
                case '\f': # formfeed
                    length = 0

        if self._was_tab_indentation and self._was_space_indentation:
            if not self._was_indentation_mixed_with_spaces_and_tabs:
                self._was_indentation_mixed_with_spaces_and_tabs = True
                return self._INVALID_LENGTH # only for the first inconsistent indent
        return length

    def report_lexer_error(self, err_msg):
        self.getErrorListenerDispatch().syntaxError(self, self._cur_token, self._cur_token.line, self._cur_token.column, self._ERR_TXT + err_msg, None)

    def report_error(self, err_msg):
        self.report_lexer_error(err_msg)

        # the ERROR_TOKEN will raise an error in the parser
        self.create_and_add_pending_token(self.ERROR_TOKEN, Token.DEFAULT_CHANNEL, self._ERR_TXT + err_msg, self._ffg_token)
PythonParser.py

# Generated from PythonParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,97,2183,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,1,0,
        3,0,396,8,0,1,0,1,0,1,1,1,1,1,2,1,2,5,2,404,8,2,10,2,12,2,407,9,
        2,1,2,1,2,1,3,1,3,3,3,413,8,3,1,3,1,3,1,3,1,3,5,3,419,8,3,10,3,12,
        3,422,9,3,1,3,1,3,1,4,1,4,1,5,4,5,429,8,5,11,5,12,5,430,1,6,1,6,
        3,6,435,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,443,8,7,1,8,1,8,1,8,5,8,
        448,8,8,10,8,12,8,451,9,8,1,8,3,8,454,8,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,472,8,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,3,10,482,8,10,1,11,1,11,1,11,1,11,
        1,11,3,11,489,8,11,1,11,1,11,1,11,1,11,1,11,3,11,496,8,11,1,11,1,
        11,1,11,1,11,3,11,502,8,11,1,11,1,11,1,11,4,11,507,8,11,11,11,12,
        11,508,1,11,1,11,3,11,513,8,11,1,11,3,11,516,8,11,1,11,1,11,1,11,
        1,11,3,11,522,8,11,3,11,524,8,11,1,12,1,12,3,12,528,8,12,1,13,1,
        13,1,14,1,14,3,14,534,8,14,1,15,1,15,1,15,1,15,3,15,540,8,15,3,15,
        542,8,15,1,16,1,16,1,16,1,16,5,16,548,8,16,10,16,12,16,551,9,16,
        1,17,1,17,1,17,1,17,5,17,557,8,17,10,17,12,17,560,9,17,1,18,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,571,8,20,1,21,1,21,3,21,
        575,8,21,1,22,1,22,1,22,1,23,1,23,5,23,582,8,23,10,23,12,23,585,
        9,23,1,23,1,23,1,23,1,23,1,23,1,23,4,23,593,8,23,11,23,12,23,594,
        1,23,1,23,3,23,599,8,23,1,24,1,24,1,24,3,24,604,8,24,1,24,1,24,1,
        24,1,24,3,24,610,8,24,1,25,1,25,1,25,5,25,615,8,25,10,25,12,25,618,
        9,25,1,26,1,26,1,26,3,26,623,8,26,1,27,1,27,1,27,5,27,628,8,27,10,
        27,12,27,631,9,27,1,28,1,28,1,28,3,28,636,8,28,1,29,1,29,1,29,1,
        29,1,29,1,29,5,29,644,8,29,10,29,12,29,647,9,29,1,30,1,30,1,30,1,
        30,1,30,1,30,3,30,655,8,30,1,31,1,31,1,31,1,31,4,31,661,8,31,11,
        31,12,31,662,1,32,1,32,1,32,1,32,3,32,669,8,32,1,33,1,33,1,33,3,
        33,674,8,33,1,33,1,33,3,33,678,8,33,1,33,3,33,681,8,33,1,33,1,33,
        1,33,1,34,1,34,1,34,1,34,3,34,690,8,34,1,35,1,35,1,35,3,35,695,8,
        35,1,35,1,35,3,35,699,8,35,1,35,1,35,1,35,3,35,704,8,35,1,35,1,35,
        3,35,708,8,35,1,35,1,35,1,35,1,35,1,35,3,35,715,8,35,1,35,1,35,3,
        35,719,8,35,1,35,1,35,1,35,3,35,724,8,35,1,35,1,35,3,35,728,8,35,
        1,35,3,35,731,8,35,1,36,1,36,1,37,1,37,5,37,737,8,37,10,37,12,37,
        740,9,37,1,37,5,37,743,8,37,10,37,12,37,746,9,37,1,37,3,37,749,8,
        37,1,37,1,37,5,37,753,8,37,10,37,12,37,756,9,37,1,37,3,37,759,8,
        37,1,37,4,37,762,8,37,11,37,12,37,763,1,37,5,37,767,8,37,10,37,12,
        37,770,9,37,1,37,3,37,773,8,37,1,37,4,37,776,8,37,11,37,12,37,777,
        1,37,3,37,781,8,37,1,37,3,37,784,8,37,1,38,4,38,787,8,38,11,38,12,
        38,788,1,38,1,38,3,38,793,8,38,1,39,5,39,796,8,39,10,39,12,39,799,
        9,39,1,39,4,39,802,8,39,11,39,12,39,803,1,39,1,39,3,39,808,8,39,
        1,40,1,40,1,40,5,40,813,8,40,10,40,12,40,816,9,40,1,40,3,40,819,
        8,40,1,40,1,40,1,40,5,40,824,8,40,10,40,12,40,827,9,40,1,40,3,40,
        830,8,40,1,40,1,40,1,40,4,40,835,8,40,11,40,12,40,836,1,40,3,40,
        840,8,40,1,40,3,40,843,8,40,1,41,1,41,1,41,1,42,1,42,3,42,850,8,
        42,1,42,3,42,853,8,42,1,43,1,43,3,43,857,8,43,1,43,3,43,860,8,43,
        1,44,1,44,1,44,3,44,865,8,44,1,44,3,44,868,8,44,1,45,1,45,3,45,872,
        8,45,1,45,3,45,875,8,45,1,45,3,45,878,8,45,1,46,1,46,3,46,882,8,
        46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,
        51,1,51,1,51,1,51,1,51,1,51,3,51,902,8,51,3,51,904,8,51,1,52,1,52,
        1,52,1,52,1,52,1,52,3,52,912,8,52,3,52,914,8,52,1,53,1,53,1,53,1,
        53,1,54,1,54,1,54,1,54,1,54,3,54,925,8,54,1,55,3,55,928,8,55,1,55,
        1,55,1,55,1,55,1,55,1,55,3,55,936,8,55,1,55,1,55,3,55,940,8,55,1,
        56,3,56,943,8,56,1,56,1,56,1,56,1,56,1,56,5,56,950,8,56,10,56,12,
        56,953,9,56,1,56,3,56,956,8,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,
        964,8,56,10,56,12,56,967,9,56,1,56,1,56,3,56,971,8,56,3,56,973,8,
        56,1,56,1,56,1,57,1,57,1,57,3,57,980,8,57,1,58,1,58,1,58,1,58,1,
        58,1,58,1,58,1,58,1,58,4,58,991,8,58,11,58,12,58,992,1,58,3,58,996,
        8,58,1,58,3,58,999,8,58,1,58,1,58,1,58,1,58,4,58,1005,8,58,11,58,
        12,58,1006,1,58,3,58,1010,8,58,1,58,3,58,1013,8,58,3,58,1015,8,58,
        1,59,1,59,1,59,1,59,3,59,1021,8,59,3,59,1023,8,59,1,59,1,59,1,59,
        1,60,1,60,1,60,1,60,1,60,3,60,1033,8,60,1,60,1,60,1,60,1,61,1,61,
        1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,4,62,1048,8,62,11,62,12,
        62,1049,1,62,1,62,1,63,1,63,1,63,3,63,1057,8,63,1,63,3,63,1060,8,
        63,1,64,1,64,1,64,3,64,1065,8,64,1,64,1,64,1,64,1,65,1,65,1,65,1,
        66,1,66,3,66,1075,8,66,1,67,1,67,3,67,1079,8,67,1,68,1,68,1,68,1,
        68,1,69,1,69,1,69,5,69,1088,8,69,10,69,12,69,1091,9,69,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,3,70,1101,8,70,1,71,1,71,1,71,1,71,
        1,71,1,71,3,71,1109,8,71,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1117,
        8,72,1,73,1,73,1,73,1,73,1,74,3,74,1124,8,74,1,74,1,74,1,75,3,75,
        1129,8,75,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,79,
        1,80,1,80,1,81,1,81,1,82,1,82,1,82,4,82,1149,8,82,11,82,12,82,1150,
        1,83,1,83,1,83,5,83,1156,8,83,10,83,12,83,1159,9,83,1,84,1,84,1,
        84,1,84,1,85,1,85,3,85,1167,8,85,1,85,1,85,1,85,3,85,1172,8,85,1,
        85,3,85,1175,8,85,1,86,1,86,1,86,3,86,1180,8,86,1,87,1,87,1,87,5,
        87,1185,8,87,10,87,12,87,1188,9,87,1,87,3,87,1191,8,87,1,88,1,88,
        3,88,1195,8,88,1,89,1,89,1,89,1,89,3,89,1201,8,89,1,90,1,90,1,90,
        1,90,1,90,3,90,1208,8,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1216,
        8,90,1,90,3,90,1219,8,90,1,90,1,90,3,90,1223,8,90,1,91,1,91,1,91,
        5,91,1228,8,91,10,91,12,91,1231,9,91,1,92,1,92,3,92,1235,8,92,1,
        92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,3,94,1248,8,
        94,1,94,3,94,1251,8,94,1,94,3,94,1254,8,94,3,94,1256,8,94,1,94,1,
        94,1,95,1,95,1,95,5,95,1263,8,95,10,95,12,95,1266,9,95,1,96,1,96,
        1,96,5,96,1271,8,96,10,96,12,96,1274,9,96,1,97,1,97,1,97,1,97,1,
        98,1,98,1,98,3,98,1283,8,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,
        100,1,100,1,100,5,100,1295,8,100,10,100,12,100,1298,9,100,1,100,
        3,100,1301,8,100,1,101,1,101,3,101,1305,8,101,1,101,1,101,1,101,
        1,101,3,101,1311,8,101,1,101,1,101,1,101,1,101,3,101,1317,8,101,
        3,101,1319,8,101,1,102,1,102,1,102,1,103,1,103,1,103,5,103,1327,
        8,103,10,103,12,103,1330,9,103,1,103,3,103,1333,8,103,1,104,1,104,
        1,104,1,104,1,104,1,104,3,104,1341,8,104,1,104,3,104,1344,8,104,
        1,105,1,105,1,105,1,105,3,105,1350,8,105,3,105,1352,8,105,1,106,
        1,106,1,106,5,106,1357,8,106,10,106,12,106,1360,9,106,1,106,3,106,
        1363,8,106,1,107,1,107,1,107,3,107,1368,8,107,1,108,1,108,1,108,
        5,108,1373,8,108,10,108,12,108,1376,9,108,1,108,3,108,1379,8,108,
        1,109,1,109,1,109,3,109,1384,8,109,1,110,1,110,1,110,1,110,1,111,
        1,111,3,111,1392,8,111,1,112,1,112,1,112,5,112,1397,8,112,10,112,
        12,112,1400,9,112,1,113,1,113,1,113,5,113,1405,8,113,10,113,12,113,
        1408,9,113,1,114,1,114,1,114,3,114,1413,8,114,1,115,1,115,5,115,
        1417,8,115,10,115,12,115,1420,9,115,1,116,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,3,116,1432,8,116,1,117,1,117,1,117,
        1,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,120,1,121,1,121,
        1,121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,124,1,124,1,124,
        1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,127,1,127,1,127,1,127,
        1,127,1,127,5,127,1472,8,127,10,127,12,127,1475,9,127,1,128,1,128,
        1,128,1,128,1,128,1,128,5,128,1483,8,128,10,128,12,128,1486,9,128,
        1,129,1,129,1,129,1,129,1,129,1,129,5,129,1494,8,129,10,129,12,129,
        1497,9,129,1,130,1,130,1,130,1,130,1,130,1,130,5,130,1505,8,130,
        10,130,12,130,1508,9,130,1,131,1,131,1,131,1,131,1,131,1,131,5,131,
        1516,8,131,10,131,12,131,1519,9,131,1,132,1,132,1,132,1,132,1,132,
        1,132,5,132,1527,8,132,10,132,12,132,1530,9,132,1,133,1,133,1,133,
        1,133,1,133,1,133,1,133,3,133,1539,8,133,1,134,1,134,1,134,3,134,
        1544,8,134,1,135,1,135,1,135,3,135,1549,8,135,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,3,136,1560,8,136,1,136,1,136,
        1,136,1,136,1,136,3,136,1567,8,136,5,136,1569,8,136,10,136,12,136,
        1572,9,136,1,137,1,137,1,137,3,137,1577,8,137,1,137,1,137,1,137,
        3,137,1582,8,137,5,137,1584,8,137,10,137,12,137,1587,9,137,1,137,
        3,137,1590,8,137,3,137,1592,8,137,1,138,3,138,1595,8,138,1,138,1,
        138,3,138,1599,8,138,1,138,1,138,3,138,1603,8,138,3,138,1605,8,138,
        1,138,3,138,1608,8,138,1,139,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,3,139,1619,8,139,1,139,1,139,3,139,1623,8,139,1,139,
        1,139,1,139,1,139,3,139,1629,8,139,1,139,3,139,1632,8,139,1,140,
        1,140,1,140,3,140,1637,8,140,1,140,1,140,1,141,1,141,3,141,1643,
        8,141,1,141,1,141,1,141,1,142,1,142,1,143,1,143,5,143,1652,8,143,
        10,143,12,143,1655,9,143,1,143,5,143,1658,8,143,10,143,12,143,1661,
        9,143,1,143,3,143,1664,8,143,1,143,1,143,5,143,1668,8,143,10,143,
        12,143,1671,9,143,1,143,3,143,1674,8,143,1,143,4,143,1677,8,143,
        11,143,12,143,1678,1,143,5,143,1682,8,143,10,143,12,143,1685,9,143,
        1,143,3,143,1688,8,143,1,143,4,143,1691,8,143,11,143,12,143,1692,
        1,143,3,143,1696,8,143,1,143,3,143,1699,8,143,1,144,4,144,1702,8,
        144,11,144,12,144,1703,1,144,1,144,3,144,1708,8,144,1,145,5,145,
        1711,8,145,10,145,12,145,1714,9,145,1,145,4,145,1717,8,145,11,145,
        12,145,1718,1,145,1,145,3,145,1723,8,145,1,146,1,146,1,146,5,146,
        1728,8,146,10,146,12,146,1731,9,146,1,146,3,146,1734,8,146,1,146,
        1,146,1,146,4,146,1739,8,146,11,146,12,146,1740,1,146,3,146,1744,
        8,146,1,146,3,146,1747,8,146,1,147,1,147,1,147,1,148,1,148,3,148,
        1754,8,148,1,149,1,149,1,149,3,149,1759,8,149,1,150,1,150,3,150,
        1763,8,150,1,150,3,150,1766,8,150,1,151,1,151,1,152,1,152,3,152,
        1772,8,152,1,153,1,153,1,153,3,153,1777,8,153,1,153,3,153,1780,8,
        153,1,153,3,153,1783,8,153,1,153,3,153,1786,8,153,1,153,1,153,1,
        154,1,154,1,154,1,155,1,155,5,155,1795,8,155,10,155,12,155,1798,
        9,155,1,156,1,156,3,156,1802,8,156,1,157,1,157,5,157,1806,8,157,
        10,157,12,157,1809,9,157,1,157,1,157,1,158,1,158,1,159,1,159,4,159,
        1817,8,159,11,159,12,159,1818,1,160,1,160,3,160,1823,8,160,1,160,
        1,160,1,161,1,161,1,161,1,161,3,161,1831,8,161,3,161,1833,8,161,
        1,161,1,161,1,162,1,162,1,162,1,162,1,163,1,163,3,163,1843,8,163,
        1,163,1,163,1,164,1,164,1,164,5,164,1850,8,164,10,164,12,164,1853,
        9,164,1,164,3,164,1856,8,164,1,165,1,165,1,165,3,165,1861,8,165,
        1,166,1,166,1,166,1,166,1,167,4,167,1868,8,167,11,167,12,167,1869,
        1,168,3,168,1873,8,168,1,168,1,168,1,168,1,168,1,168,1,168,5,168,
        1881,8,168,10,168,12,168,1884,9,168,1,169,1,169,1,169,1,169,1,169,
        1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,3,171,1899,8,171,
        1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,173,1,173,3,173,
        1911,8,173,1,174,1,174,1,174,3,174,1916,8,174,3,174,1918,8,174,1,
        174,1,174,1,174,1,174,3,174,1924,8,174,3,174,1926,8,174,5,174,1928,
        8,174,10,174,12,174,1931,9,174,1,174,1,174,3,174,1935,8,174,1,174,
        3,174,1938,8,174,1,175,1,175,1,175,5,175,1943,8,175,10,175,12,175,
        1946,9,175,1,175,1,175,1,175,1,175,5,175,1952,8,175,10,175,12,175,
        1955,9,175,3,175,1957,8,175,1,175,1,175,1,175,5,175,1962,8,175,10,
        175,12,175,1965,9,175,3,175,1967,8,175,1,176,1,176,1,176,1,177,1,
        177,1,177,1,177,3,177,1976,8,177,1,178,1,178,1,178,1,178,1,178,3,
        178,1983,8,178,1,179,1,179,1,179,5,179,1988,8,179,10,179,12,179,
        1991,9,179,1,179,3,179,1994,8,179,1,180,1,180,1,180,4,180,1999,8,
        180,11,180,12,180,2000,1,180,3,180,2004,8,180,1,181,1,181,1,181,
        1,181,4,181,2010,8,181,11,181,12,181,2011,1,181,3,181,2015,8,181,
        3,181,2017,8,181,1,182,1,182,1,182,3,182,2022,8,182,1,183,1,183,
        1,183,1,183,1,183,1,183,1,183,3,183,2031,8,183,1,183,3,183,2034,
        8,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,2043,8,184,
        1,184,1,184,1,184,3,184,2048,8,184,1,184,3,184,2051,8,184,1,185,
        1,185,1,185,1,185,1,185,1,185,3,185,2059,8,185,1,186,1,186,1,186,
        1,186,1,186,1,186,1,186,3,186,2068,8,186,1,187,1,187,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,3,187,2083,
        8,187,1,187,3,187,2086,8,187,5,187,2088,8,187,10,187,12,187,2091,
        9,187,1,188,1,188,1,188,5,188,2096,8,188,10,188,12,188,2099,9,188,
        1,188,3,188,2102,8,188,1,189,1,189,1,189,1,189,1,189,1,189,1,189,
        3,189,2111,8,189,1,189,3,189,2114,8,189,1,190,1,190,1,190,1,190,
        1,190,1,190,1,190,3,190,2123,8,190,1,190,1,190,1,190,3,190,2128,
        8,190,1,190,3,190,2131,8,190,1,191,1,191,1,191,5,191,2136,8,191,
        10,191,12,191,2139,9,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,
        2147,8,191,1,191,1,191,3,191,2151,8,191,3,191,2153,8,191,1,191,1,
        191,1,191,1,191,1,191,3,191,2160,8,191,1,191,1,191,3,191,2164,8,
        191,1,192,1,192,1,192,3,192,2169,8,192,1,193,1,193,1,193,1,194,1,
        194,1,194,1,195,1,195,1,195,1,196,1,196,1,196,1,196,0,9,58,254,256,
        258,260,262,264,272,374,197,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
        144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,
        176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
        208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,
        240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,
        272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
        304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,
        336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,
        368,370,372,374,376,378,380,382,384,386,388,390,392,0,5,3,0,70,80,
        82,82,84,84,2,0,47,47,86,86,1,0,51,52,1,0,67,68,4,0,53,54,60,60,
        81,81,83,83,2356,0,395,1,0,0,0,2,399,1,0,0,0,4,401,1,0,0,0,6,410,
        1,0,0,0,8,425,1,0,0,0,10,428,1,0,0,0,12,434,1,0,0,0,14,442,1,0,0,
        0,16,444,1,0,0,0,18,471,1,0,0,0,20,481,1,0,0,0,22,523,1,0,0,0,24,
        527,1,0,0,0,26,529,1,0,0,0,28,531,1,0,0,0,30,535,1,0,0,0,32,543,
        1,0,0,0,34,552,1,0,0,0,36,561,1,0,0,0,38,564,1,0,0,0,40,566,1,0,
        0,0,42,574,1,0,0,0,44,576,1,0,0,0,46,598,1,0,0,0,48,609,1,0,0,0,
        50,611,1,0,0,0,52,619,1,0,0,0,54,624,1,0,0,0,56,632,1,0,0,0,58,637,
        1,0,0,0,60,654,1,0,0,0,62,660,1,0,0,0,64,668,1,0,0,0,66,670,1,0,
        0,0,68,689,1,0,0,0,70,730,1,0,0,0,72,732,1,0,0,0,74,783,1,0,0,0,
        76,786,1,0,0,0,78,797,1,0,0,0,80,842,1,0,0,0,82,844,1,0,0,0,84,847,
        1,0,0,0,86,854,1,0,0,0,88,861,1,0,0,0,90,869,1,0,0,0,92,879,1,0,
        0,0,94,883,1,0,0,0,96,886,1,0,0,0,98,889,1,0,0,0,100,892,1,0,0,0,
        102,895,1,0,0,0,104,905,1,0,0,0,106,915,1,0,0,0,108,919,1,0,0,0,
        110,927,1,0,0,0,112,942,1,0,0,0,114,976,1,0,0,0,116,1014,1,0,0,0,
        118,1016,1,0,0,0,120,1027,1,0,0,0,122,1037,1,0,0,0,124,1041,1,0,
        0,0,126,1059,1,0,0,0,128,1061,1,0,0,0,130,1069,1,0,0,0,132,1074,
        1,0,0,0,134,1078,1,0,0,0,136,1080,1,0,0,0,138,1084,1,0,0,0,140,1100,
        1,0,0,0,142,1108,1,0,0,0,144,1116,1,0,0,0,146,1118,1,0,0,0,148,1123,
        1,0,0,0,150,1128,1,0,0,0,152,1132,1,0,0,0,154,1134,1,0,0,0,156,1136,
        1,0,0,0,158,1138,1,0,0,0,160,1141,1,0,0,0,162,1143,1,0,0,0,164,1145,
        1,0,0,0,166,1152,1,0,0,0,168,1160,1,0,0,0,170,1174,1,0,0,0,172,1176,
        1,0,0,0,174,1181,1,0,0,0,176,1194,1,0,0,0,178,1200,1,0,0,0,180,1222,
        1,0,0,0,182,1224,1,0,0,0,184,1234,1,0,0,0,186,1239,1,0,0,0,188,1242,
        1,0,0,0,190,1259,1,0,0,0,192,1267,1,0,0,0,194,1275,1,0,0,0,196,1279,
        1,0,0,0,198,1287,1,0,0,0,200,1291,1,0,0,0,202,1318,1,0,0,0,204,1320,
        1,0,0,0,206,1323,1,0,0,0,208,1343,1,0,0,0,210,1345,1,0,0,0,212,1353,
        1,0,0,0,214,1367,1,0,0,0,216,1369,1,0,0,0,218,1383,1,0,0,0,220,1385,
        1,0,0,0,222,1391,1,0,0,0,224,1393,1,0,0,0,226,1401,1,0,0,0,228,1412,
        1,0,0,0,230,1414,1,0,0,0,232,1431,1,0,0,0,234,1433,1,0,0,0,236,1436,
        1,0,0,0,238,1439,1,0,0,0,240,1442,1,0,0,0,242,1445,1,0,0,0,244,1448,
        1,0,0,0,246,1451,1,0,0,0,248,1455,1,0,0,0,250,1458,1,0,0,0,252,1462,
        1,0,0,0,254,1465,1,0,0,0,256,1476,1,0,0,0,258,1487,1,0,0,0,260,1498,
        1,0,0,0,262,1509,1,0,0,0,264,1520,1,0,0,0,266,1538,1,0,0,0,268,1540,
        1,0,0,0,270,1548,1,0,0,0,272,1550,1,0,0,0,274,1591,1,0,0,0,276,1607,
        1,0,0,0,278,1631,1,0,0,0,280,1633,1,0,0,0,282,1640,1,0,0,0,284,1647,
        1,0,0,0,286,1698,1,0,0,0,288,1701,1,0,0,0,290,1712,1,0,0,0,292,1746,
        1,0,0,0,294,1748,1,0,0,0,296,1751,1,0,0,0,298,1755,1,0,0,0,300,1760,
        1,0,0,0,302,1767,1,0,0,0,304,1771,1,0,0,0,306,1773,1,0,0,0,308,1789,
        1,0,0,0,310,1792,1,0,0,0,312,1801,1,0,0,0,314,1803,1,0,0,0,316,1812,
        1,0,0,0,318,1816,1,0,0,0,320,1820,1,0,0,0,322,1826,1,0,0,0,324,1836,
        1,0,0,0,326,1840,1,0,0,0,328,1846,1,0,0,0,330,1860,1,0,0,0,332,1862,
        1,0,0,0,334,1867,1,0,0,0,336,1872,1,0,0,0,338,1885,1,0,0,0,340,1890,
        1,0,0,0,342,1895,1,0,0,0,344,1903,1,0,0,0,346,1908,1,0,0,0,348,1937,
        1,0,0,0,350,1966,1,0,0,0,352,1968,1,0,0,0,354,1975,1,0,0,0,356,1982,
        1,0,0,0,358,1984,1,0,0,0,360,1995,1,0,0,0,362,2005,1,0,0,0,364,2021,
        1,0,0,0,366,2033,1,0,0,0,368,2050,1,0,0,0,370,2058,1,0,0,0,372,2060,
        1,0,0,0,374,2069,1,0,0,0,376,2092,1,0,0,0,378,2113,1,0,0,0,380,2130,
        1,0,0,0,382,2163,1,0,0,0,384,2168,1,0,0,0,386,2170,1,0,0,0,388,2173,
        1,0,0,0,390,2176,1,0,0,0,392,2179,1,0,0,0,394,396,3,10,5,0,395,394,
        1,0,0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,398,5,0,0,1,398,1,1,
        0,0,0,399,400,3,14,7,0,400,3,1,0,0,0,401,405,3,206,103,0,402,404,
        5,93,0,0,403,402,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,
        1,0,0,0,406,408,1,0,0,0,407,405,1,0,0,0,408,409,5,0,0,1,409,5,1,
        0,0,0,410,412,5,41,0,0,411,413,3,382,191,0,412,411,1,0,0,0,412,413,
        1,0,0,0,413,414,1,0,0,0,414,415,5,44,0,0,415,416,5,85,0,0,416,420,
        3,208,104,0,417,419,5,93,0,0,418,417,1,0,0,0,419,422,1,0,0,0,420,
        418,1,0,0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,420,1,0,0,0,423,
        424,5,0,0,1,424,7,1,0,0,0,425,426,3,212,106,0,426,9,1,0,0,0,427,
        429,3,12,6,0,428,427,1,0,0,0,429,430,1,0,0,0,430,428,1,0,0,0,430,
        431,1,0,0,0,431,11,1,0,0,0,432,435,3,20,10,0,433,435,3,16,8,0,434,
        432,1,0,0,0,434,433,1,0,0,0,435,13,1,0,0,0,436,437,3,20,10,0,437,
        438,5,93,0,0,438,443,1,0,0,0,439,443,3,16,8,0,440,443,5,93,0,0,441,
        443,5,0,0,1,442,436,1,0,0,0,442,439,1,0,0,0,442,440,1,0,0,0,442,
        441,1,0,0,0,443,15,1,0,0,0,444,449,3,18,9,0,445,446,5,50,0,0,446,
        448,3,18,9,0,447,445,1,0,0,0,448,451,1,0,0,0,449,447,1,0,0,0,449,
        450,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,452,454,5,50,0,0,453,
        452,1,0,0,0,453,454,1,0,0,0,454,455,1,0,0,0,455,456,5,93,0,0,456,
        17,1,0,0,0,457,472,3,22,11,0,458,472,3,196,98,0,459,472,3,212,106,
        0,460,472,3,28,14,0,461,472,3,42,21,0,462,472,3,30,15,0,463,472,
        5,10,0,0,464,472,3,36,18,0,465,472,3,38,19,0,466,472,3,40,20,0,467,
        472,5,12,0,0,468,472,5,22,0,0,469,472,3,32,16,0,470,472,3,34,17,
        0,471,457,1,0,0,0,471,458,1,0,0,0,471,459,1,0,0,0,471,460,1,0,0,
        0,471,461,1,0,0,0,471,462,1,0,0,0,471,463,1,0,0,0,471,464,1,0,0,
        0,471,465,1,0,0,0,471,466,1,0,0,0,471,467,1,0,0,0,471,468,1,0,0,
        0,471,469,1,0,0,0,471,470,1,0,0,0,472,19,1,0,0,0,473,482,3,68,34,
        0,474,482,3,102,51,0,475,482,3,64,32,0,476,482,3,112,56,0,477,482,
        3,110,55,0,478,482,3,116,58,0,479,482,3,108,54,0,480,482,3,124,62,
        0,481,473,1,0,0,0,481,474,1,0,0,0,481,475,1,0,0,0,481,476,1,0,0,
        0,481,477,1,0,0,0,481,478,1,0,0,0,481,479,1,0,0,0,481,480,1,0,0,
        0,482,21,1,0,0,0,483,484,5,89,0,0,484,485,5,48,0,0,485,488,3,208,
        104,0,486,487,5,59,0,0,487,489,3,24,12,0,488,486,1,0,0,0,488,489,
        1,0,0,0,489,524,1,0,0,0,490,491,5,41,0,0,491,492,3,370,185,0,492,
        493,5,44,0,0,493,496,1,0,0,0,494,496,3,372,186,0,495,490,1,0,0,0,
        495,494,1,0,0,0,496,497,1,0,0,0,497,498,5,48,0,0,498,501,3,208,104,
        0,499,500,5,59,0,0,500,502,3,24,12,0,501,499,1,0,0,0,501,502,1,0,
        0,0,502,524,1,0,0,0,503,504,3,358,179,0,504,505,5,59,0,0,505,507,
        1,0,0,0,506,503,1,0,0,0,507,508,1,0,0,0,508,506,1,0,0,0,508,509,
        1,0,0,0,509,512,1,0,0,0,510,513,3,210,105,0,511,513,3,212,106,0,
        512,510,1,0,0,0,512,511,1,0,0,0,513,515,1,0,0,0,514,516,5,92,0,0,
        515,514,1,0,0,0,515,516,1,0,0,0,516,524,1,0,0,0,517,518,3,370,185,
        0,518,521,3,26,13,0,519,522,3,210,105,0,520,522,3,212,106,0,521,
        519,1,0,0,0,521,520,1,0,0,0,522,524,1,0,0,0,523,483,1,0,0,0,523,
        495,1,0,0,0,523,506,1,0,0,0,523,517,1,0,0,0,524,23,1,0,0,0,525,528,
        3,210,105,0,526,528,3,212,106,0,527,525,1,0,0,0,527,526,1,0,0,0,
        528,25,1,0,0,0,529,530,7,0,0,0,530,27,1,0,0,0,531,533,5,20,0,0,532,
        534,3,212,106,0,533,532,1,0,0,0,533,534,1,0,0,0,534,29,1,0,0,0,535,
        541,5,15,0,0,536,539,3,208,104,0,537,538,5,28,0,0,538,540,3,208,
        104,0,539,537,1,0,0,0,539,540,1,0,0,0,540,542,1,0,0,0,541,536,1,
        0,0,0,541,542,1,0,0,0,542,31,1,0,0,0,543,544,5,33,0,0,544,549,5,
        89,0,0,545,546,5,49,0,0,546,548,5,89,0,0,547,545,1,0,0,0,548,551,
        1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,33,1,0,0,0,551,549,1,
        0,0,0,552,553,5,29,0,0,553,558,5,89,0,0,554,555,5,49,0,0,555,557,
        5,89,0,0,556,554,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,
        1,0,0,0,559,35,1,0,0,0,560,558,1,0,0,0,561,562,5,32,0,0,562,563,
        3,376,188,0,563,37,1,0,0,0,564,565,3,210,105,0,565,39,1,0,0,0,566,
        567,5,31,0,0,567,570,3,208,104,0,568,569,5,49,0,0,569,571,3,208,
        104,0,570,568,1,0,0,0,570,571,1,0,0,0,571,41,1,0,0,0,572,575,3,44,
        22,0,573,575,3,46,23,0,574,572,1,0,0,0,574,573,1,0,0,0,575,43,1,
        0,0,0,576,577,5,9,0,0,577,578,3,54,27,0,578,45,1,0,0,0,579,583,5,
        28,0,0,580,582,7,1,0,0,581,580,1,0,0,0,582,585,1,0,0,0,583,581,1,
        0,0,0,583,584,1,0,0,0,584,586,1,0,0,0,585,583,1,0,0,0,586,587,3,
        58,29,0,587,588,5,9,0,0,588,589,3,48,24,0,589,599,1,0,0,0,590,592,
        5,28,0,0,591,593,7,1,0,0,592,591,1,0,0,0,593,594,1,0,0,0,594,592,
        1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,597,5,9,0,0,597,599,
        3,48,24,0,598,579,1,0,0,0,598,590,1,0,0,0,599,47,1,0,0,0,600,601,
        5,41,0,0,601,603,3,50,25,0,602,604,5,49,0,0,603,602,1,0,0,0,603,
        604,1,0,0,0,604,605,1,0,0,0,605,606,5,44,0,0,606,610,1,0,0,0,607,
        610,3,50,25,0,608,610,5,53,0,0,609,600,1,0,0,0,609,607,1,0,0,0,609,
        608,1,0,0,0,610,49,1,0,0,0,611,616,3,52,26,0,612,613,5,49,0,0,613,
        615,3,52,26,0,614,612,1,0,0,0,615,618,1,0,0,0,616,614,1,0,0,0,616,
        617,1,0,0,0,617,51,1,0,0,0,618,616,1,0,0,0,619,622,5,89,0,0,620,
        621,5,26,0,0,621,623,5,89,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,
        53,1,0,0,0,624,629,3,56,28,0,625,626,5,49,0,0,626,628,3,56,28,0,
        627,625,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,
        630,55,1,0,0,0,631,629,1,0,0,0,632,635,3,58,29,0,633,634,5,26,0,
        0,634,636,5,89,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,57,1,0,0,
        0,637,638,6,29,-1,0,638,639,5,89,0,0,639,645,1,0,0,0,640,641,10,
        2,0,0,641,642,5,47,0,0,642,644,5,89,0,0,643,640,1,0,0,0,644,647,
        1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,59,1,0,0,0,647,645,1,
        0,0,0,648,649,5,93,0,0,649,650,5,1,0,0,650,651,3,10,5,0,651,652,
        5,2,0,0,652,655,1,0,0,0,653,655,3,16,8,0,654,648,1,0,0,0,654,653,
        1,0,0,0,655,61,1,0,0,0,656,657,5,83,0,0,657,658,3,222,111,0,658,
        659,5,93,0,0,659,661,1,0,0,0,660,656,1,0,0,0,661,662,1,0,0,0,662,
        660,1,0,0,0,662,663,1,0,0,0,663,63,1,0,0,0,664,665,3,62,31,0,665,
        666,3,66,33,0,666,669,1,0,0,0,667,669,3,66,33,0,668,664,1,0,0,0,
        668,667,1,0,0,0,669,65,1,0,0,0,670,671,5,17,0,0,671,673,5,89,0,0,
        672,674,3,198,99,0,673,672,1,0,0,0,673,674,1,0,0,0,674,680,1,0,0,
        0,675,677,5,41,0,0,676,678,3,346,173,0,677,676,1,0,0,0,677,678,1,
        0,0,0,678,679,1,0,0,0,679,681,5,44,0,0,680,675,1,0,0,0,680,681,1,
        0,0,0,681,682,1,0,0,0,682,683,5,48,0,0,683,684,3,60,30,0,684,67,
        1,0,0,0,685,686,3,62,31,0,686,687,3,70,35,0,687,690,1,0,0,0,688,
        690,3,70,35,0,689,685,1,0,0,0,689,688,1,0,0,0,690,69,1,0,0,0,691,
        692,5,27,0,0,692,694,5,89,0,0,693,695,3,198,99,0,694,693,1,0,0,0,
        694,695,1,0,0,0,695,696,1,0,0,0,696,698,5,41,0,0,697,699,3,72,36,
        0,698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,703,5,44,0,
        0,701,702,5,85,0,0,702,704,3,208,104,0,703,701,1,0,0,0,703,704,1,
        0,0,0,704,705,1,0,0,0,705,707,5,48,0,0,706,708,3,384,192,0,707,706,
        1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,731,3,60,30,0,710,711,
        5,36,0,0,711,712,5,27,0,0,712,714,5,89,0,0,713,715,3,198,99,0,714,
        713,1,0,0,0,714,715,1,0,0,0,715,716,1,0,0,0,716,718,5,41,0,0,717,
        719,3,72,36,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,
        723,5,44,0,0,721,722,5,85,0,0,722,724,3,208,104,0,723,721,1,0,0,
        0,723,724,1,0,0,0,724,725,1,0,0,0,725,727,5,48,0,0,726,728,3,384,
        192,0,727,726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,731,3,
        60,30,0,730,691,1,0,0,0,730,710,1,0,0,0,731,71,1,0,0,0,732,733,3,
        74,37,0,733,73,1,0,0,0,734,738,3,76,38,0,735,737,3,84,42,0,736,735,
        1,0,0,0,737,740,1,0,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,744,
        1,0,0,0,740,738,1,0,0,0,741,743,3,88,44,0,742,741,1,0,0,0,743,746,
        1,0,0,0,744,742,1,0,0,0,744,745,1,0,0,0,745,748,1,0,0,0,746,744,
        1,0,0,0,747,749,3,80,40,0,748,747,1,0,0,0,748,749,1,0,0,0,749,784,
        1,0,0,0,750,754,3,78,39,0,751,753,3,88,44,0,752,751,1,0,0,0,753,
        756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,758,1,0,0,0,756,
        754,1,0,0,0,757,759,3,80,40,0,758,757,1,0,0,0,758,759,1,0,0,0,759,
        784,1,0,0,0,760,762,3,84,42,0,761,760,1,0,0,0,762,763,1,0,0,0,763,
        761,1,0,0,0,763,764,1,0,0,0,764,768,1,0,0,0,765,767,3,88,44,0,766,
        765,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,
        772,1,0,0,0,770,768,1,0,0,0,771,773,3,80,40,0,772,771,1,0,0,0,772,
        773,1,0,0,0,773,784,1,0,0,0,774,776,3,88,44,0,775,774,1,0,0,0,776,
        777,1,0,0,0,777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,
        781,3,80,40,0,780,779,1,0,0,0,780,781,1,0,0,0,781,784,1,0,0,0,782,
        784,3,80,40,0,783,734,1,0,0,0,783,750,1,0,0,0,783,761,1,0,0,0,783,
        775,1,0,0,0,783,782,1,0,0,0,784,75,1,0,0,0,785,787,3,84,42,0,786,
        785,1,0,0,0,787,788,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,0,789,
        790,1,0,0,0,790,792,5,54,0,0,791,793,5,49,0,0,792,791,1,0,0,0,792,
        793,1,0,0,0,793,77,1,0,0,0,794,796,3,84,42,0,795,794,1,0,0,0,796,
        799,1,0,0,0,797,795,1,0,0,0,797,798,1,0,0,0,798,801,1,0,0,0,799,
        797,1,0,0,0,800,802,3,88,44,0,801,800,1,0,0,0,802,803,1,0,0,0,803,
        801,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,807,5,54,0,0,806,
        808,5,49,0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,79,1,0,0,0,809,
        810,5,53,0,0,810,814,3,84,42,0,811,813,3,90,45,0,812,811,1,0,0,0,
        813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,818,1,0,0,0,
        816,814,1,0,0,0,817,819,3,82,41,0,818,817,1,0,0,0,818,819,1,0,0,
        0,819,843,1,0,0,0,820,821,5,53,0,0,821,825,3,86,43,0,822,824,3,90,
        45,0,823,822,1,0,0,0,824,827,1,0,0,0,825,823,1,0,0,0,825,826,1,0,
        0,0,826,829,1,0,0,0,827,825,1,0,0,0,828,830,3,82,41,0,829,828,1,
        0,0,0,829,830,1,0,0,0,830,843,1,0,0,0,831,832,5,53,0,0,832,834,5,
        49,0,0,833,835,3,90,45,0,834,833,1,0,0,0,835,836,1,0,0,0,836,834,
        1,0,0,0,836,837,1,0,0,0,837,839,1,0,0,0,838,840,3,82,41,0,839,838,
        1,0,0,0,839,840,1,0,0,0,840,843,1,0,0,0,841,843,3,82,41,0,842,809,
        1,0,0,0,842,820,1,0,0,0,842,831,1,0,0,0,842,841,1,0,0,0,843,81,1,
        0,0,0,844,845,5,69,0,0,845,846,3,84,42,0,846,83,1,0,0,0,847,849,
        3,92,46,0,848,850,5,49,0,0,849,848,1,0,0,0,849,850,1,0,0,0,850,852,
        1,0,0,0,851,853,5,92,0,0,852,851,1,0,0,0,852,853,1,0,0,0,853,85,
        1,0,0,0,854,856,3,94,47,0,855,857,5,49,0,0,856,855,1,0,0,0,856,857,
        1,0,0,0,857,859,1,0,0,0,858,860,5,92,0,0,859,858,1,0,0,0,859,860,
        1,0,0,0,860,87,1,0,0,0,861,862,3,92,46,0,862,864,3,100,50,0,863,
        865,5,49,0,0,864,863,1,0,0,0,864,865,1,0,0,0,865,867,1,0,0,0,866,
        868,5,92,0,0,867,866,1,0,0,0,867,868,1,0,0,0,868,89,1,0,0,0,869,
        871,3,92,46,0,870,872,3,100,50,0,871,870,1,0,0,0,871,872,1,0,0,0,
        872,874,1,0,0,0,873,875,5,49,0,0,874,873,1,0,0,0,874,875,1,0,0,0,
        875,877,1,0,0,0,876,878,5,92,0,0,877,876,1,0,0,0,877,878,1,0,0,0,
        878,91,1,0,0,0,879,881,5,89,0,0,880,882,3,96,48,0,881,880,1,0,0,
        0,881,882,1,0,0,0,882,93,1,0,0,0,883,884,5,89,0,0,884,885,3,98,49,
        0,885,95,1,0,0,0,886,887,5,48,0,0,887,888,3,208,104,0,888,97,1,0,
        0,0,889,890,5,48,0,0,890,891,3,214,107,0,891,99,1,0,0,0,892,893,
        5,59,0,0,893,894,3,208,104,0,894,101,1,0,0,0,895,896,5,38,0,0,896,
        897,3,222,111,0,897,898,5,48,0,0,898,903,3,60,30,0,899,904,3,104,
        52,0,900,902,3,106,53,0,901,900,1,0,0,0,901,902,1,0,0,0,902,904,
        1,0,0,0,903,899,1,0,0,0,903,901,1,0,0,0,904,103,1,0,0,0,905,906,
        5,37,0,0,906,907,3,222,111,0,907,908,5,48,0,0,908,913,3,60,30,0,
        909,914,3,104,52,0,910,912,3,106,53,0,911,910,1,0,0,0,911,912,1,
        0,0,0,912,914,1,0,0,0,913,909,1,0,0,0,913,911,1,0,0,0,914,105,1,
        0,0,0,915,916,5,8,0,0,916,917,5,48,0,0,917,918,3,60,30,0,918,107,
        1,0,0,0,919,920,5,30,0,0,920,921,3,222,111,0,921,922,5,48,0,0,922,
        924,3,60,30,0,923,925,3,106,53,0,924,923,1,0,0,0,924,925,1,0,0,0,
        925,109,1,0,0,0,926,928,5,36,0,0,927,926,1,0,0,0,927,928,1,0,0,0,
        928,929,1,0,0,0,929,930,5,23,0,0,930,931,3,358,179,0,931,932,5,14,
        0,0,932,933,3,212,106,0,933,935,5,48,0,0,934,936,5,92,0,0,935,934,
        1,0,0,0,935,936,1,0,0,0,936,937,1,0,0,0,937,939,3,60,30,0,938,940,
        3,106,53,0,939,938,1,0,0,0,939,940,1,0,0,0,940,111,1,0,0,0,941,943,
        5,36,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,972,
        5,35,0,0,945,946,5,41,0,0,946,951,3,114,57,0,947,948,5,49,0,0,948,
        950,3,114,57,0,949,947,1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,951,
        952,1,0,0,0,952,955,1,0,0,0,953,951,1,0,0,0,954,956,5,49,0,0,955,
        954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,0,0,957,958,5,44,0,0,958,
        959,5,48,0,0,959,973,1,0,0,0,960,965,3,114,57,0,961,962,5,49,0,0,
        962,964,3,114,57,0,963,961,1,0,0,0,964,967,1,0,0,0,965,963,1,0,0,
        0,965,966,1,0,0,0,966,968,1,0,0,0,967,965,1,0,0,0,968,970,5,48,0,
        0,969,971,5,92,0,0,970,969,1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,
        0,972,945,1,0,0,0,972,960,1,0,0,0,973,974,1,0,0,0,974,975,3,60,30,
        0,975,113,1,0,0,0,976,979,3,208,104,0,977,978,5,26,0,0,978,980,3,
        364,182,0,979,977,1,0,0,0,979,980,1,0,0,0,980,115,1,0,0,0,981,982,
        5,25,0,0,982,983,5,48,0,0,983,984,3,60,30,0,984,985,3,122,61,0,985,
        1015,1,0,0,0,986,987,5,25,0,0,987,988,5,48,0,0,988,990,3,60,30,0,
        989,991,3,118,59,0,990,989,1,0,0,0,991,992,1,0,0,0,992,990,1,0,0,
        0,992,993,1,0,0,0,993,995,1,0,0,0,994,996,3,106,53,0,995,994,1,0,
        0,0,995,996,1,0,0,0,996,998,1,0,0,0,997,999,3,122,61,0,998,997,1,
        0,0,0,998,999,1,0,0,0,999,1015,1,0,0,0,1000,1001,5,25,0,0,1001,1002,
        5,48,0,0,1002,1004,3,60,30,0,1003,1005,3,120,60,0,1004,1003,1,0,
        0,0,1005,1006,1,0,0,0,1006,1004,1,0,0,0,1006,1007,1,0,0,0,1007,1009,
        1,0,0,0,1008,1010,3,106,53,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,
        1010,1012,1,0,0,0,1011,1013,3,122,61,0,1012,1011,1,0,0,0,1012,1013,
        1,0,0,0,1013,1015,1,0,0,0,1014,981,1,0,0,0,1014,986,1,0,0,0,1014,
        1000,1,0,0,0,1015,117,1,0,0,0,1016,1022,5,13,0,0,1017,1020,3,208,
        104,0,1018,1019,5,26,0,0,1019,1021,5,89,0,0,1020,1018,1,0,0,0,1020,
        1021,1,0,0,0,1021,1023,1,0,0,0,1022,1017,1,0,0,0,1022,1023,1,0,0,
        0,1023,1024,1,0,0,0,1024,1025,5,48,0,0,1025,1026,3,60,30,0,1026,
        119,1,0,0,0,1027,1028,5,13,0,0,1028,1029,5,53,0,0,1029,1032,3,208,
        104,0,1030,1031,5,26,0,0,1031,1033,5,89,0,0,1032,1030,1,0,0,0,1032,
        1033,1,0,0,0,1033,1034,1,0,0,0,1034,1035,5,48,0,0,1035,1036,3,60,
        30,0,1036,121,1,0,0,0,1037,1038,5,18,0,0,1038,1039,5,48,0,0,1039,
        1040,3,60,30,0,1040,123,1,0,0,0,1041,1042,3,386,193,0,1042,1043,
        3,126,63,0,1043,1044,5,48,0,0,1044,1045,5,93,0,0,1045,1047,5,1,0,
        0,1046,1048,3,128,64,0,1047,1046,1,0,0,0,1048,1049,1,0,0,0,1049,
        1047,1,0,0,0,1049,1050,1,0,0,0,1050,1051,1,0,0,0,1051,1052,5,2,0,
        0,1052,125,1,0,0,0,1053,1054,3,218,109,0,1054,1056,5,49,0,0,1055,
        1057,3,216,108,0,1056,1055,1,0,0,0,1056,1057,1,0,0,0,1057,1060,1,
        0,0,0,1058,1060,3,222,111,0,1059,1053,1,0,0,0,1059,1058,1,0,0,0,
        1060,127,1,0,0,0,1061,1062,3,388,194,0,1062,1064,3,132,66,0,1063,
        1065,3,130,65,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,
        0,0,0,1066,1067,5,48,0,0,1067,1068,3,60,30,0,1068,129,1,0,0,0,1069,
        1070,5,38,0,0,1070,1071,3,222,111,0,1071,131,1,0,0,0,1072,1075,3,
        172,86,0,1073,1075,3,134,67,0,1074,1072,1,0,0,0,1074,1073,1,0,0,
        0,1075,133,1,0,0,0,1076,1079,3,136,68,0,1077,1079,3,138,69,0,1078,
        1076,1,0,0,0,1078,1077,1,0,0,0,1079,135,1,0,0,0,1080,1081,3,138,
        69,0,1081,1082,5,26,0,0,1082,1083,3,158,79,0,1083,137,1,0,0,0,1084,
        1089,3,140,70,0,1085,1086,5,55,0,0,1086,1088,3,140,70,0,1087,1085,
        1,0,0,0,1088,1091,1,0,0,0,1089,1087,1,0,0,0,1089,1090,1,0,0,0,1090,
        139,1,0,0,0,1091,1089,1,0,0,0,1092,1101,3,142,71,0,1093,1101,3,156,
        78,0,1094,1101,3,160,80,0,1095,1101,3,162,81,0,1096,1101,3,168,84,
        0,1097,1101,3,170,85,0,1098,1101,3,180,90,0,1099,1101,3,188,94,0,
        1100,1092,1,0,0,0,1100,1093,1,0,0,0,1100,1094,1,0,0,0,1100,1095,
        1,0,0,0,1100,1096,1,0,0,0,1100,1097,1,0,0,0,1100,1098,1,0,0,0,1100,
        1099,1,0,0,0,1101,141,1,0,0,0,1102,1109,3,148,74,0,1103,1109,3,146,
        73,0,1104,1109,3,318,159,0,1105,1109,5,11,0,0,1106,1109,5,16,0,0,
        1107,1109,5,6,0,0,1108,1102,1,0,0,0,1108,1103,1,0,0,0,1108,1104,
        1,0,0,0,1108,1105,1,0,0,0,1108,1106,1,0,0,0,1108,1107,1,0,0,0,1109,
        143,1,0,0,0,1110,1117,3,148,74,0,1111,1117,3,146,73,0,1112,1117,
        3,318,159,0,1113,1117,5,11,0,0,1114,1117,5,16,0,0,1115,1117,5,6,
        0,0,1116,1110,1,0,0,0,1116,1111,1,0,0,0,1116,1112,1,0,0,0,1116,1113,
        1,0,0,0,1116,1114,1,0,0,0,1116,1115,1,0,0,0,1117,145,1,0,0,0,1118,
        1119,3,150,75,0,1119,1120,7,2,0,0,1120,1121,3,154,77,0,1121,147,
        1,0,0,0,1122,1124,5,52,0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,
        1125,1,0,0,0,1125,1126,5,90,0,0,1126,149,1,0,0,0,1127,1129,5,52,
        0,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1130,1,0,0,0,1130,1131,
        3,152,76,0,1131,151,1,0,0,0,1132,1133,5,90,0,0,1133,153,1,0,0,0,
        1134,1135,5,90,0,0,1135,155,1,0,0,0,1136,1137,3,158,79,0,1137,157,
        1,0,0,0,1138,1139,4,79,1,0,1139,1140,5,89,0,0,1140,159,1,0,0,0,1141,
        1142,3,390,195,0,1142,161,1,0,0,0,1143,1144,3,164,82,0,1144,163,
        1,0,0,0,1145,1148,5,89,0,0,1146,1147,5,47,0,0,1147,1149,5,89,0,0,
        1148,1146,1,0,0,0,1149,1150,1,0,0,0,1150,1148,1,0,0,0,1150,1151,
        1,0,0,0,1151,165,1,0,0,0,1152,1157,5,89,0,0,1153,1154,5,47,0,0,1154,
        1156,5,89,0,0,1155,1153,1,0,0,0,1156,1159,1,0,0,0,1157,1155,1,0,
        0,0,1157,1158,1,0,0,0,1158,167,1,0,0,0,1159,1157,1,0,0,0,1160,1161,
        5,41,0,0,1161,1162,3,134,67,0,1162,1163,5,44,0,0,1163,169,1,0,0,
        0,1164,1166,5,42,0,0,1165,1167,3,174,87,0,1166,1165,1,0,0,0,1166,
        1167,1,0,0,0,1167,1168,1,0,0,0,1168,1175,5,45,0,0,1169,1171,5,41,
        0,0,1170,1172,3,172,86,0,1171,1170,1,0,0,0,1171,1172,1,0,0,0,1172,
        1173,1,0,0,0,1173,1175,5,44,0,0,1174,1164,1,0,0,0,1174,1169,1,0,
        0,0,1175,171,1,0,0,0,1176,1177,3,176,88,0,1177,1179,5,49,0,0,1178,
        1180,3,174,87,0,1179,1178,1,0,0,0,1179,1180,1,0,0,0,1180,173,1,0,
        0,0,1181,1186,3,176,88,0,1182,1183,5,49,0,0,1183,1185,3,176,88,0,
        1184,1182,1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,
        1,0,0,0,1187,1190,1,0,0,0,1188,1186,1,0,0,0,1189,1191,5,49,0,0,1190,
        1189,1,0,0,0,1190,1191,1,0,0,0,1191,175,1,0,0,0,1192,1195,3,178,
        89,0,1193,1195,3,134,67,0,1194,1192,1,0,0,0,1194,1193,1,0,0,0,1195,
        177,1,0,0,0,1196,1197,5,53,0,0,1197,1201,3,158,79,0,1198,1199,5,
        53,0,0,1199,1201,3,160,80,0,1200,1196,1,0,0,0,1200,1198,1,0,0,0,
        1201,179,1,0,0,0,1202,1203,5,43,0,0,1203,1223,5,46,0,0,1204,1205,
        5,43,0,0,1205,1207,3,186,93,0,1206,1208,5,49,0,0,1207,1206,1,0,0,
        0,1207,1208,1,0,0,0,1208,1209,1,0,0,0,1209,1210,5,46,0,0,1210,1223,
        1,0,0,0,1211,1212,5,43,0,0,1212,1215,3,182,91,0,1213,1214,5,49,0,
        0,1214,1216,3,186,93,0,1215,1213,1,0,0,0,1215,1216,1,0,0,0,1216,
        1218,1,0,0,0,1217,1219,5,49,0,0,1218,1217,1,0,0,0,1218,1219,1,0,
        0,0,1219,1220,1,0,0,0,1220,1221,5,46,0,0,1221,1223,1,0,0,0,1222,
        1202,1,0,0,0,1222,1204,1,0,0,0,1222,1211,1,0,0,0,1223,181,1,0,0,
        0,1224,1229,3,184,92,0,1225,1226,5,49,0,0,1226,1228,3,184,92,0,1227,
        1225,1,0,0,0,1228,1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,
        0,1230,183,1,0,0,0,1231,1229,1,0,0,0,1232,1235,3,144,72,0,1233,1235,
        3,164,82,0,1234,1232,1,0,0,0,1234,1233,1,0,0,0,1235,1236,1,0,0,0,
        1236,1237,5,48,0,0,1237,1238,3,134,67,0,1238,185,1,0,0,0,1239,1240,
        5,69,0,0,1240,1241,3,158,79,0,1241,187,1,0,0,0,1242,1243,3,166,83,
        0,1243,1255,5,41,0,0,1244,1247,3,190,95,0,1245,1246,5,49,0,0,1246,
        1248,3,192,96,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,1251,1,
        0,0,0,1249,1251,3,192,96,0,1250,1244,1,0,0,0,1250,1249,1,0,0,0,1251,
        1253,1,0,0,0,1252,1254,5,49,0,0,1253,1252,1,0,0,0,1253,1254,1,0,
        0,0,1254,1256,1,0,0,0,1255,1250,1,0,0,0,1255,1256,1,0,0,0,1256,1257,
        1,0,0,0,1257,1258,5,44,0,0,1258,189,1,0,0,0,1259,1264,3,134,67,0,
        1260,1261,5,49,0,0,1261,1263,3,134,67,0,1262,1260,1,0,0,0,1263,1266,
        1,0,0,0,1264,1262,1,0,0,0,1264,1265,1,0,0,0,1265,191,1,0,0,0,1266,
        1264,1,0,0,0,1267,1272,3,194,97,0,1268,1269,5,49,0,0,1269,1271,3,
        194,97,0,1270,1268,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,
        1273,1,0,0,0,1273,193,1,0,0,0,1274,1272,1,0,0,0,1275,1276,5,89,0,
        0,1276,1277,5,59,0,0,1277,1278,3,134,67,0,1278,195,1,0,0,0,1279,
        1280,3,392,196,0,1280,1282,5,89,0,0,1281,1283,3,198,99,0,1282,1281,
        1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1285,5,59,0,0,1285,
        1286,3,208,104,0,1286,197,1,0,0,0,1287,1288,5,42,0,0,1288,1289,3,
        200,100,0,1289,1290,5,45,0,0,1290,199,1,0,0,0,1291,1296,3,202,101,
        0,1292,1293,5,49,0,0,1293,1295,3,202,101,0,1294,1292,1,0,0,0,1295,
        1298,1,0,0,0,1296,1294,1,0,0,0,1296,1297,1,0,0,0,1297,1300,1,0,0,
        0,1298,1296,1,0,0,0,1299,1301,5,49,0,0,1300,1299,1,0,0,0,1300,1301,
        1,0,0,0,1301,201,1,0,0,0,1302,1304,5,89,0,0,1303,1305,3,204,102,
        0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1319,1,0,0,0,1306,1307,
        5,53,0,0,1307,1310,5,89,0,0,1308,1309,5,48,0,0,1309,1311,3,208,104,
        0,1310,1308,1,0,0,0,1310,1311,1,0,0,0,1311,1319,1,0,0,0,1312,1313,
        5,69,0,0,1313,1316,5,89,0,0,1314,1315,5,48,0,0,1315,1317,3,208,104,
        0,1316,1314,1,0,0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,0,1318,1302,
        1,0,0,0,1318,1306,1,0,0,0,1318,1312,1,0,0,0,1319,203,1,0,0,0,1320,
        1321,5,48,0,0,1321,1322,3,208,104,0,1322,205,1,0,0,0,1323,1328,3,
        208,104,0,1324,1325,5,49,0,0,1325,1327,3,208,104,0,1326,1324,1,0,
        0,0,1327,1330,1,0,0,0,1328,1326,1,0,0,0,1328,1329,1,0,0,0,1329,1332,
        1,0,0,0,1330,1328,1,0,0,0,1331,1333,5,49,0,0,1332,1331,1,0,0,0,1332,
        1333,1,0,0,0,1333,207,1,0,0,0,1334,1340,3,224,112,0,1335,1336,5,
        38,0,0,1336,1337,3,224,112,0,1337,1338,5,8,0,0,1338,1339,3,208,104,
        0,1339,1341,1,0,0,0,1340,1335,1,0,0,0,1340,1341,1,0,0,0,1341,1344,
        1,0,0,0,1342,1344,3,282,141,0,1343,1334,1,0,0,0,1343,1342,1,0,0,
        0,1344,209,1,0,0,0,1345,1351,5,40,0,0,1346,1347,5,28,0,0,1347,1352,
        3,208,104,0,1348,1350,3,212,106,0,1349,1348,1,0,0,0,1349,1350,1,
        0,0,0,1350,1352,1,0,0,0,1351,1346,1,0,0,0,1351,1349,1,0,0,0,1352,
        211,1,0,0,0,1353,1358,3,214,107,0,1354,1355,5,49,0,0,1355,1357,3,
        214,107,0,1356,1354,1,0,0,0,1357,1360,1,0,0,0,1358,1356,1,0,0,0,
        1358,1359,1,0,0,0,1359,1362,1,0,0,0,1360,1358,1,0,0,0,1361,1363,
        5,49,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,213,1,0,0,0,1364,
        1365,5,53,0,0,1365,1368,3,254,127,0,1366,1368,3,208,104,0,1367,1364,
        1,0,0,0,1367,1366,1,0,0,0,1368,215,1,0,0,0,1369,1374,3,218,109,0,
        1370,1371,5,49,0,0,1371,1373,3,218,109,0,1372,1370,1,0,0,0,1373,
        1376,1,0,0,0,1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,1378,1,0,0,
        0,1376,1374,1,0,0,0,1377,1379,5,49,0,0,1378,1377,1,0,0,0,1378,1379,
        1,0,0,0,1379,217,1,0,0,0,1380,1381,5,53,0,0,1381,1384,3,254,127,
        0,1382,1384,3,222,111,0,1383,1380,1,0,0,0,1383,1382,1,0,0,0,1384,
        219,1,0,0,0,1385,1386,5,89,0,0,1386,1387,5,87,0,0,1387,1388,3,208,
        104,0,1388,221,1,0,0,0,1389,1392,3,220,110,0,1390,1392,3,208,104,
        0,1391,1389,1,0,0,0,1391,1390,1,0,0,0,1392,223,1,0,0,0,1393,1398,
        3,226,113,0,1394,1395,5,39,0,0,1395,1397,3,226,113,0,1396,1394,1,
        0,0,0,1397,1400,1,0,0,0,1398,1396,1,0,0,0,1398,1399,1,0,0,0,1399,
        225,1,0,0,0,1400,1398,1,0,0,0,1401,1406,3,228,114,0,1402,1403,5,
        21,0,0,1403,1405,3,228,114,0,1404,1402,1,0,0,0,1405,1408,1,0,0,0,
        1406,1404,1,0,0,0,1406,1407,1,0,0,0,1407,227,1,0,0,0,1408,1406,1,
        0,0,0,1409,1410,5,34,0,0,1410,1413,3,228,114,0,1411,1413,3,230,115,
        0,1412,1409,1,0,0,0,1412,1411,1,0,0,0,1413,229,1,0,0,0,1414,1418,
        3,254,127,0,1415,1417,3,232,116,0,1416,1415,1,0,0,0,1417,1420,1,
        0,0,0,1418,1416,1,0,0,0,1418,1419,1,0,0,0,1419,231,1,0,0,0,1420,
        1418,1,0,0,0,1421,1432,3,234,117,0,1422,1432,3,236,118,0,1423,1432,
        3,238,119,0,1424,1432,3,240,120,0,1425,1432,3,242,121,0,1426,1432,
        3,244,122,0,1427,1432,3,246,123,0,1428,1432,3,248,124,0,1429,1432,
        3,250,125,0,1430,1432,3,252,126,0,1431,1421,1,0,0,0,1431,1422,1,
        0,0,0,1431,1423,1,0,0,0,1431,1424,1,0,0,0,1431,1425,1,0,0,0,1431,
        1426,1,0,0,0,1431,1427,1,0,0,0,1431,1428,1,0,0,0,1431,1429,1,0,0,
        0,1431,1430,1,0,0,0,1432,233,1,0,0,0,1433,1434,5,61,0,0,1434,1435,
        3,254,127,0,1435,235,1,0,0,0,1436,1437,5,62,0,0,1437,1438,3,254,
        127,0,1438,237,1,0,0,0,1439,1440,5,63,0,0,1440,1441,3,254,127,0,
        1441,239,1,0,0,0,1442,1443,5,57,0,0,1443,1444,3,254,127,0,1444,241,
        1,0,0,0,1445,1446,5,64,0,0,1446,1447,3,254,127,0,1447,243,1,0,0,
        0,1448,1449,5,58,0,0,1449,1450,3,254,127,0,1450,245,1,0,0,0,1451,
        1452,5,34,0,0,1452,1453,5,14,0,0,1453,1454,3,254,127,0,1454,247,
        1,0,0,0,1455,1456,5,14,0,0,1456,1457,3,254,127,0,1457,249,1,0,0,
        0,1458,1459,5,19,0,0,1459,1460,5,34,0,0,1460,1461,3,254,127,0,1461,
        251,1,0,0,0,1462,1463,5,19,0,0,1463,1464,3,254,127,0,1464,253,1,
        0,0,0,1465,1466,6,127,-1,0,1466,1467,3,256,128,0,1467,1473,1,0,0,
        0,1468,1469,10,2,0,0,1469,1470,5,55,0,0,1470,1472,3,256,128,0,1471,
        1468,1,0,0,0,1472,1475,1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,
        0,1474,255,1,0,0,0,1475,1473,1,0,0,0,1476,1477,6,128,-1,0,1477,1478,
        3,258,129,0,1478,1484,1,0,0,0,1479,1480,10,2,0,0,1480,1481,5,66,
        0,0,1481,1483,3,258,129,0,1482,1479,1,0,0,0,1483,1486,1,0,0,0,1484,
        1482,1,0,0,0,1484,1485,1,0,0,0,1485,257,1,0,0,0,1486,1484,1,0,0,
        0,1487,1488,6,129,-1,0,1488,1489,3,260,130,0,1489,1495,1,0,0,0,1490,
        1491,10,2,0,0,1491,1492,5,56,0,0,1492,1494,3,260,130,0,1493,1490,
        1,0,0,0,1494,1497,1,0,0,0,1495,1493,1,0,0,0,1495,1496,1,0,0,0,1496,
        259,1,0,0,0,1497,1495,1,0,0,0,1498,1499,6,130,-1,0,1499,1500,3,262,
        131,0,1500,1506,1,0,0,0,1501,1502,10,2,0,0,1502,1503,7,3,0,0,1503,
        1505,3,262,131,0,1504,1501,1,0,0,0,1505,1508,1,0,0,0,1506,1504,1,
        0,0,0,1506,1507,1,0,0,0,1507,261,1,0,0,0,1508,1506,1,0,0,0,1509,
        1510,6,131,-1,0,1510,1511,3,264,132,0,1511,1517,1,0,0,0,1512,1513,
        10,2,0,0,1513,1514,7,2,0,0,1514,1516,3,264,132,0,1515,1512,1,0,0,
        0,1516,1519,1,0,0,0,1517,1515,1,0,0,0,1517,1518,1,0,0,0,1518,263,
        1,0,0,0,1519,1517,1,0,0,0,1520,1521,6,132,-1,0,1521,1522,3,266,133,
        0,1522,1528,1,0,0,0,1523,1524,10,2,0,0,1524,1525,7,4,0,0,1525,1527,
        3,266,133,0,1526,1523,1,0,0,0,1527,1530,1,0,0,0,1528,1526,1,0,0,
        0,1528,1529,1,0,0,0,1529,265,1,0,0,0,1530,1528,1,0,0,0,1531,1532,
        5,51,0,0,1532,1539,3,266,133,0,1533,1534,5,52,0,0,1534,1539,3,266,
        133,0,1535,1536,5,65,0,0,1536,1539,3,266,133,0,1537,1539,3,268,134,
        0,1538,1531,1,0,0,0,1538,1533,1,0,0,0,1538,1535,1,0,0,0,1538,1537,
        1,0,0,0,1539,267,1,0,0,0,1540,1543,3,270,135,0,1541,1542,5,69,0,
        0,1542,1544,3,266,133,0,1543,1541,1,0,0,0,1543,1544,1,0,0,0,1544,
        269,1,0,0,0,1545,1546,5,7,0,0,1546,1549,3,272,136,0,1547,1549,3,
        272,136,0,1548,1545,1,0,0,0,1548,1547,1,0,0,0,1549,271,1,0,0,0,1550,
        1551,6,136,-1,0,1551,1552,3,278,139,0,1552,1570,1,0,0,0,1553,1566,
        10,2,0,0,1554,1555,5,47,0,0,1555,1567,5,89,0,0,1556,1567,3,342,171,
        0,1557,1559,5,41,0,0,1558,1560,3,346,173,0,1559,1558,1,0,0,0,1559,
        1560,1,0,0,0,1560,1561,1,0,0,0,1561,1567,5,44,0,0,1562,1563,5,42,
        0,0,1563,1564,3,274,137,0,1564,1565,5,45,0,0,1565,1567,1,0,0,0,1566,
        1554,1,0,0,0,1566,1556,1,0,0,0,1566,1557,1,0,0,0,1566,1562,1,0,0,
        0,1567,1569,1,0,0,0,1568,1553,1,0,0,0,1569,1572,1,0,0,0,1570,1568,
        1,0,0,0,1570,1571,1,0,0,0,1571,273,1,0,0,0,1572,1570,1,0,0,0,1573,
        1592,3,276,138,0,1574,1577,3,276,138,0,1575,1577,3,352,176,0,1576,
        1574,1,0,0,0,1576,1575,1,0,0,0,1577,1585,1,0,0,0,1578,1581,5,49,
        0,0,1579,1582,3,276,138,0,1580,1582,3,352,176,0,1581,1579,1,0,0,
        0,1581,1580,1,0,0,0,1582,1584,1,0,0,0,1583,1578,1,0,0,0,1584,1587,
        1,0,0,0,1585,1583,1,0,0,0,1585,1586,1,0,0,0,1586,1589,1,0,0,0,1587,
        1585,1,0,0,0,1588,1590,5,49,0,0,1589,1588,1,0,0,0,1589,1590,1,0,
        0,0,1590,1592,1,0,0,0,1591,1573,1,0,0,0,1591,1576,1,0,0,0,1592,275,
        1,0,0,0,1593,1595,3,208,104,0,1594,1593,1,0,0,0,1594,1595,1,0,0,
        0,1595,1596,1,0,0,0,1596,1598,5,48,0,0,1597,1599,3,208,104,0,1598,
        1597,1,0,0,0,1598,1599,1,0,0,0,1599,1604,1,0,0,0,1600,1602,5,48,
        0,0,1601,1603,3,208,104,0,1602,1601,1,0,0,0,1602,1603,1,0,0,0,1603,
        1605,1,0,0,0,1604,1600,1,0,0,0,1604,1605,1,0,0,0,1605,1608,1,0,0,
        0,1606,1608,3,222,111,0,1607,1594,1,0,0,0,1607,1606,1,0,0,0,1608,
        277,1,0,0,0,1609,1632,5,89,0,0,1610,1632,5,16,0,0,1611,1632,5,6,
        0,0,1612,1632,5,11,0,0,1613,1632,3,318,159,0,1614,1632,5,90,0,0,
        1615,1619,3,322,161,0,1616,1619,3,280,140,0,1617,1619,3,342,171,
        0,1618,1615,1,0,0,0,1618,1616,1,0,0,0,1618,1617,1,0,0,0,1619,1632,
        1,0,0,0,1620,1623,3,320,160,0,1621,1623,3,338,169,0,1622,1620,1,
        0,0,0,1622,1621,1,0,0,0,1623,1632,1,0,0,0,1624,1629,3,326,163,0,
        1625,1629,3,324,162,0,1626,1629,3,344,172,0,1627,1629,3,340,170,
        0,1628,1624,1,0,0,0,1628,1625,1,0,0,0,1628,1626,1,0,0,0,1628,1627,
        1,0,0,0,1629,1632,1,0,0,0,1630,1632,5,86,0,0,1631,1609,1,0,0,0,1631,
        1610,1,0,0,0,1631,1611,1,0,0,0,1631,1612,1,0,0,0,1631,1613,1,0,0,
        0,1631,1614,1,0,0,0,1631,1618,1,0,0,0,1631,1622,1,0,0,0,1631,1628,
        1,0,0,0,1631,1630,1,0,0,0,1632,279,1,0,0,0,1633,1636,5,41,0,0,1634,
        1637,3,210,105,0,1635,1637,3,222,111,0,1636,1634,1,0,0,0,1636,1635,
        1,0,0,0,1637,1638,1,0,0,0,1638,1639,5,44,0,0,1639,281,1,0,0,0,1640,
        1642,5,24,0,0,1641,1643,3,284,142,0,1642,1641,1,0,0,0,1642,1643,
        1,0,0,0,1643,1644,1,0,0,0,1644,1645,5,48,0,0,1645,1646,3,208,104,
        0,1646,283,1,0,0,0,1647,1648,3,286,143,0,1648,285,1,0,0,0,1649,1653,
        3,288,144,0,1650,1652,3,296,148,0,1651,1650,1,0,0,0,1652,1655,1,
        0,0,0,1653,1651,1,0,0,0,1653,1654,1,0,0,0,1654,1659,1,0,0,0,1655,
        1653,1,0,0,0,1656,1658,3,298,149,0,1657,1656,1,0,0,0,1658,1661,1,
        0,0,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,1663,1,0,0,0,1661,
        1659,1,0,0,0,1662,1664,3,292,146,0,1663,1662,1,0,0,0,1663,1664,1,
        0,0,0,1664,1699,1,0,0,0,1665,1669,3,290,145,0,1666,1668,3,298,149,
        0,1667,1666,1,0,0,0,1668,1671,1,0,0,0,1669,1667,1,0,0,0,1669,1670,
        1,0,0,0,1670,1673,1,0,0,0,1671,1669,1,0,0,0,1672,1674,3,292,146,
        0,1673,1672,1,0,0,0,1673,1674,1,0,0,0,1674,1699,1,0,0,0,1675,1677,
        3,296,148,0,1676,1675,1,0,0,0,1677,1678,1,0,0,0,1678,1676,1,0,0,
        0,1678,1679,1,0,0,0,1679,1683,1,0,0,0,1680,1682,3,298,149,0,1681,
        1680,1,0,0,0,1682,1685,1,0,0,0,1683,1681,1,0,0,0,1683,1684,1,0,0,
        0,1684,1687,1,0,0,0,1685,1683,1,0,0,0,1686,1688,3,292,146,0,1687,
        1686,1,0,0,0,1687,1688,1,0,0,0,1688,1699,1,0,0,0,1689,1691,3,298,
        149,0,1690,1689,1,0,0,0,1691,1692,1,0,0,0,1692,1690,1,0,0,0,1692,
        1693,1,0,0,0,1693,1695,1,0,0,0,1694,1696,3,292,146,0,1695,1694,1,
        0,0,0,1695,1696,1,0,0,0,1696,1699,1,0,0,0,1697,1699,3,292,146,0,
        1698,1649,1,0,0,0,1698,1665,1,0,0,0,1698,1676,1,0,0,0,1698,1690,
        1,0,0,0,1698,1697,1,0,0,0,1699,287,1,0,0,0,1700,1702,3,296,148,0,
        1701,1700,1,0,0,0,1702,1703,1,0,0,0,1703,1701,1,0,0,0,1703,1704,
        1,0,0,0,1704,1705,1,0,0,0,1705,1707,5,54,0,0,1706,1708,5,49,0,0,
        1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,289,1,0,0,0,1709,1711,3,
        296,148,0,1710,1709,1,0,0,0,1711,1714,1,0,0,0,1712,1710,1,0,0,0,
        1712,1713,1,0,0,0,1713,1716,1,0,0,0,1714,1712,1,0,0,0,1715,1717,
        3,298,149,0,1716,1715,1,0,0,0,1717,1718,1,0,0,0,1718,1716,1,0,0,
        0,1718,1719,1,0,0,0,1719,1720,1,0,0,0,1720,1722,5,54,0,0,1721,1723,
        5,49,0,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,1723,291,1,0,0,0,1724,
        1725,5,53,0,0,1725,1729,3,296,148,0,1726,1728,3,300,150,0,1727,1726,
        1,0,0,0,1728,1731,1,0,0,0,1729,1727,1,0,0,0,1729,1730,1,0,0,0,1730,
        1733,1,0,0,0,1731,1729,1,0,0,0,1732,1734,3,294,147,0,1733,1732,1,
        0,0,0,1733,1734,1,0,0,0,1734,1747,1,0,0,0,1735,1736,5,53,0,0,1736,
        1738,5,49,0,0,1737,1739,3,300,150,0,1738,1737,1,0,0,0,1739,1740,
        1,0,0,0,1740,1738,1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,0,0,1742,
        1744,3,294,147,0,1743,1742,1,0,0,0,1743,1744,1,0,0,0,1744,1747,1,
        0,0,0,1745,1747,3,294,147,0,1746,1724,1,0,0,0,1746,1735,1,0,0,0,
        1746,1745,1,0,0,0,1747,293,1,0,0,0,1748,1749,5,69,0,0,1749,1750,
        3,296,148,0,1750,295,1,0,0,0,1751,1753,3,302,151,0,1752,1754,5,49,
        0,0,1753,1752,1,0,0,0,1753,1754,1,0,0,0,1754,297,1,0,0,0,1755,1756,
        3,302,151,0,1756,1758,3,100,50,0,1757,1759,5,49,0,0,1758,1757,1,
        0,0,0,1758,1759,1,0,0,0,1759,299,1,0,0,0,1760,1762,3,302,151,0,1761,
        1763,3,100,50,0,1762,1761,1,0,0,0,1762,1763,1,0,0,0,1763,1765,1,
        0,0,0,1764,1766,5,49,0,0,1765,1764,1,0,0,0,1765,1766,1,0,0,0,1766,
        301,1,0,0,0,1767,1768,5,89,0,0,1768,303,1,0,0,0,1769,1772,3,306,
        153,0,1770,1772,5,4,0,0,1771,1769,1,0,0,0,1771,1770,1,0,0,0,1772,
        305,1,0,0,0,1773,1776,5,43,0,0,1774,1777,3,210,105,0,1775,1777,3,
        212,106,0,1776,1774,1,0,0,0,1776,1775,1,0,0,0,1777,1779,1,0,0,0,
        1778,1780,5,59,0,0,1779,1778,1,0,0,0,1779,1780,1,0,0,0,1780,1782,
        1,0,0,0,1781,1783,3,308,154,0,1782,1781,1,0,0,0,1782,1783,1,0,0,
        0,1783,1785,1,0,0,0,1784,1786,3,310,155,0,1785,1784,1,0,0,0,1785,
        1786,1,0,0,0,1786,1787,1,0,0,0,1787,1788,5,46,0,0,1788,307,1,0,0,
        0,1789,1790,5,88,0,0,1790,1791,5,89,0,0,1791,309,1,0,0,0,1792,1796,
        5,48,0,0,1793,1795,3,312,156,0,1794,1793,1,0,0,0,1795,1798,1,0,0,
        0,1796,1794,1,0,0,0,1796,1797,1,0,0,0,1797,311,1,0,0,0,1798,1796,
        1,0,0,0,1799,1802,5,4,0,0,1800,1802,3,306,153,0,1801,1799,1,0,0,
        0,1801,1800,1,0,0,0,1802,313,1,0,0,0,1803,1807,5,3,0,0,1804,1806,
        3,304,152,0,1805,1804,1,0,0,0,1806,1809,1,0,0,0,1807,1805,1,0,0,
        0,1807,1808,1,0,0,0,1808,1810,1,0,0,0,1809,1807,1,0,0,0,1810,1811,
        5,5,0,0,1811,315,1,0,0,0,1812,1813,5,91,0,0,1813,317,1,0,0,0,1814,
        1817,3,314,157,0,1815,1817,3,316,158,0,1816,1814,1,0,0,0,1816,1815,
        1,0,0,0,1817,1818,1,0,0,0,1818,1816,1,0,0,0,1818,1819,1,0,0,0,1819,
        319,1,0,0,0,1820,1822,5,42,0,0,1821,1823,3,216,108,0,1822,1821,1,
        0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,0,0,1824,1825,5,45,0,0,1825,
        321,1,0,0,0,1826,1832,5,41,0,0,1827,1828,3,218,109,0,1828,1830,5,
        49,0,0,1829,1831,3,216,108,0,1830,1829,1,0,0,0,1830,1831,1,0,0,0,
        1831,1833,1,0,0,0,1832,1827,1,0,0,0,1832,1833,1,0,0,0,1833,1834,
        1,0,0,0,1834,1835,5,44,0,0,1835,323,1,0,0,0,1836,1837,5,43,0,0,1837,
        1838,3,216,108,0,1838,1839,5,46,0,0,1839,325,1,0,0,0,1840,1842,5,
        43,0,0,1841,1843,3,328,164,0,1842,1841,1,0,0,0,1842,1843,1,0,0,0,
        1843,1844,1,0,0,0,1844,1845,5,46,0,0,1845,327,1,0,0,0,1846,1851,
        3,330,165,0,1847,1848,5,49,0,0,1848,1850,3,330,165,0,1849,1847,1,
        0,0,0,1850,1853,1,0,0,0,1851,1849,1,0,0,0,1851,1852,1,0,0,0,1852,
        1855,1,0,0,0,1853,1851,1,0,0,0,1854,1856,5,49,0,0,1855,1854,1,0,
        0,0,1855,1856,1,0,0,0,1856,329,1,0,0,0,1857,1858,5,69,0,0,1858,1861,
        3,254,127,0,1859,1861,3,332,166,0,1860,1857,1,0,0,0,1860,1859,1,
        0,0,0,1861,331,1,0,0,0,1862,1863,3,208,104,0,1863,1864,5,48,0,0,
        1864,1865,3,208,104,0,1865,333,1,0,0,0,1866,1868,3,336,168,0,1867,
        1866,1,0,0,0,1868,1869,1,0,0,0,1869,1867,1,0,0,0,1869,1870,1,0,0,
        0,1870,335,1,0,0,0,1871,1873,5,36,0,0,1872,1871,1,0,0,0,1872,1873,
        1,0,0,0,1873,1874,1,0,0,0,1874,1875,5,23,0,0,1875,1876,3,358,179,
        0,1876,1877,5,14,0,0,1877,1882,3,224,112,0,1878,1879,5,38,0,0,1879,
        1881,3,224,112,0,1880,1878,1,0,0,0,1881,1884,1,0,0,0,1882,1880,1,
        0,0,0,1882,1883,1,0,0,0,1883,337,1,0,0,0,1884,1882,1,0,0,0,1885,
        1886,5,42,0,0,1886,1887,3,222,111,0,1887,1888,3,334,167,0,1888,1889,
        5,45,0,0,1889,339,1,0,0,0,1890,1891,5,43,0,0,1891,1892,3,222,111,
        0,1892,1893,3,334,167,0,1893,1894,5,46,0,0,1894,341,1,0,0,0,1895,
        1898,5,41,0,0,1896,1899,3,220,110,0,1897,1899,3,208,104,0,1898,1896,
        1,0,0,0,1898,1897,1,0,0,0,1899,1900,1,0,0,0,1900,1901,3,334,167,
        0,1901,1902,5,44,0,0,1902,343,1,0,0,0,1903,1904,5,43,0,0,1904,1905,
        3,332,166,0,1905,1906,3,334,167,0,1906,1907,5,46,0,0,1907,345,1,
        0,0,0,1908,1910,3,348,174,0,1909,1911,5,49,0,0,1910,1909,1,0,0,0,
        1910,1911,1,0,0,0,1911,347,1,0,0,0,1912,1918,3,352,176,0,1913,1916,
        3,220,110,0,1914,1916,3,208,104,0,1915,1913,1,0,0,0,1915,1914,1,
        0,0,0,1916,1918,1,0,0,0,1917,1912,1,0,0,0,1917,1915,1,0,0,0,1918,
        1929,1,0,0,0,1919,1925,5,49,0,0,1920,1926,3,352,176,0,1921,1924,
        3,220,110,0,1922,1924,3,208,104,0,1923,1921,1,0,0,0,1923,1922,1,
        0,0,0,1924,1926,1,0,0,0,1925,1920,1,0,0,0,1925,1923,1,0,0,0,1926,
        1928,1,0,0,0,1927,1919,1,0,0,0,1928,1931,1,0,0,0,1929,1927,1,0,0,
        0,1929,1930,1,0,0,0,1930,1934,1,0,0,0,1931,1929,1,0,0,0,1932,1933,
        5,49,0,0,1933,1935,3,350,175,0,1934,1932,1,0,0,0,1934,1935,1,0,0,
        0,1935,1938,1,0,0,0,1936,1938,3,350,175,0,1937,1917,1,0,0,0,1937,
        1936,1,0,0,0,1938,349,1,0,0,0,1939,1944,3,354,177,0,1940,1941,5,
        49,0,0,1941,1943,3,354,177,0,1942,1940,1,0,0,0,1943,1946,1,0,0,0,
        1944,1942,1,0,0,0,1944,1945,1,0,0,0,1945,1956,1,0,0,0,1946,1944,
        1,0,0,0,1947,1948,5,49,0,0,1948,1953,3,356,178,0,1949,1950,5,49,
        0,0,1950,1952,3,356,178,0,1951,1949,1,0,0,0,1952,1955,1,0,0,0,1953,
        1951,1,0,0,0,1953,1954,1,0,0,0,1954,1957,1,0,0,0,1955,1953,1,0,0,
        0,1956,1947,1,0,0,0,1956,1957,1,0,0,0,1957,1967,1,0,0,0,1958,1963,
        3,356,178,0,1959,1960,5,49,0,0,1960,1962,3,356,178,0,1961,1959,1,
        0,0,0,1962,1965,1,0,0,0,1963,1961,1,0,0,0,1963,1964,1,0,0,0,1964,
        1967,1,0,0,0,1965,1963,1,0,0,0,1966,1939,1,0,0,0,1966,1958,1,0,0,
        0,1967,351,1,0,0,0,1968,1969,5,53,0,0,1969,1970,3,208,104,0,1970,
        353,1,0,0,0,1971,1972,5,89,0,0,1972,1973,5,59,0,0,1973,1976,3,208,
        104,0,1974,1976,3,352,176,0,1975,1971,1,0,0,0,1975,1974,1,0,0,0,
        1976,355,1,0,0,0,1977,1978,5,89,0,0,1978,1979,5,59,0,0,1979,1983,
        3,208,104,0,1980,1981,5,69,0,0,1981,1983,3,208,104,0,1982,1977,1,
        0,0,0,1982,1980,1,0,0,0,1983,357,1,0,0,0,1984,1989,3,364,182,0,1985,
        1986,5,49,0,0,1986,1988,3,364,182,0,1987,1985,1,0,0,0,1988,1991,
        1,0,0,0,1989,1987,1,0,0,0,1989,1990,1,0,0,0,1990,1993,1,0,0,0,1991,
        1989,1,0,0,0,1992,1994,5,49,0,0,1993,1992,1,0,0,0,1993,1994,1,0,
        0,0,1994,359,1,0,0,0,1995,1998,3,364,182,0,1996,1997,5,49,0,0,1997,
        1999,3,364,182,0,1998,1996,1,0,0,0,1999,2000,1,0,0,0,2000,1998,1,
        0,0,0,2000,2001,1,0,0,0,2001,2003,1,0,0,0,2002,2004,5,49,0,0,2003,
        2002,1,0,0,0,2003,2004,1,0,0,0,2004,361,1,0,0,0,2005,2016,3,364,
        182,0,2006,2017,5,49,0,0,2007,2008,5,49,0,0,2008,2010,3,364,182,
        0,2009,2007,1,0,0,0,2010,2011,1,0,0,0,2011,2009,1,0,0,0,2011,2012,
        1,0,0,0,2012,2014,1,0,0,0,2013,2015,5,49,0,0,2014,2013,1,0,0,0,2014,
        2015,1,0,0,0,2015,2017,1,0,0,0,2016,2006,1,0,0,0,2016,2009,1,0,0,
        0,2017,363,1,0,0,0,2018,2019,5,53,0,0,2019,2022,3,364,182,0,2020,
        2022,3,366,183,0,2021,2018,1,0,0,0,2021,2020,1,0,0,0,2022,365,1,
        0,0,0,2023,2030,3,374,187,0,2024,2025,5,47,0,0,2025,2031,5,89,0,
        0,2026,2027,5,42,0,0,2027,2028,3,274,137,0,2028,2029,5,45,0,0,2029,
        2031,1,0,0,0,2030,2024,1,0,0,0,2030,2026,1,0,0,0,2031,2034,1,0,0,
        0,2032,2034,3,368,184,0,2033,2023,1,0,0,0,2033,2032,1,0,0,0,2034,
        367,1,0,0,0,2035,2051,5,89,0,0,2036,2037,5,41,0,0,2037,2038,3,366,
        183,0,2038,2039,5,44,0,0,2039,2051,1,0,0,0,2040,2042,5,41,0,0,2041,
        2043,3,362,181,0,2042,2041,1,0,0,0,2042,2043,1,0,0,0,2043,2044,1,
        0,0,0,2044,2051,5,44,0,0,2045,2047,5,42,0,0,2046,2048,3,360,180,
        0,2047,2046,1,0,0,0,2047,2048,1,0,0,0,2048,2049,1,0,0,0,2049,2051,
        5,45,0,0,2050,2035,1,0,0,0,2050,2036,1,0,0,0,2050,2040,1,0,0,0,2050,
        2045,1,0,0,0,2051,369,1,0,0,0,2052,2059,3,372,186,0,2053,2059,5,
        89,0,0,2054,2055,5,41,0,0,2055,2056,3,370,185,0,2056,2057,5,44,0,
        0,2057,2059,1,0,0,0,2058,2052,1,0,0,0,2058,2053,1,0,0,0,2058,2054,
        1,0,0,0,2059,371,1,0,0,0,2060,2067,3,374,187,0,2061,2062,5,47,0,
        0,2062,2068,5,89,0,0,2063,2064,5,42,0,0,2064,2065,3,274,137,0,2065,
        2066,5,45,0,0,2066,2068,1,0,0,0,2067,2061,1,0,0,0,2067,2063,1,0,
        0,0,2068,373,1,0,0,0,2069,2070,6,187,-1,0,2070,2071,3,278,139,0,
        2071,2089,1,0,0,0,2072,2085,10,2,0,0,2073,2074,5,47,0,0,2074,2086,
        5,89,0,0,2075,2076,5,42,0,0,2076,2077,3,274,137,0,2077,2078,5,45,
        0,0,2078,2086,1,0,0,0,2079,2086,3,342,171,0,2080,2082,5,41,0,0,2081,
        2083,3,346,173,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2084,1,
        0,0,0,2084,2086,5,44,0,0,2085,2073,1,0,0,0,2085,2075,1,0,0,0,2085,
        2079,1,0,0,0,2085,2080,1,0,0,0,2086,2088,1,0,0,0,2087,2072,1,0,0,
        0,2088,2091,1,0,0,0,2089,2087,1,0,0,0,2089,2090,1,0,0,0,2090,375,
        1,0,0,0,2091,2089,1,0,0,0,2092,2097,3,378,189,0,2093,2094,5,49,0,
        0,2094,2096,3,378,189,0,2095,2093,1,0,0,0,2096,2099,1,0,0,0,2097,
        2095,1,0,0,0,2097,2098,1,0,0,0,2098,2101,1,0,0,0,2099,2097,1,0,0,
        0,2100,2102,5,49,0,0,2101,2100,1,0,0,0,2101,2102,1,0,0,0,2102,377,
        1,0,0,0,2103,2110,3,374,187,0,2104,2105,5,47,0,0,2105,2111,5,89,
        0,0,2106,2107,5,42,0,0,2107,2108,3,274,137,0,2108,2109,5,45,0,0,
        2109,2111,1,0,0,0,2110,2104,1,0,0,0,2110,2106,1,0,0,0,2111,2114,
        1,0,0,0,2112,2114,3,380,190,0,2113,2103,1,0,0,0,2113,2112,1,0,0,
        0,2114,379,1,0,0,0,2115,2131,5,89,0,0,2116,2117,5,41,0,0,2117,2118,
        3,378,189,0,2118,2119,5,44,0,0,2119,2131,1,0,0,0,2120,2122,5,41,
        0,0,2121,2123,3,376,188,0,2122,2121,1,0,0,0,2122,2123,1,0,0,0,2123,
        2124,1,0,0,0,2124,2131,5,44,0,0,2125,2127,5,42,0,0,2126,2128,3,376,
        188,0,2127,2126,1,0,0,0,2127,2128,1,0,0,0,2128,2129,1,0,0,0,2129,
        2131,5,45,0,0,2130,2115,1,0,0,0,2130,2116,1,0,0,0,2130,2120,1,0,
        0,0,2130,2125,1,0,0,0,2131,381,1,0,0,0,2132,2137,3,208,104,0,2133,
        2134,5,49,0,0,2134,2136,3,208,104,0,2135,2133,1,0,0,0,2136,2139,
        1,0,0,0,2137,2135,1,0,0,0,2137,2138,1,0,0,0,2138,2152,1,0,0,0,2139,
        2137,1,0,0,0,2140,2150,5,49,0,0,2141,2142,5,53,0,0,2142,2146,3,208,
        104,0,2143,2144,5,49,0,0,2144,2145,5,69,0,0,2145,2147,3,208,104,
        0,2146,2143,1,0,0,0,2146,2147,1,0,0,0,2147,2151,1,0,0,0,2148,2149,
        5,69,0,0,2149,2151,3,208,104,0,2150,2141,1,0,0,0,2150,2148,1,0,0,
        0,2151,2153,1,0,0,0,2152,2140,1,0,0,0,2152,2153,1,0,0,0,2153,2164,
        1,0,0,0,2154,2155,5,53,0,0,2155,2159,3,208,104,0,2156,2157,5,49,
        0,0,2157,2158,5,69,0,0,2158,2160,3,208,104,0,2159,2156,1,0,0,0,2159,
        2160,1,0,0,0,2160,2164,1,0,0,0,2161,2162,5,69,0,0,2162,2164,3,208,
        104,0,2163,2132,1,0,0,0,2163,2154,1,0,0,0,2163,2161,1,0,0,0,2164,
        383,1,0,0,0,2165,2166,5,93,0,0,2166,2169,5,92,0,0,2167,2169,5,92,
        0,0,2168,2165,1,0,0,0,2168,2167,1,0,0,0,2169,385,1,0,0,0,2170,2171,
        4,193,10,0,2171,2172,5,89,0,0,2172,387,1,0,0,0,2173,2174,4,194,11,
        0,2174,2175,5,89,0,0,2175,389,1,0,0,0,2176,2177,4,195,12,0,2177,
        2178,5,89,0,0,2178,391,1,0,0,0,2179,2180,4,196,13,0,2180,2181,5,
        89,0,0,2181,393,1,0,0,0,291,395,405,412,420,430,434,442,449,453,
        471,481,488,495,501,508,512,515,521,523,527,533,539,541,549,558,
        570,574,583,594,598,603,609,616,622,629,635,645,654,662,668,673,
        677,680,689,694,698,703,707,714,718,723,727,730,738,744,748,754,
        758,763,768,772,777,780,783,788,792,797,803,807,814,818,825,829,
        836,839,842,849,852,856,859,864,867,871,874,877,881,901,903,911,
        913,924,927,935,939,942,951,955,965,970,972,979,992,995,998,1006,
        1009,1012,1014,1020,1022,1032,1049,1056,1059,1064,1074,1078,1089,
        1100,1108,1116,1123,1128,1150,1157,1166,1171,1174,1179,1186,1190,
        1194,1200,1207,1215,1218,1222,1229,1234,1247,1250,1253,1255,1264,
        1272,1282,1296,1300,1304,1310,1316,1318,1328,1332,1340,1343,1349,
        1351,1358,1362,1367,1374,1378,1383,1391,1398,1406,1412,1418,1431,
        1473,1484,1495,1506,1517,1528,1538,1543,1548,1559,1566,1570,1576,
        1581,1585,1589,1591,1594,1598,1602,1604,1607,1618,1622,1628,1631,
        1636,1642,1653,1659,1663,1669,1673,1678,1683,1687,1692,1695,1698,
        1703,1707,1712,1718,1722,1729,1733,1740,1743,1746,1753,1758,1762,
        1765,1771,1776,1779,1782,1785,1796,1801,1807,1816,1818,1822,1830,
        1832,1842,1851,1855,1860,1869,1872,1882,1898,1910,1915,1917,1923,
        1925,1929,1934,1937,1944,1953,1956,1963,1966,1975,1982,1989,1993,
        2000,2003,2011,2014,2016,2021,2030,2033,2042,2047,2050,2058,2067,
        2082,2085,2089,2097,2101,2110,2113,2122,2127,2130,2137,2146,2150,
        2152,2159,2163,2168
    ]

class PythonParser ( PythonParserBase ):

    grammarFileName = "PythonParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'False'", "'await'", "'else'", 
                     "'import'", "'pass'", "'None'", "'break'", "'except'", 
                     "'in'", "'raise'", "'True'", "'class'", "'finally'", 
                     "'is'", "'return'", "'and'", "'continue'", "'for'", 
                     "'lambda'", "'try'", "'as'", "'def'", "'from'", "'nonlocal'", 
                     "'while'", "'assert'", "'del'", "'global'", "'not'", 
                     "'with'", "'async'", "'elif'", "'if'", "'or'", "'yield'", 
                     "'('", "'['", "<INVALID>", "')'", "']'", "<INVALID>", 
                     "'.'", "':'", "','", "';'", "'+'", "'-'", "'*'", "'/'", 
                     "'|'", "'&'", "'<'", "'>'", "'='", "'%'", "'=='", "'!='", 
                     "'<='", "'>='", "'~'", "'^'", "'<<'", "'>>'", "'**'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'**='", "'//'", "'//='", 
                     "'@'", "'@='", "'->'", "'...'", "':='", "'!'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "FSTRING_START", 
                      "FSTRING_MIDDLE", "FSTRING_END", "FALSE", "AWAIT", 
                      "ELSE", "IMPORT", "PASS", "NONE", "BREAK", "EXCEPT", 
                      "IN", "RAISE", "TRUE", "CLASS", "FINALLY", "IS", "RETURN", 
                      "AND", "CONTINUE", "FOR", "LAMBDA", "TRY", "AS", "DEF", 
                      "FROM", "NONLOCAL", "WHILE", "ASSERT", "DEL", "GLOBAL", 
                      "NOT", "WITH", "ASYNC", "ELIF", "IF", "OR", "YIELD", 
                      "LPAR", "LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", 
                      "DOT", "COLON", "COMMA", "SEMI", "PLUS", "MINUS", 
                      "STAR", "SLASH", "VBAR", "AMPER", "LESS", "GREATER", 
                      "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", 
                      "GREATEREQUAL", "TILDE", "CIRCUMFLEX", "LEFTSHIFT", 
                      "RIGHTSHIFT", "DOUBLESTAR", "PLUSEQUAL", "MINEQUAL", 
                      "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", 
                      "VBAREQUAL", "CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", 
                      "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASH", 
                      "DOUBLESLASHEQUAL", "AT", "ATEQUAL", "RARROW", "ELLIPSIS", 
                      "COLONEQUAL", "EXCLAMATION", "NAME", "NUMBER", "STRING", 
                      "TYPE_COMMENT", "NEWLINE", "COMMENT", "WS", "EXPLICIT_LINE_JOINING", 
                      "ERROR_TOKEN" ]

    RULE_file_input = 0
    RULE_interactive = 1
    RULE_eval = 2
    RULE_func_type = 3
    RULE_fstring_input = 4
    RULE_statements = 5
    RULE_statement = 6
    RULE_statement_newline = 7
    RULE_simple_stmts = 8
    RULE_simple_stmt = 9
    RULE_compound_stmt = 10
    RULE_assignment = 11
    RULE_annotated_rhs = 12
    RULE_augassign = 13
    RULE_return_stmt = 14
    RULE_raise_stmt = 15
    RULE_global_stmt = 16
    RULE_nonlocal_stmt = 17
    RULE_del_stmt = 18
    RULE_yield_stmt = 19
    RULE_assert_stmt = 20
    RULE_import_stmt = 21
    RULE_import_name = 22
    RULE_import_from = 23
    RULE_import_from_targets = 24
    RULE_import_from_as_names = 25
    RULE_import_from_as_name = 26
    RULE_dotted_as_names = 27
    RULE_dotted_as_name = 28
    RULE_dotted_name = 29
    RULE_block = 30
    RULE_decorators = 31
    RULE_class_def = 32
    RULE_class_def_raw = 33
    RULE_function_def = 34
    RULE_function_def_raw = 35
    RULE_params = 36
    RULE_parameters = 37
    RULE_slash_no_default = 38
    RULE_slash_with_default = 39
    RULE_star_etc = 40
    RULE_kwds = 41
    RULE_param_no_default = 42
    RULE_param_no_default_star_annotation = 43
    RULE_param_with_default = 44
    RULE_param_maybe_default = 45
    RULE_param = 46
    RULE_param_star_annotation = 47
    RULE_annotation = 48
    RULE_star_annotation = 49
    RULE_default_assignment = 50
    RULE_if_stmt = 51
    RULE_elif_stmt = 52
    RULE_else_block = 53
    RULE_while_stmt = 54
    RULE_for_stmt = 55
    RULE_with_stmt = 56
    RULE_with_item = 57
    RULE_try_stmt = 58
    RULE_except_block = 59
    RULE_except_star_block = 60
    RULE_finally_block = 61
    RULE_match_stmt = 62
    RULE_subject_expr = 63
    RULE_case_block = 64
    RULE_guard = 65
    RULE_patterns = 66
    RULE_pattern = 67
    RULE_as_pattern = 68
    RULE_or_pattern = 69
    RULE_closed_pattern = 70
    RULE_literal_pattern = 71
    RULE_literal_expr = 72
    RULE_complex_number = 73
    RULE_signed_number = 74
    RULE_signed_real_number = 75
    RULE_real_number = 76
    RULE_imaginary_number = 77
    RULE_capture_pattern = 78
    RULE_pattern_capture_target = 79
    RULE_wildcard_pattern = 80
    RULE_value_pattern = 81
    RULE_attr = 82
    RULE_name_or_attr = 83
    RULE_group_pattern = 84
    RULE_sequence_pattern = 85
    RULE_open_sequence_pattern = 86
    RULE_maybe_sequence_pattern = 87
    RULE_maybe_star_pattern = 88
    RULE_star_pattern = 89
    RULE_mapping_pattern = 90
    RULE_items_pattern = 91
    RULE_key_value_pattern = 92
    RULE_double_star_pattern = 93
    RULE_class_pattern = 94
    RULE_positional_patterns = 95
    RULE_keyword_patterns = 96
    RULE_keyword_pattern = 97
    RULE_type_alias = 98
    RULE_type_params = 99
    RULE_type_param_seq = 100
    RULE_type_param = 101
    RULE_type_param_bound = 102
    RULE_expressions = 103
    RULE_expression = 104
    RULE_yield_expr = 105
    RULE_star_expressions = 106
    RULE_star_expression = 107
    RULE_star_named_expressions = 108
    RULE_star_named_expression = 109
    RULE_assignment_expression = 110
    RULE_named_expression = 111
    RULE_disjunction = 112
    RULE_conjunction = 113
    RULE_inversion = 114
    RULE_comparison = 115
    RULE_compare_op_bitwise_or_pair = 116
    RULE_eq_bitwise_or = 117
    RULE_noteq_bitwise_or = 118
    RULE_lte_bitwise_or = 119
    RULE_lt_bitwise_or = 120
    RULE_gte_bitwise_or = 121
    RULE_gt_bitwise_or = 122
    RULE_notin_bitwise_or = 123
    RULE_in_bitwise_or = 124
    RULE_isnot_bitwise_or = 125
    RULE_is_bitwise_or = 126
    RULE_bitwise_or = 127
    RULE_bitwise_xor = 128
    RULE_bitwise_and = 129
    RULE_shift_expr = 130
    RULE_sum = 131
    RULE_term = 132
    RULE_factor = 133
    RULE_power = 134
    RULE_await_primary = 135
    RULE_primary = 136
    RULE_slices = 137
    RULE_slice = 138
    RULE_atom = 139
    RULE_group = 140
    RULE_lambdef = 141
    RULE_lambda_params = 142
    RULE_lambda_parameters = 143
    RULE_lambda_slash_no_default = 144
    RULE_lambda_slash_with_default = 145
    RULE_lambda_star_etc = 146
    RULE_lambda_kwds = 147
    RULE_lambda_param_no_default = 148
    RULE_lambda_param_with_default = 149
    RULE_lambda_param_maybe_default = 150
    RULE_lambda_param = 151
    RULE_fstring_middle = 152
    RULE_fstring_replacement_field = 153
    RULE_fstring_conversion = 154
    RULE_fstring_full_format_spec = 155
    RULE_fstring_format_spec = 156
    RULE_fstring = 157
    RULE_string = 158
    RULE_strings = 159
    RULE_list = 160
    RULE_tuple = 161
    RULE_set = 162
    RULE_dict = 163
    RULE_double_starred_kvpairs = 164
    RULE_double_starred_kvpair = 165
    RULE_kvpair = 166
    RULE_for_if_clauses = 167
    RULE_for_if_clause = 168
    RULE_listcomp = 169
    RULE_setcomp = 170
    RULE_genexp = 171
    RULE_dictcomp = 172
    RULE_arguments = 173
    RULE_args = 174
    RULE_kwargs = 175
    RULE_starred_expression = 176
    RULE_kwarg_or_starred = 177
    RULE_kwarg_or_double_starred = 178
    RULE_star_targets = 179
    RULE_star_targets_list_seq = 180
    RULE_star_targets_tuple_seq = 181
    RULE_star_target = 182
    RULE_target_with_star_atom = 183
    RULE_star_atom = 184
    RULE_single_target = 185
    RULE_single_subscript_attribute_target = 186
    RULE_t_primary = 187
    RULE_del_targets = 188
    RULE_del_target = 189
    RULE_del_t_atom = 190
    RULE_type_expressions = 191
    RULE_func_type_comment = 192
    RULE_soft_kw_match = 193
    RULE_soft_kw_case = 194
    RULE_soft_kw_wildcard = 195
    RULE_soft_kw_type = 196

    ruleNames =  [ "file_input", "interactive", "eval", "func_type", "fstring_input", 
                   "statements", "statement", "statement_newline", "simple_stmts", 
                   "simple_stmt", "compound_stmt", "assignment", "annotated_rhs", 
                   "augassign", "return_stmt", "raise_stmt", "global_stmt", 
                   "nonlocal_stmt", "del_stmt", "yield_stmt", "assert_stmt", 
                   "import_stmt", "import_name", "import_from", "import_from_targets", 
                   "import_from_as_names", "import_from_as_name", "dotted_as_names", 
                   "dotted_as_name", "dotted_name", "block", "decorators", 
                   "class_def", "class_def_raw", "function_def", "function_def_raw", 
                   "params", "parameters", "slash_no_default", "slash_with_default", 
                   "star_etc", "kwds", "param_no_default", "param_no_default_star_annotation", 
                   "param_with_default", "param_maybe_default", "param", 
                   "param_star_annotation", "annotation", "star_annotation", 
                   "default_assignment", "if_stmt", "elif_stmt", "else_block", 
                   "while_stmt", "for_stmt", "with_stmt", "with_item", "try_stmt", 
                   "except_block", "except_star_block", "finally_block", 
                   "match_stmt", "subject_expr", "case_block", "guard", 
                   "patterns", "pattern", "as_pattern", "or_pattern", "closed_pattern", 
                   "literal_pattern", "literal_expr", "complex_number", 
                   "signed_number", "signed_real_number", "real_number", 
                   "imaginary_number", "capture_pattern", "pattern_capture_target", 
                   "wildcard_pattern", "value_pattern", "attr", "name_or_attr", 
                   "group_pattern", "sequence_pattern", "open_sequence_pattern", 
                   "maybe_sequence_pattern", "maybe_star_pattern", "star_pattern", 
                   "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "type_alias", 
                   "type_params", "type_param_seq", "type_param", "type_param_bound", 
                   "expressions", "expression", "yield_expr", "star_expressions", 
                   "star_expression", "star_named_expressions", "star_named_expression", 
                   "assignment_expression", "named_expression", "disjunction", 
                   "conjunction", "inversion", "comparison", "compare_op_bitwise_or_pair", 
                   "eq_bitwise_or", "noteq_bitwise_or", "lte_bitwise_or", 
                   "lt_bitwise_or", "gte_bitwise_or", "gt_bitwise_or", "notin_bitwise_or", 
                   "in_bitwise_or", "isnot_bitwise_or", "is_bitwise_or", 
                   "bitwise_or", "bitwise_xor", "bitwise_and", "shift_expr", 
                   "sum", "term", "factor", "power", "await_primary", "primary", 
                   "slices", "slice", "atom", "group", "lambdef", "lambda_params", 
                   "lambda_parameters", "lambda_slash_no_default", "lambda_slash_with_default", 
                   "lambda_star_etc", "lambda_kwds", "lambda_param_no_default", 
                   "lambda_param_with_default", "lambda_param_maybe_default", 
                   "lambda_param", "fstring_middle", "fstring_replacement_field", 
                   "fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
                   "fstring", "string", "strings", "list", "tuple", "set", 
                   "dict", "double_starred_kvpairs", "double_starred_kvpair", 
                   "kvpair", "for_if_clauses", "for_if_clause", "listcomp", 
                   "setcomp", "genexp", "dictcomp", "arguments", "args", 
                   "kwargs", "starred_expression", "kwarg_or_starred", "kwarg_or_double_starred", 
                   "star_targets", "star_targets_list_seq", "star_targets_tuple_seq", 
                   "star_target", "target_with_star_atom", "star_atom", 
                   "single_target", "single_subscript_attribute_target", 
                   "t_primary", "del_targets", "del_target", "del_t_atom", 
                   "type_expressions", "func_type_comment", "soft_kw_match", 
                   "soft_kw_case", "soft_kw_wildcard", "soft_kw_type" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    FSTRING_START=3
    FSTRING_MIDDLE=4
    FSTRING_END=5
    FALSE=6
    AWAIT=7
    ELSE=8
    IMPORT=9
    PASS=10
    NONE=11
    BREAK=12
    EXCEPT=13
    IN=14
    RAISE=15
    TRUE=16
    CLASS=17
    FINALLY=18
    IS=19
    RETURN=20
    AND=21
    CONTINUE=22
    FOR=23
    LAMBDA=24
    TRY=25
    AS=26
    DEF=27
    FROM=28
    NONLOCAL=29
    WHILE=30
    ASSERT=31
    DEL=32
    GLOBAL=33
    NOT=34
    WITH=35
    ASYNC=36
    ELIF=37
    IF=38
    OR=39
    YIELD=40
    LPAR=41
    LSQB=42
    LBRACE=43
    RPAR=44
    RSQB=45
    RBRACE=46
    DOT=47
    COLON=48
    COMMA=49
    SEMI=50
    PLUS=51
    MINUS=52
    STAR=53
    SLASH=54
    VBAR=55
    AMPER=56
    LESS=57
    GREATER=58
    EQUAL=59
    PERCENT=60
    EQEQUAL=61
    NOTEQUAL=62
    LESSEQUAL=63
    GREATEREQUAL=64
    TILDE=65
    CIRCUMFLEX=66
    LEFTSHIFT=67
    RIGHTSHIFT=68
    DOUBLESTAR=69
    PLUSEQUAL=70
    MINEQUAL=71
    STAREQUAL=72
    SLASHEQUAL=73
    PERCENTEQUAL=74
    AMPEREQUAL=75
    VBAREQUAL=76
    CIRCUMFLEXEQUAL=77
    LEFTSHIFTEQUAL=78
    RIGHTSHIFTEQUAL=79
    DOUBLESTAREQUAL=80
    DOUBLESLASH=81
    DOUBLESLASHEQUAL=82
    AT=83
    ATEQUAL=84
    RARROW=85
    ELLIPSIS=86
    COLONEQUAL=87
    EXCLAMATION=88
    NAME=89
    NUMBER=90
    STRING=91
    TYPE_COMMENT=92
    NEWLINE=93
    COMMENT=94
    WS=95
    EXPLICIT_LINE_JOINING=96
    ERROR_TOKEN=97

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def statements(self):
            return self.getTypedRuleContext(PythonParser.StatementsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)




    def file_input(self):

        localctx = PythonParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 394
                self.statements()


            self.state = 397
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_newline(self):
            return self.getTypedRuleContext(PythonParser.Statement_newlineContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_interactive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteractive" ):
                listener.enterInteractive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteractive" ):
                listener.exitInteractive(self)




    def interactive(self):

        localctx = PythonParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_interactive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.statement_newline()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(PythonParser.ExpressionsContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_eval

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval" ):
                listener.enterEval(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval" ):
                listener.exitEval(self)




    def eval_(self):

        localctx = PythonParser.EvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.expressions()
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 402
                self.match(PythonParser.NEWLINE)
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 408
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def RARROW(self):
            return self.getToken(PythonParser.RARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def type_expressions(self):
            return self.getTypedRuleContext(PythonParser.Type_expressionsContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_func_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_type" ):
                listener.enterFunc_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_type" ):
                listener.exitFunc_type(self)




    def func_type(self):

        localctx = PythonParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_func_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(PythonParser.LPAR)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                self.state = 411
                self.type_expressions()


            self.state = 414
            self.match(PythonParser.RPAR)
            self.state = 415
            self.match(PythonParser.RARROW)
            self.state = 416
            self.expression()
            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 417
                self.match(PythonParser.NEWLINE)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 423
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFstring_input" ):
                listener.enterFstring_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFstring_input" ):
                listener.exitFstring_input(self)




    def fstring_input(self):

        localctx = PythonParser.Fstring_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fstring_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.star_expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StatementContext)
            else:
                return self.getTypedRuleContext(PythonParser.StatementContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)




    def statements(self):

        localctx = PythonParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 427
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 430 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = PythonParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 432
                self.compound_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.simple_stmts()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_newlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_statement_newline

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement_newline" ):
                listener.enterStatement_newline(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement_newline" ):
                listener.exitStatement_newline(self)




    def statement_newline(self):

        localctx = PythonParser.Statement_newlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement_newline)
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.compound_stmt()
                self.state = 437
                self.match(PythonParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 440
                self.match(PythonParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 441
                self.match(PythonParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.SEMI)
            else:
                return self.getToken(PythonParser.SEMI, i)

        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmts

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmts" ):
                listener.enterSimple_stmts(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmts" ):
                listener.exitSimple_stmts(self)




    def simple_stmts(self):

        localctx = PythonParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.simple_stmt()
            self.state = 449
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 445
                    self.match(PythonParser.SEMI)
                    self.state = 446
                    self.simple_stmt() 
                self.state = 451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 452
                self.match(PythonParser.SEMI)


            self.state = 455
            self.match(PythonParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(PythonParser.AssignmentContext,0)


        def type_alias(self):
            return self.getTypedRuleContext(PythonParser.Type_aliasContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonParser.Return_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonParser.Import_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonParser.Raise_stmtContext,0)


        def PASS(self):
            return self.getToken(PythonParser.PASS, 0)

        def del_stmt(self):
            return self.getTypedRuleContext(PythonParser.Del_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonParser.Yield_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonParser.Assert_stmtContext,0)


        def BREAK(self):
            return self.getToken(PythonParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(PythonParser.CONTINUE, 0)

        def global_stmt(self):
            return self.getTypedRuleContext(PythonParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonParser.Nonlocal_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)




    def simple_stmt(self):

        localctx = PythonParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simple_stmt)
        try:
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 457
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.type_alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 459
                self.star_expressions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 460
                self.return_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 461
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 462
                self.raise_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 463
                self.match(PythonParser.PASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 464
                self.del_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 465
                self.yield_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 466
                self.assert_stmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 467
                self.match(PythonParser.BREAK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 468
                self.match(PythonParser.CONTINUE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 469
                self.global_stmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 470
                self.nonlocal_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def(self):
            return self.getTypedRuleContext(PythonParser.Function_defContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(PythonParser.If_stmtContext,0)


        def class_def(self):
            return self.getTypedRuleContext(PythonParser.Class_defContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonParser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonParser.Try_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonParser.While_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(PythonParser.Match_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)




    def compound_stmt(self):

        localctx = PythonParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_compound_stmt)
        try:
            self.state = 481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 473
                self.function_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.if_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 475
                self.class_def()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 476
                self.with_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 477
                self.for_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 478
                self.try_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 479
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 480
                self.match_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.EQUAL)
            else:
                return self.getToken(PythonParser.EQUAL, i)

        def annotated_rhs(self):
            return self.getTypedRuleContext(PythonParser.Annotated_rhsContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def single_target(self):
            return self.getTypedRuleContext(PythonParser.Single_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(PythonParser.Single_subscript_attribute_targetContext,0)


        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def star_targets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetsContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetsContext,i)


        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def augassign(self):
            return self.getTypedRuleContext(PythonParser.AugassignContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment" ):
                listener.enterAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment" ):
                listener.exitAssignment(self)




    def assignment(self):

        localctx = PythonParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignment)
        self._la = 0 # Token type
        try:
            self.state = 523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 483
                self.match(PythonParser.NAME)
                self.state = 484
                self.match(PythonParser.COLON)
                self.state = 485
                self.expression()
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 486
                    self.match(PythonParser.EQUAL)
                    self.state = 487
                    self.annotated_rhs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 490
                    self.match(PythonParser.LPAR)
                    self.state = 491
                    self.single_target()
                    self.state = 492
                    self.match(PythonParser.RPAR)
                    pass

                elif la_ == 2:
                    self.state = 494
                    self.single_subscript_attribute_target()
                    pass


                self.state = 497
                self.match(PythonParser.COLON)
                self.state = 498
                self.expression()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 499
                    self.match(PythonParser.EQUAL)
                    self.state = 500
                    self.annotated_rhs()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 506 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 503
                        self.star_targets()
                        self.state = 504
                        self.match(PythonParser.EQUAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 508 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 512
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40]:
                    self.state = 510
                    self.yield_expr()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 53, 65, 86, 89, 90, 91]:
                    self.state = 511
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==92:
                    self.state = 514
                    self.match(PythonParser.TYPE_COMMENT)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 517
                self.single_target()
                self.state = 518
                self.augassign()
                self.state = 521
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [40]:
                    self.state = 519
                    self.yield_expr()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 53, 65, 86, 89, 90, 91]:
                    self.state = 520
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotated_rhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_annotated_rhs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotated_rhs" ):
                listener.enterAnnotated_rhs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotated_rhs" ):
                listener.exitAnnotated_rhs(self)




    def annotated_rhs(self):

        localctx = PythonParser.Annotated_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_annotated_rhs)
        try:
            self.state = 527
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 53, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUSEQUAL(self):
            return self.getToken(PythonParser.PLUSEQUAL, 0)

        def MINEQUAL(self):
            return self.getToken(PythonParser.MINEQUAL, 0)

        def STAREQUAL(self):
            return self.getToken(PythonParser.STAREQUAL, 0)

        def ATEQUAL(self):
            return self.getToken(PythonParser.ATEQUAL, 0)

        def SLASHEQUAL(self):
            return self.getToken(PythonParser.SLASHEQUAL, 0)

        def PERCENTEQUAL(self):
            return self.getToken(PythonParser.PERCENTEQUAL, 0)

        def AMPEREQUAL(self):
            return self.getToken(PythonParser.AMPEREQUAL, 0)

        def VBAREQUAL(self):
            return self.getToken(PythonParser.VBAREQUAL, 0)

        def CIRCUMFLEXEQUAL(self):
            return self.getToken(PythonParser.CIRCUMFLEXEQUAL, 0)

        def LEFTSHIFTEQUAL(self):
            return self.getToken(PythonParser.LEFTSHIFTEQUAL, 0)

        def RIGHTSHIFTEQUAL(self):
            return self.getToken(PythonParser.RIGHTSHIFTEQUAL, 0)

        def DOUBLESTAREQUAL(self):
            return self.getToken(PythonParser.DOUBLESTAREQUAL, 0)

        def DOUBLESLASHEQUAL(self):
            return self.getToken(PythonParser.DOUBLESLASHEQUAL, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)




    def augassign(self):

        localctx = PythonParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 22527) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonParser.RETURN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)




    def return_stmt(self):

        localctx = PythonParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531
            self.match(PythonParser.RETURN)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 532
                self.star_expressions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonParser.RAISE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)




    def raise_stmt(self):

        localctx = PythonParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(PythonParser.RAISE)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 536
                self.expression()
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 537
                    self.match(PythonParser.FROM)
                    self.state = 538
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)




    def global_stmt(self):

        localctx = PythonParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.match(PythonParser.GLOBAL)
            self.state = 544
            self.match(PythonParser.NAME)
            self.state = 549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 545
                self.match(PythonParser.COMMA)
                self.state = 546
                self.match(PythonParser.NAME)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)




    def nonlocal_stmt(self):

        localctx = PythonParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.match(PythonParser.NONLOCAL)
            self.state = 553
            self.match(PythonParser.NAME)
            self.state = 558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 554
                self.match(PythonParser.COMMA)
                self.state = 555
                self.match(PythonParser.NAME)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonParser.DEL, 0)

        def del_targets(self):
            return self.getTypedRuleContext(PythonParser.Del_targetsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)




    def del_stmt(self):

        localctx = PythonParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(PythonParser.DEL)
            self.state = 562
            self.del_targets()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)




    def yield_stmt(self):

        localctx = PythonParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 564
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)




    def assert_stmt(self):

        localctx = PythonParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(PythonParser.ASSERT)
            self.state = 567
            self.expression()
            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 568
                self.match(PythonParser.COMMA)
                self.state = 569
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)




    def import_stmt(self):

        localctx = PythonParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_import_stmt)
        try:
            self.state = 574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [9]:
                self.enterOuterAlt(localctx, 1)
                self.state = 572
                self.import_name()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)




    def import_name(self):

        localctx = PythonParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 576
            self.match(PythonParser.IMPORT)
            self.state = 577
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)

        def import_from_targets(self):
            return self.getTypedRuleContext(PythonParser.Import_from_targetsContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ELLIPSIS)
            else:
                return self.getToken(PythonParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)




    def import_from(self):

        localctx = PythonParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.match(PythonParser.FROM)
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==47 or _la==86:
                    self.state = 580
                    _la = self._input.LA(1)
                    if not(_la==47 or _la==86):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 585
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 586
                self.dotted_name(0)
                self.state = 587
                self.match(PythonParser.IMPORT)
                self.state = 588
                self.import_from_targets()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 590
                self.match(PythonParser.FROM)
                self.state = 592 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 591
                    _la = self._input.LA(1)
                    if not(_la==47 or _la==86):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 594 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==47 or _la==86):
                        break

                self.state = 596
                self.match(PythonParser.IMPORT)
                self.state = 597
                self.import_from_targets()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def import_from_as_names(self):
            return self.getTypedRuleContext(PythonParser.Import_from_as_namesContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_targets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from_targets" ):
                listener.enterImport_from_targets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from_targets" ):
                listener.exitImport_from_targets(self)




    def import_from_targets(self):

        localctx = PythonParser.Import_from_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_import_from_targets)
        self._la = 0 # Token type
        try:
            self.state = 609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.match(PythonParser.LPAR)
                self.state = 601
                self.import_from_as_names()
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 602
                    self.match(PythonParser.COMMA)


                self.state = 605
                self.match(PythonParser.RPAR)
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.import_from_as_names()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self.match(PythonParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_from_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Import_from_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Import_from_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from_as_names" ):
                listener.enterImport_from_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from_as_names" ):
                listener.exitImport_from_as_names(self)




    def import_from_as_names(self):

        localctx = PythonParser.Import_from_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_import_from_as_names)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.import_from_as_name()
            self.state = 616
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 612
                    self.match(PythonParser.COMMA)
                    self.state = 613
                    self.import_from_as_name() 
                self.state = 618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from_as_name" ):
                listener.enterImport_from_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from_as_name" ):
                listener.exitImport_from_as_name(self)




    def import_from_as_name(self):

        localctx = PythonParser.Import_from_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_from_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(PythonParser.NAME)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 620
                self.match(PythonParser.AS)
                self.state = 621
                self.match(PythonParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)




    def dotted_as_names(self):

        localctx = PythonParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.dotted_as_name()
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 625
                self.match(PythonParser.COMMA)
                self.state = 626
                self.dotted_as_name()
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)




    def dotted_as_name(self):

        localctx = PythonParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.dotted_name(0)
            self.state = 635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 633
                self.match(PythonParser.AS)
                self.state = 634
                self.match(PythonParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(PythonParser.NAME)
            self._ctx.stop = self._input.LT(-1)
            self.state = 645
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 640
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 641
                    self.match(PythonParser.DOT)
                    self.state = 642
                    self.match(PythonParser.NAME) 
                self.state = 647
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def statements(self):
            return self.getTypedRuleContext(PythonParser.StatementsContext,0)


        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = PythonParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        try:
            self.state = 654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 648
                self.match(PythonParser.NEWLINE)
                self.state = 649
                self.match(PythonParser.INDENT)
                self.state = 650
                self.statements()
                self.state = 651
                self.match(PythonParser.DEDENT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 653
                self.simple_stmts()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.AT)
            else:
                return self.getToken(PythonParser.AT, i)

        def named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Named_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Named_expressionContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)




    def decorators(self):

        localctx = PythonParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 656
                self.match(PythonParser.AT)
                self.state = 657
                self.named_expression()
                self.state = 658
                self.match(PythonParser.NEWLINE)
                self.state = 662 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==83):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonParser.DecoratorsContext,0)


        def class_def_raw(self):
            return self.getTypedRuleContext(PythonParser.Class_def_rawContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_class_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_def" ):
                listener.enterClass_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_def" ):
                listener.exitClass_def(self)




    def class_def(self):

        localctx = PythonParser.Class_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_class_def)
        try:
            self.state = 668
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.decorators()
                self.state = 665
                self.class_def_raw()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.class_def_raw()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_def_rawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_class_def_raw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_def_raw" ):
                listener.enterClass_def_raw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_def_raw" ):
                listener.exitClass_def_raw(self)




    def class_def_raw(self):

        localctx = PythonParser.Class_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_class_def_raw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.match(PythonParser.CLASS)
            self.state = 671
            self.match(PythonParser.NAME)
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 672
                self.type_params()


            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==41:
                self.state = 675
                self.match(PythonParser.LPAR)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                    self.state = 676
                    self.arguments()


                self.state = 679
                self.match(PythonParser.RPAR)


            self.state = 682
            self.match(PythonParser.COLON)
            self.state = 683
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonParser.DecoratorsContext,0)


        def function_def_raw(self):
            return self.getTypedRuleContext(PythonParser.Function_def_rawContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_function_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_def" ):
                listener.enterFunction_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_def" ):
                listener.exitFunction_def(self)




    def function_def(self):

        localctx = PythonParser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_function_def)
        try:
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83]:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.decorators()
                self.state = 686
                self.function_def_raw()
                pass
            elif token in [27, 36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.function_def_raw()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_def_rawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def params(self):
            return self.getTypedRuleContext(PythonParser.ParamsContext,0)


        def RARROW(self):
            return self.getToken(PythonParser.RARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def func_type_comment(self):
            return self.getTypedRuleContext(PythonParser.Func_type_commentContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_function_def_raw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_def_raw" ):
                listener.enterFunction_def_raw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_def_raw" ):
                listener.exitFunction_def_raw(self)




    def function_def_raw(self):

        localctx = PythonParser.Function_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_function_def_raw)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [27]:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self.match(PythonParser.DEF)
                self.state = 692
                self.match(PythonParser.NAME)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 693
                    self.type_params()


                self.state = 696
                self.match(PythonParser.LPAR)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 68719542273) != 0):
                    self.state = 697
                    self.params()


                self.state = 700
                self.match(PythonParser.RPAR)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 701
                    self.match(PythonParser.RARROW)
                    self.state = 702
                    self.expression()


                self.state = 705
                self.match(PythonParser.COLON)
                self.state = 707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 706
                    self.func_type_comment()


                self.state = 709
                self.block()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 710
                self.match(PythonParser.ASYNC)
                self.state = 711
                self.match(PythonParser.DEF)
                self.state = 712
                self.match(PythonParser.NAME)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 713
                    self.type_params()


                self.state = 716
                self.match(PythonParser.LPAR)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 68719542273) != 0):
                    self.state = 717
                    self.params()


                self.state = 720
                self.match(PythonParser.RPAR)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==85:
                    self.state = 721
                    self.match(PythonParser.RARROW)
                    self.state = 722
                    self.expression()


                self.state = 725
                self.match(PythonParser.COLON)
                self.state = 727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 726
                    self.func_type_comment()


                self.state = 729
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(PythonParser.ParametersContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParams" ):
                listener.enterParams(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParams" ):
                listener.exitParams(self)




    def params(self):

        localctx = PythonParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slash_no_default(self):
            return self.getTypedRuleContext(PythonParser.Slash_no_defaultContext,0)


        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_with_defaultContext,i)


        def star_etc(self):
            return self.getTypedRuleContext(PythonParser.Star_etcContext,0)


        def slash_with_default(self):
            return self.getTypedRuleContext(PythonParser.Slash_with_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)




    def parameters(self):

        localctx = PythonParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.state = 783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.slash_no_default()
                self.state = 738
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 735
                        self.param_no_default() 
                    self.state = 740
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 741
                    self.param_with_default()
                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 747
                    self.star_etc()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 750
                self.slash_with_default()
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 751
                    self.param_with_default()
                    self.state = 756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 757
                    self.star_etc()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 761 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 760
                        self.param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 763 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 765
                    self.param_with_default()
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 771
                    self.star_etc()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 775 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 774
                    self.param_with_default()
                    self.state = 777 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==89):
                        break

                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 779
                    self.star_etc()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 782
                self.star_etc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slash_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_slash_no_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlash_no_default" ):
                listener.enterSlash_no_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlash_no_default" ):
                listener.exitSlash_no_default(self)




    def slash_no_default(self):

        localctx = PythonParser.Slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_slash_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 785
                self.param_no_default()
                self.state = 788 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==89):
                    break

            self.state = 790
            self.match(PythonParser.SLASH)
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 791
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slash_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_with_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_slash_with_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlash_with_default" ):
                listener.enterSlash_with_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlash_with_default" ):
                listener.exitSlash_with_default(self)




    def slash_with_default(self):

        localctx = PythonParser.Slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_slash_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 797
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 794
                    self.param_no_default() 
                self.state = 799
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 801 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 800
                self.param_with_default()
                self.state = 803 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==89):
                    break

            self.state = 805
            self.match(PythonParser.SLASH)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 806
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_etcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,0)


        def param_maybe_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_maybe_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_maybe_defaultContext,i)


        def kwds(self):
            return self.getTypedRuleContext(PythonParser.KwdsContext,0)


        def param_no_default_star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Param_no_default_star_annotationContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_star_etc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_etc" ):
                listener.enterStar_etc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_etc" ):
                listener.exitStar_etc(self)




    def star_etc(self):

        localctx = PythonParser.Star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_star_etc)
        self._la = 0 # Token type
        try:
            self.state = 842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.match(PythonParser.STAR)
                self.state = 810
                self.param_no_default()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 811
                    self.param_maybe_default()
                    self.state = 816
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 817
                    self.kwds()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.match(PythonParser.STAR)
                self.state = 821
                self.param_no_default_star_annotation()
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 822
                    self.param_maybe_default()
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 828
                    self.kwds()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 831
                self.match(PythonParser.STAR)
                self.state = 832
                self.match(PythonParser.COMMA)
                self.state = 834 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 833
                    self.param_maybe_default()
                    self.state = 836 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==89):
                        break

                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 838
                    self.kwds()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 841
                self.kwds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwds" ):
                listener.enterKwds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwds" ):
                listener.exitKwds(self)




    def kwds(self):

        localctx = PythonParser.KwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(PythonParser.DOUBLESTAR)
            self.state = 845
            self.param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_no_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_no_default" ):
                listener.enterParam_no_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_no_default" ):
                listener.exitParam_no_default(self)




    def param_no_default(self):

        localctx = PythonParser.Param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_param_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.param()
            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 848
                self.match(PythonParser.COMMA)


            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 851
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_no_default_star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Param_star_annotationContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_no_default_star_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_no_default_star_annotation" ):
                listener.enterParam_no_default_star_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_no_default_star_annotation" ):
                listener.exitParam_no_default_star_annotation(self)




    def param_no_default_star_annotation(self):

        localctx = PythonParser.Param_no_default_star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_param_no_default_star_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.param_star_annotation()
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 855
                self.match(PythonParser.COMMA)


            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 858
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_with_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_with_default" ):
                listener.enterParam_with_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_with_default" ):
                listener.exitParam_with_default(self)




    def param_with_default(self):

        localctx = PythonParser.Param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_param_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.param()
            self.state = 862
            self.default_assignment()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 863
                self.match(PythonParser.COMMA)


            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 866
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_maybe_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_maybe_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_maybe_default" ):
                listener.enterParam_maybe_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_maybe_default" ):
                listener.exitParam_maybe_default(self)




    def param_maybe_default(self):

        localctx = PythonParser.Param_maybe_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_param_maybe_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.param()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 870
                self.default_assignment()


            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 873
                self.match(PythonParser.COMMA)


            self.state = 877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==92:
                self.state = 876
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def annotation(self):
            return self.getTypedRuleContext(PythonParser.AnnotationContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam" ):
                listener.enterParam(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam" ):
                listener.exitParam(self)




    def param(self):

        localctx = PythonParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(PythonParser.NAME)
            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 880
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Star_annotationContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_param_star_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParam_star_annotation" ):
                listener.enterParam_star_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParam_star_annotation" ):
                listener.exitParam_star_annotation(self)




    def param_star_annotation(self):

        localctx = PythonParser.Param_star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_param_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(PythonParser.NAME)
            self.state = 884
            self.star_annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = PythonParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.match(PythonParser.COLON)
            self.state = 887
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def star_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_annotation" ):
                listener.enterStar_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_annotation" ):
                listener.exitStar_annotation(self)




    def star_annotation(self):

        localctx = PythonParser.Star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(PythonParser.COLON)
            self.state = 890
            self.star_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_default_assignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_assignment" ):
                listener.enterDefault_assignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_assignment" ):
                listener.exitDefault_assignment(self)




    def default_assignment(self):

        localctx = PythonParser.Default_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_default_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 892
            self.match(PythonParser.EQUAL)
            self.state = 893
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def elif_stmt(self):
            return self.getTypedRuleContext(PythonParser.Elif_stmtContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)




    def if_stmt(self):

        localctx = PythonParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.match(PythonParser.IF)
            self.state = 896
            self.named_expression()
            self.state = 897
            self.match(PythonParser.COLON)
            self.state = 898
            self.block()
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 899
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.state = 901
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 900
                    self.else_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(PythonParser.ELIF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def elif_stmt(self):
            return self.getTypedRuleContext(PythonParser.Elif_stmtContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_elif_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_stmt" ):
                listener.enterElif_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_stmt" ):
                listener.exitElif_stmt(self)




    def elif_stmt(self):

        localctx = PythonParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(PythonParser.ELIF)
            self.state = 906
            self.named_expression()
            self.state = 907
            self.match(PythonParser.COLON)
            self.state = 908
            self.block()
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 909
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.state = 911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 910
                    self.else_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_else_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_block" ):
                listener.enterElse_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_block" ):
                listener.exitElse_block(self)




    def else_block(self):

        localctx = PythonParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_else_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(PythonParser.ELSE)
            self.state = 916
            self.match(PythonParser.COLON)
            self.state = 917
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonParser.WHILE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)




    def while_stmt(self):

        localctx = PythonParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(PythonParser.WHILE)
            self.state = 920
            self.named_expression()
            self.state = 921
            self.match(PythonParser.COLON)
            self.state = 922
            self.block()
            self.state = 924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 923
                self.else_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(PythonParser.Star_targetsContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)




    def for_stmt(self):

        localctx = PythonParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 926
                self.match(PythonParser.ASYNC)


            self.state = 929
            self.match(PythonParser.FOR)
            self.state = 930
            self.star_targets()
            self.state = 931
            self.match(PythonParser.IN)
            self.state = 932
            self.star_expressions()
            self.state = 933
            self.match(PythonParser.COLON)
            self.state = 935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 934
                self.match(PythonParser.TYPE_COMMENT)


            self.state = 937
            self.block()
            self.state = 939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 938
                self.else_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonParser.WITH, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonParser.With_itemContext,i)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)




    def with_stmt(self):

        localctx = PythonParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 941
                self.match(PythonParser.ASYNC)


            self.state = 944
            self.match(PythonParser.WITH)
            self.state = 972
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 945
                self.match(PythonParser.LPAR)
                self.state = 946
                self.with_item()
                self.state = 951
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 947
                        self.match(PythonParser.COMMA)
                        self.state = 948
                        self.with_item() 
                    self.state = 953
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 954
                    self.match(PythonParser.COMMA)


                self.state = 957
                self.match(PythonParser.RPAR)
                self.state = 958
                self.match(PythonParser.COLON)
                pass

            elif la_ == 2:
                self.state = 960
                self.with_item()
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==49:
                    self.state = 961
                    self.match(PythonParser.COMMA)
                    self.state = 962
                    self.with_item()
                    self.state = 967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 968
                self.match(PythonParser.COLON)
                self.state = 970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 969
                    self.match(PythonParser.TYPE_COMMENT)


                pass


            self.state = 974
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def star_target(self):
            return self.getTypedRuleContext(PythonParser.Star_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)




    def with_item(self):

        localctx = PythonParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.expression()
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 977
                self.match(PythonParser.AS)
                self.state = 978
                self.star_target()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonParser.TRY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def finally_block(self):
            return self.getTypedRuleContext(PythonParser.Finally_blockContext,0)


        def except_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_blockContext,i)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def except_star_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_star_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_star_blockContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)




    def try_stmt(self):

        localctx = PythonParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_try_stmt)
        try:
            self.state = 1014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 981
                self.match(PythonParser.TRY)
                self.state = 982
                self.match(PythonParser.COLON)
                self.state = 983
                self.block()
                self.state = 984
                self.finally_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.match(PythonParser.TRY)
                self.state = 987
                self.match(PythonParser.COLON)
                self.state = 988
                self.block()
                self.state = 990 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 989
                        self.except_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 992 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                self.state = 995
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 994
                    self.else_block()


                self.state = 998
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 997
                    self.finally_block()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1000
                self.match(PythonParser.TRY)
                self.state = 1001
                self.match(PythonParser.COLON)
                self.state = 1002
                self.block()
                self.state = 1004 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1003
                        self.except_star_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1006 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                self.state = 1009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1008
                    self.else_block()


                self.state = 1012
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1011
                    self.finally_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_block" ):
                listener.enterExcept_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_block" ):
                listener.exitExcept_block(self)




    def except_block(self):

        localctx = PythonParser.Except_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_except_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1016
            self.match(PythonParser.EXCEPT)
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 1017
                self.expression()
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==26:
                    self.state = 1018
                    self.match(PythonParser.AS)
                    self.state = 1019
                    self.match(PythonParser.NAME)




            self.state = 1024
            self.match(PythonParser.COLON)
            self.state = 1025
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_star_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_star_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_star_block" ):
                listener.enterExcept_star_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_star_block" ):
                listener.exitExcept_star_block(self)




    def except_star_block(self):

        localctx = PythonParser.Except_star_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_except_star_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1027
            self.match(PythonParser.EXCEPT)
            self.state = 1028
            self.match(PythonParser.STAR)
            self.state = 1029
            self.expression()
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 1030
                self.match(PythonParser.AS)
                self.state = 1031
                self.match(PythonParser.NAME)


            self.state = 1034
            self.match(PythonParser.COLON)
            self.state = 1035
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(PythonParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_finally_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_block" ):
                listener.enterFinally_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_block" ):
                listener.exitFinally_block(self)




    def finally_block(self):

        localctx = PythonParser.Finally_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_finally_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(PythonParser.FINALLY)
            self.state = 1038
            self.match(PythonParser.COLON)
            self.state = 1039
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_match(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_matchContext,0)


        def subject_expr(self):
            return self.getTypedRuleContext(PythonParser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Case_blockContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_match_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMatch_stmt" ):
                listener.enterMatch_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMatch_stmt" ):
                listener.exitMatch_stmt(self)




    def match_stmt(self):

        localctx = PythonParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_match_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.soft_kw_match()
            self.state = 1042
            self.subject_expr()
            self.state = 1043
            self.match(PythonParser.COLON)
            self.state = 1044
            self.match(PythonParser.NEWLINE)
            self.state = 1045
            self.match(PythonParser.INDENT)
            self.state = 1047 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1046
                    self.case_block()

                else:
                    raise NoViableAltException(self)
                self.state = 1049 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

            self.state = 1051
            self.match(PythonParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subject_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_subject_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubject_expr" ):
                listener.enterSubject_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubject_expr" ):
                listener.exitSubject_expr(self)




    def subject_expr(self):

        localctx = PythonParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 1059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1053
                self.star_named_expression()
                self.state = 1054
                self.match(PythonParser.COMMA)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1055
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1058
                self.named_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_case(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_caseContext,0)


        def patterns(self):
            return self.getTypedRuleContext(PythonParser.PatternsContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(PythonParser.GuardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_case_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCase_block" ):
                listener.enterCase_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCase_block" ):
                listener.exitCase_block(self)




    def case_block(self):

        localctx = PythonParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.soft_kw_case()
            self.state = 1062
            self.patterns()
            self.state = 1064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 1063
                self.guard()


            self.state = 1066
            self.match(PythonParser.COLON)
            self.state = 1067
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_guard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard" ):
                listener.enterGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard" ):
                listener.exitGuard(self)




    def guard(self):

        localctx = PythonParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(PythonParser.IF)
            self.state = 1070
            self.named_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatterns" ):
                listener.enterPatterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatterns" ):
                listener.exitPatterns(self)




    def patterns(self):

        localctx = PythonParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_patterns)
        try:
            self.state = 1074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(PythonParser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(PythonParser.Or_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern" ):
                listener.enterPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern" ):
                listener.exitPattern(self)




    def pattern(self):

        localctx = PythonParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pattern)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(PythonParser.Or_patternContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_as_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAs_pattern" ):
                listener.enterAs_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAs_pattern" ):
                listener.exitAs_pattern(self)




    def as_pattern(self):

        localctx = PythonParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.or_pattern()
            self.state = 1081
            self.match(PythonParser.AS)
            self.state = 1082
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Closed_patternContext,i)


        def VBAR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.VBAR)
            else:
                return self.getToken(PythonParser.VBAR, i)

        def getRuleIndex(self):
            return PythonParser.RULE_or_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_pattern" ):
                listener.enterOr_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_pattern" ):
                listener.exitOr_pattern(self)




    def or_pattern(self):

        localctx = PythonParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.closed_pattern()
            self.state = 1089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==55:
                self.state = 1085
                self.match(PythonParser.VBAR)
                self.state = 1086
                self.closed_pattern()
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closed_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(PythonParser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(PythonParser.Capture_patternContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PythonParser.Wildcard_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(PythonParser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(PythonParser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(PythonParser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(PythonParser.Class_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_closed_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosed_pattern" ):
                listener.enterClosed_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosed_pattern" ):
                listener.exitClosed_pattern(self)




    def closed_pattern(self):

        localctx = PythonParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_closed_pattern)
        try:
            self.state = 1100
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1094
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1095
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1096
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1097
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1098
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1099
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PythonParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_literal_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_pattern" ):
                listener.enterLiteral_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_pattern" ):
                listener.exitLiteral_pattern(self)




    def literal_pattern(self):

        localctx = PythonParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_literal_pattern)
        try:
            self.state = 1108
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1102
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1103
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1104
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1105
                self.match(PythonParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1106
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1107
                self.match(PythonParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PythonParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_literal_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_expr" ):
                listener.enterLiteral_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_expr" ):
                listener.exitLiteral_expr(self)




    def literal_expr(self):

        localctx = PythonParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_literal_expr)
        try:
            self.state = 1116
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1110
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1111
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1112
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1113
                self.match(PythonParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1114
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1115
                self.match(PythonParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_real_numberContext,0)


        def imaginary_number(self):
            return self.getTypedRuleContext(PythonParser.Imaginary_numberContext,0)


        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_complex_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComplex_number" ):
                listener.enterComplex_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComplex_number" ):
                listener.exitComplex_number(self)




    def complex_number(self):

        localctx = PythonParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_complex_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.signed_real_number()
            self.state = 1119
            _la = self._input.LA(1)
            if not(_la==51 or _la==52):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1120
            self.imaginary_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = PythonParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1122
                self.match(PythonParser.MINUS)


            self.state = 1125
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(PythonParser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_real_number" ):
                listener.enterSigned_real_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_real_number" ):
                listener.exitSigned_real_number(self)




    def signed_real_number(self):

        localctx = PythonParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_signed_real_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 1127
                self.match(PythonParser.MINUS)


            self.state = 1130
            self.real_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_real_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReal_number" ):
                listener.enterReal_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReal_number" ):
                listener.exitReal_number(self)




    def real_number(self):

        localctx = PythonParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_imaginary_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImaginary_number" ):
                listener.enterImaginary_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImaginary_number" ):
                listener.exitImaginary_number(self)




    def imaginary_number(self):

        localctx = PythonParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_capture_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture_pattern" ):
                listener.enterCapture_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture_pattern" ):
                listener.exitCapture_pattern(self)




    def capture_pattern(self):

        localctx = PythonParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_pattern_capture_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPattern_capture_target" ):
                listener.enterPattern_capture_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPattern_capture_target" ):
                listener.exitPattern_capture_target(self)




    def pattern_capture_target(self):

        localctx = PythonParser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            if not self.isnotEqualCurrentTokenText("_"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isnotEqualCurrentTokenText(\"_\")")
            self.state = 1139
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_wildcard(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_wildcardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_wildcard_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildcard_pattern" ):
                listener.enterWildcard_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildcard_pattern" ):
                listener.exitWildcard_pattern(self)




    def wildcard_pattern(self):

        localctx = PythonParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.soft_kw_wildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(PythonParser.AttrContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_pattern" ):
                listener.enterValue_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_pattern" ):
                listener.exitValue_pattern(self)




    def value_pattern(self):

        localctx = PythonParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def getRuleIndex(self):
            return PythonParser.RULE_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttr" ):
                listener.enterAttr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttr" ):
                listener.exitAttr(self)




    def attr(self):

        localctx = PythonParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(PythonParser.NAME)
            self.state = 1148 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1146
                self.match(PythonParser.DOT)
                self.state = 1147
                self.match(PythonParser.NAME)
                self.state = 1150 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==47):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_or_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def getRuleIndex(self):
            return PythonParser.RULE_name_or_attr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName_or_attr" ):
                listener.enterName_or_attr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName_or_attr" ):
                listener.exitName_or_attr(self)




    def name_or_attr(self):

        localctx = PythonParser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_name_or_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(PythonParser.NAME)
            self.state = 1157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==47:
                self.state = 1153
                self.match(PythonParser.DOT)
                self.state = 1154
                self.match(PythonParser.NAME)
                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_group_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_pattern" ):
                listener.enterGroup_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_pattern" ):
                listener.exitGroup_pattern(self)




    def group_pattern(self):

        localctx = PythonParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(PythonParser.LPAR)
            self.state = 1161
            self.pattern()
            self.state = 1162
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_sequence_patternContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence_pattern" ):
                listener.enterSequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence_pattern" ):
                listener.exitSequence_pattern(self)




    def sequence_pattern(self):

        localctx = PythonParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sequence_pattern)
        try:
            self.state = 1174
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self.match(PythonParser.LSQB)
                self.state = 1166
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1165
                    self.maybe_sequence_pattern()


                self.state = 1168
                self.match(PythonParser.RSQB)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self.match(PythonParser.LPAR)
                self.state = 1171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1170
                    self.open_sequence_pattern()


                self.state = 1173
                self.match(PythonParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_open_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpen_sequence_pattern" ):
                listener.enterOpen_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpen_sequence_pattern" ):
                listener.exitOpen_sequence_pattern(self)




    def open_sequence_pattern(self):

        localctx = PythonParser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_open_sequence_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.maybe_star_pattern()
            self.state = 1177
            self.match(PythonParser.COMMA)
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1178
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_maybe_sequence_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_sequence_pattern" ):
                listener.enterMaybe_sequence_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_sequence_pattern" ):
                listener.exitMaybe_sequence_pattern(self)




    def maybe_sequence_pattern(self):

        localctx = PythonParser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.maybe_star_pattern()
            self.state = 1186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1182
                    self.match(PythonParser.COMMA)
                    self.state = 1183
                    self.maybe_star_pattern() 
                self.state = 1188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1189
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_maybe_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMaybe_star_pattern" ):
                listener.enterMaybe_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMaybe_star_pattern" ):
                listener.exitMaybe_star_pattern(self)




    def maybe_star_pattern(self):

        localctx = PythonParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_maybe_star_pattern)
        try:
            self.state = 1194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1192
                self.star_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1193
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PythonParser.Wildcard_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_pattern" ):
                listener.enterStar_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_pattern" ):
                listener.exitStar_pattern(self)




    def star_pattern(self):

        localctx = PythonParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_star_pattern)
        try:
            self.state = 1200
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1196
                self.match(PythonParser.STAR)
                self.state = 1197
                self.pattern_capture_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1198
                self.match(PythonParser.STAR)
                self.state = 1199
                self.wildcard_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(PythonParser.Items_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_mapping_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_pattern" ):
                listener.enterMapping_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_pattern" ):
                listener.exitMapping_pattern(self)




    def mapping_pattern(self):

        localctx = PythonParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.match(PythonParser.LBRACE)
                self.state = 1203
                self.match(PythonParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1204
                self.match(PythonParser.LBRACE)
                self.state = 1205
                self.double_star_pattern()
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1206
                    self.match(PythonParser.COMMA)


                self.state = 1209
                self.match(PythonParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1211
                self.match(PythonParser.LBRACE)
                self.state = 1212
                self.items_pattern()
                self.state = 1215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 1213
                    self.match(PythonParser.COMMA)
                    self.state = 1214
                    self.double_star_pattern()


                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1217
                    self.match(PythonParser.COMMA)


                self.state = 1220
                self.match(PythonParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Items_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_items_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterItems_pattern" ):
                listener.enterItems_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitItems_pattern" ):
                listener.exitItems_pattern(self)




    def items_pattern(self):

        localctx = PythonParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.key_value_pattern()
            self.state = 1229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1225
                    self.match(PythonParser.COMMA)
                    self.state = 1226
                    self.key_value_pattern() 
                self.state = 1231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(PythonParser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(PythonParser.AttrContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_key_value_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value_pattern" ):
                listener.enterKey_value_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value_pattern" ):
                listener.exitKey_value_pattern(self)




    def key_value_pattern(self):

        localctx = PythonParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 11, 16, 52, 90, 91]:
                self.state = 1232
                self.literal_expr()
                pass
            elif token in [89]:
                self.state = 1233
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1236
            self.match(PythonParser.COLON)
            self.state = 1237
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_double_star_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_star_pattern" ):
                listener.enterDouble_star_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_star_pattern" ):
                listener.exitDouble_star_pattern(self)




    def double_star_pattern(self):

        localctx = PythonParser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(PythonParser.DOUBLESTAR)
            self.state = 1240
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(PythonParser.Name_or_attrContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(PythonParser.Positional_patternsContext,0)


        def keyword_patterns(self):
            return self.getTypedRuleContext(PythonParser.Keyword_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_class_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_pattern" ):
                listener.enterClass_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_pattern" ):
                listener.exitClass_pattern(self)




    def class_pattern(self):

        localctx = PythonParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.name_or_attr()
            self.state = 1243
            self.match(PythonParser.LPAR)
            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1244
                    self.positional_patterns()
                    self.state = 1247
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                    if la_ == 1:
                        self.state = 1245
                        self.match(PythonParser.COMMA)
                        self.state = 1246
                        self.keyword_patterns()


                    pass

                elif la_ == 2:
                    self.state = 1249
                    self.keyword_patterns()
                    pass


                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1252
                    self.match(PythonParser.COMMA)




            self.state = 1257
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.PatternContext)
            else:
                return self.getTypedRuleContext(PythonParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_positional_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_patterns" ):
                listener.enterPositional_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_patterns" ):
                listener.exitPositional_patterns(self)




    def positional_patterns(self):

        localctx = PythonParser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.pattern()
            self.state = 1264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1260
                    self.match(PythonParser.COMMA)
                    self.state = 1261
                    self.pattern() 
                self.state = 1266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_keyword_patterns

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_patterns" ):
                listener.enterKeyword_patterns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_patterns" ):
                listener.exitKeyword_patterns(self)




    def keyword_patterns(self):

        localctx = PythonParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.keyword_pattern()
            self.state = 1272
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1268
                    self.match(PythonParser.COMMA)
                    self.state = 1269
                    self.keyword_pattern() 
                self.state = 1274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_keyword_pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword_pattern" ):
                listener.enterKeyword_pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword_pattern" ):
                listener.exitKeyword_pattern(self)




    def keyword_pattern(self):

        localctx = PythonParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(PythonParser.NAME)
            self.state = 1276
            self.match(PythonParser.EQUAL)
            self.state = 1277
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_type(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_typeContext,0)


        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_type_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_alias" ):
                listener.enterType_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_alias" ):
                listener.exitType_alias(self)




    def type_alias(self):

        localctx = PythonParser.Type_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_type_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.soft_kw_type()
            self.state = 1280
            self.match(PythonParser.NAME)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 1281
                self.type_params()


            self.state = 1284
            self.match(PythonParser.EQUAL)
            self.state = 1285
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def type_param_seq(self):
            return self.getTypedRuleContext(PythonParser.Type_param_seqContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_params" ):
                listener.enterType_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_params" ):
                listener.exitType_params(self)




    def type_params(self):

        localctx = PythonParser.Type_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_type_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(PythonParser.LSQB)
            self.state = 1288
            self.type_param_seq()
            self.state = 1289
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_param_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Type_paramContext)
            else:
                return self.getTypedRuleContext(PythonParser.Type_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_type_param_seq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_param_seq" ):
                listener.enterType_param_seq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_param_seq" ):
                listener.exitType_param_seq(self)




    def type_param_seq(self):

        localctx = PythonParser.Type_param_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_type_param_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.type_param()
            self.state = 1296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1292
                    self.match(PythonParser.COMMA)
                    self.state = 1293
                    self.type_param() 
                self.state = 1298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1299
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def type_param_bound(self):
            return self.getTypedRuleContext(PythonParser.Type_param_boundContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_param" ):
                listener.enterType_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_param" ):
                listener.exitType_param(self)




    def type_param(self):

        localctx = PythonParser.Type_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_type_param)
        self._la = 0 # Token type
        try:
            self.state = 1318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.match(PythonParser.NAME)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1303
                    self.type_param_bound()


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1306
                self.match(PythonParser.STAR)
                self.state = 1307
                self.match(PythonParser.NAME)
                self.state = 1310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1308
                    self.match(PythonParser.COLON)
                    self.state = 1309
                    self.expression()


                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1312
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1313
                self.match(PythonParser.NAME)
                self.state = 1316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1314
                    self.match(PythonParser.COLON)
                    self.state = 1315
                    self.expression()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_param_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_type_param_bound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_param_bound" ):
                listener.enterType_param_bound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_param_bound" ):
                listener.exitType_param_bound(self)




    def type_param_bound(self):

        localctx = PythonParser.Type_param_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_type_param_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            self.match(PythonParser.COLON)
            self.state = 1321
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = PythonParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.expression()
            self.state = 1328
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1324
                    self.match(PythonParser.COMMA)
                    self.state = 1325
                    self.expression() 
                self.state = 1330
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

            self.state = 1332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1331
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.DisjunctionContext,i)


        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)




    def expression(self):

        localctx = PythonParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 1343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 7, 11, 16, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1334
                self.disjunction()
                self.state = 1340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==38:
                    self.state = 1335
                    self.match(PythonParser.IF)
                    self.state = 1336
                    self.disjunction()
                    self.state = 1337
                    self.match(PythonParser.ELSE)
                    self.state = 1338
                    self.expression()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1342
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonParser.YIELD, 0)

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)




    def yield_expr(self):

        localctx = PythonParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(PythonParser.YIELD)
            self.state = 1351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.state = 1346
                self.match(PythonParser.FROM)
                self.state = 1347
                self.expression()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 44, 46, 48, 50, 51, 52, 53, 59, 65, 86, 88, 89, 90, 91, 92, 93]:
                self.state = 1349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1348
                    self.star_expressions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expressions" ):
                listener.enterStar_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expressions" ):
                listener.exitStar_expressions(self)




    def star_expressions(self):

        localctx = PythonParser.Star_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_star_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.star_expression()
            self.state = 1358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1354
                    self.match(PythonParser.COMMA)
                    self.state = 1355
                    self.star_expression() 
                self.state = 1360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1361
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expression" ):
                listener.enterStar_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expression" ):
                listener.exitStar_expression(self)




    def star_expression(self):

        localctx = PythonParser.Star_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_star_expression)
        try:
            self.state = 1367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.match(PythonParser.STAR)
                self.state = 1365
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1366
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_named_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expressions" ):
                listener.enterStar_named_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expressions" ):
                listener.exitStar_named_expressions(self)




    def star_named_expressions(self):

        localctx = PythonParser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.star_named_expression()
            self.state = 1374
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1370
                    self.match(PythonParser.COMMA)
                    self.state = 1371
                    self.star_named_expression() 
                self.state = 1376
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1377
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_named_expression" ):
                listener.enterStar_named_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_named_expression" ):
                listener.exitStar_named_expression(self)




    def star_named_expression(self):

        localctx = PythonParser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_star_named_expression)
        try:
            self.state = 1383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1380
                self.match(PythonParser.STAR)
                self.state = 1381
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLONEQUAL(self):
            return self.getToken(PythonParser.COLONEQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_assignment_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignment_expression" ):
                listener.enterAssignment_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignment_expression" ):
                listener.exitAssignment_expression(self)




    def assignment_expression(self):

        localctx = PythonParser.Assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_assignment_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.match(PythonParser.NAME)
            self.state = 1386
            self.match(PythonParser.COLONEQUAL)
            self.state = 1387
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_named_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_expression" ):
                listener.enterNamed_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_expression" ):
                listener.exitNamed_expression(self)




    def named_expression(self):

        localctx = PythonParser.Named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_named_expression)
        try:
            self.state = 1391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1390
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ConjunctionContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.OR)
            else:
                return self.getToken(PythonParser.OR, i)

        def getRuleIndex(self):
            return PythonParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)




    def disjunction(self):

        localctx = PythonParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.conjunction()
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1394
                self.match(PythonParser.OR)
                self.state = 1395
                self.conjunction()
                self.state = 1400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.InversionContext)
            else:
                return self.getTypedRuleContext(PythonParser.InversionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.AND)
            else:
                return self.getToken(PythonParser.AND, i)

        def getRuleIndex(self):
            return PythonParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)




    def conjunction(self):

        localctx = PythonParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.inversion()
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==21:
                self.state = 1402
                self.match(PythonParser.AND)
                self.state = 1403
                self.inversion()
                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def inversion(self):
            return self.getTypedRuleContext(PythonParser.InversionContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_inversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInversion" ):
                listener.enterInversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInversion" ):
                listener.exitInversion(self)




    def inversion(self):

        localctx = PythonParser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_inversion)
        try:
            self.state = 1412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1409
                self.match(PythonParser.NOT)
                self.state = 1410
                self.inversion()
                pass
            elif token in [3, 6, 7, 11, 16, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1411
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def compare_op_bitwise_or_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Compare_op_bitwise_or_pairContext)
            else:
                return self.getTypedRuleContext(PythonParser.Compare_op_bitwise_or_pairContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)




    def comparison(self):

        localctx = PythonParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self.bitwise_or(0)
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 14)) & ~0x3f) == 0 and ((1 << (_la - 14)) & 2137450605445153) != 0):
                self.state = 1415
                self.compare_op_bitwise_or_pair()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compare_op_bitwise_or_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eq_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Eq_bitwise_orContext,0)


        def noteq_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Noteq_bitwise_orContext,0)


        def lte_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Lte_bitwise_orContext,0)


        def lt_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Lt_bitwise_orContext,0)


        def gte_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Gte_bitwise_orContext,0)


        def gt_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Gt_bitwise_orContext,0)


        def notin_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Notin_bitwise_orContext,0)


        def in_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.In_bitwise_orContext,0)


        def isnot_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Isnot_bitwise_orContext,0)


        def is_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Is_bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_compare_op_bitwise_or_pair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompare_op_bitwise_or_pair" ):
                listener.enterCompare_op_bitwise_or_pair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompare_op_bitwise_or_pair" ):
                listener.exitCompare_op_bitwise_or_pair(self)




    def compare_op_bitwise_or_pair(self):

        localctx = PythonParser.Compare_op_bitwise_or_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_compare_op_bitwise_or_pair)
        try:
            self.state = 1431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1421
                self.eq_bitwise_or()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1422
                self.noteq_bitwise_or()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1423
                self.lte_bitwise_or()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1424
                self.lt_bitwise_or()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1425
                self.gte_bitwise_or()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1426
                self.gt_bitwise_or()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1427
                self.notin_bitwise_or()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1428
                self.in_bitwise_or()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1429
                self.isnot_bitwise_or()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1430
                self.is_bitwise_or()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eq_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQEQUAL(self):
            return self.getToken(PythonParser.EQEQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_eq_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEq_bitwise_or" ):
                listener.enterEq_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEq_bitwise_or" ):
                listener.exitEq_bitwise_or(self)




    def eq_bitwise_or(self):

        localctx = PythonParser.Eq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_eq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(PythonParser.EQEQUAL)
            self.state = 1434
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noteq_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def NOTEQUAL(self):
            return self.getToken(PythonParser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_noteq_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoteq_bitwise_or" ):
                listener.enterNoteq_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoteq_bitwise_or" ):
                listener.exitNoteq_bitwise_or(self)




    def noteq_bitwise_or(self):

        localctx = PythonParser.Noteq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_noteq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.match(PythonParser.NOTEQUAL)
            self.state = 1437
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lte_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESSEQUAL(self):
            return self.getToken(PythonParser.LESSEQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lte_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLte_bitwise_or" ):
                listener.enterLte_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLte_bitwise_or" ):
                listener.exitLte_bitwise_or(self)




    def lte_bitwise_or(self):

        localctx = PythonParser.Lte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_lte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(PythonParser.LESSEQUAL)
            self.state = 1440
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lt_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(PythonParser.LESS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lt_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLt_bitwise_or" ):
                listener.enterLt_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLt_bitwise_or" ):
                listener.exitLt_bitwise_or(self)




    def lt_bitwise_or(self):

        localctx = PythonParser.Lt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_lt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1442
            self.match(PythonParser.LESS)
            self.state = 1443
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gte_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATEREQUAL(self):
            return self.getToken(PythonParser.GREATEREQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_gte_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGte_bitwise_or" ):
                listener.enterGte_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGte_bitwise_or" ):
                listener.exitGte_bitwise_or(self)




    def gte_bitwise_or(self):

        localctx = PythonParser.Gte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_gte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(PythonParser.GREATEREQUAL)
            self.state = 1446
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gt_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(PythonParser.GREATER, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_gt_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGt_bitwise_or" ):
                listener.enterGt_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGt_bitwise_or" ):
                listener.exitGt_bitwise_or(self)




    def gt_bitwise_or(self):

        localctx = PythonParser.Gt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_gt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            self.match(PythonParser.GREATER)
            self.state = 1449
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notin_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_notin_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotin_bitwise_or" ):
                listener.enterNotin_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotin_bitwise_or" ):
                listener.exitNotin_bitwise_or(self)




    def notin_bitwise_or(self):

        localctx = PythonParser.Notin_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_notin_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1451
            self.match(PythonParser.NOT)
            self.state = 1452
            self.match(PythonParser.IN)
            self.state = 1453
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_in_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIn_bitwise_or" ):
                listener.enterIn_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIn_bitwise_or" ):
                listener.exitIn_bitwise_or(self)




    def in_bitwise_or(self):

        localctx = PythonParser.In_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_in_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.match(PythonParser.IN)
            self.state = 1456
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isnot_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_isnot_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsnot_bitwise_or" ):
                listener.enterIsnot_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsnot_bitwise_or" ):
                listener.exitIsnot_bitwise_or(self)




    def isnot_bitwise_or(self):

        localctx = PythonParser.Isnot_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_isnot_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.match(PythonParser.IS)
            self.state = 1459
            self.match(PythonParser.NOT)
            self.state = 1460
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_is_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_bitwise_or" ):
                listener.enterIs_bitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_bitwise_or" ):
                listener.exitIs_bitwise_or(self)




    def is_bitwise_or(self):

        localctx = PythonParser.Is_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_is_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.match(PythonParser.IS)
            self.state = 1463
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_xor(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_xorContext,0)


        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def VBAR(self):
            return self.getToken(PythonParser.VBAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_or

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_or" ):
                listener.enterBitwise_or(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_or" ):
                listener.exitBitwise_or(self)



    def bitwise_or(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_orContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_bitwise_or, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1466
            self.bitwise_xor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_orContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_or)
                    self.state = 1468
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1469
                    self.match(PythonParser.VBAR)
                    self.state = 1470
                    self.bitwise_xor(0) 
                self.state = 1475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Bitwise_xorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_and(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_andContext,0)


        def bitwise_xor(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_xorContext,0)


        def CIRCUMFLEX(self):
            return self.getToken(PythonParser.CIRCUMFLEX, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_xor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_xor" ):
                listener.enterBitwise_xor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_xor" ):
                listener.exitBitwise_xor(self)



    def bitwise_xor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_xorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 256
        self.enterRecursionRule(localctx, 256, self.RULE_bitwise_xor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.bitwise_and(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_xorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_xor)
                    self.state = 1479
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1480
                    self.match(PythonParser.CIRCUMFLEX)
                    self.state = 1481
                    self.bitwise_and(0) 
                self.state = 1486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Bitwise_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self):
            return self.getTypedRuleContext(PythonParser.Shift_exprContext,0)


        def bitwise_and(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_andContext,0)


        def AMPER(self):
            return self.getToken(PythonParser.AMPER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_and

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwise_and" ):
                listener.enterBitwise_and(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwise_and" ):
                listener.exitBitwise_and(self)



    def bitwise_and(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_andContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 258
        self.enterRecursionRule(localctx, 258, self.RULE_bitwise_and, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1488
            self.shift_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1495
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_andContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_and)
                    self.state = 1490
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1491
                    self.match(PythonParser.AMPER)
                    self.state = 1492
                    self.shift_expr(0) 
                self.state = 1497
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_(self):
            return self.getTypedRuleContext(PythonParser.SumContext,0)


        def shift_expr(self):
            return self.getTypedRuleContext(PythonParser.Shift_exprContext,0)


        def LEFTSHIFT(self):
            return self.getToken(PythonParser.LEFTSHIFT, 0)

        def RIGHTSHIFT(self):
            return self.getToken(PythonParser.RIGHTSHIFT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)



    def shift_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Shift_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 260
        self.enterRecursionRule(localctx, 260, self.RULE_shift_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            self.sum_(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1506
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,173,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Shift_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shift_expr)
                    self.state = 1501
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1502
                    _la = self._input.LA(1)
                    if not(_la==67 or _la==68):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1503
                    self.sum_(0) 
                self.state = 1508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,173,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(PythonParser.TermContext,0)


        def sum_(self):
            return self.getTypedRuleContext(PythonParser.SumContext,0)


        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_sum

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum" ):
                listener.enterSum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum" ):
                listener.exitSum(self)



    def sum_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.SumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 262
        self.enterRecursionRule(localctx, 262, self.RULE_sum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1517
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.SumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sum)
                    self.state = 1512
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1513
                    _la = self._input.LA(1)
                    if not(_la==51 or _la==52):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1514
                    self.term(0) 
                self.state = 1519
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def term(self):
            return self.getTypedRuleContext(PythonParser.TermContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def DOUBLESLASH(self):
            return self.getToken(PythonParser.DOUBLESLASH, 0)

        def PERCENT(self):
            return self.getToken(PythonParser.PERCENT, 0)

        def AT(self):
            return self.getToken(PythonParser.AT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1528
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.TermContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                    self.state = 1523
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1524
                    _la = self._input.LA(1)
                    if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 1342177411) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1525
                    self.factor() 
                self.state = 1530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(PythonParser.TILDE, 0)

        def power(self):
            return self.getTypedRuleContext(PythonParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)




    def factor(self):

        localctx = PythonParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_factor)
        try:
            self.state = 1538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [51]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1531
                self.match(PythonParser.PLUS)
                self.state = 1532
                self.factor()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1533
                self.match(PythonParser.MINUS)
                self.state = 1534
                self.factor()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1535
                self.match(PythonParser.TILDE)
                self.state = 1536
                self.factor()
                pass
            elif token in [3, 6, 7, 11, 16, 41, 42, 43, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1537
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def await_primary(self):
            return self.getTypedRuleContext(PythonParser.Await_primaryContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)




    def power(self):

        localctx = PythonParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.await_primary()
            self.state = 1543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1541
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1542
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Await_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT(self):
            return self.getToken(PythonParser.AWAIT, 0)

        def primary(self):
            return self.getTypedRuleContext(PythonParser.PrimaryContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_await_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAwait_primary" ):
                listener.enterAwait_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAwait_primary" ):
                listener.exitAwait_primary(self)




    def await_primary(self):

        localctx = PythonParser.Await_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_await_primary)
        try:
            self.state = 1548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.match(PythonParser.AWAIT)
                self.state = 1546
                self.primary(0)
                pass
            elif token in [3, 6, 11, 16, 41, 42, 43, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                self.primary(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def primary(self):
            return self.getTypedRuleContext(PythonParser.PrimaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)



    def primary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.PrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_primary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1570
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.PrimaryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_primary)
                    self.state = 1553
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1566
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                    if la_ == 1:
                        self.state = 1554
                        self.match(PythonParser.DOT)
                        self.state = 1555
                        self.match(PythonParser.NAME)
                        pass

                    elif la_ == 2:
                        self.state = 1556
                        self.genexp()
                        pass

                    elif la_ == 3:
                        self.state = 1557
                        self.match(PythonParser.LPAR)
                        self.state = 1559
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                            self.state = 1558
                            self.arguments()


                        self.state = 1561
                        self.match(PythonParser.RPAR)
                        pass

                    elif la_ == 4:
                        self.state = 1562
                        self.match(PythonParser.LSQB)
                        self.state = 1563
                        self.slices()
                        self.state = 1564
                        self.match(PythonParser.RSQB)
                        pass

             
                self.state = 1572
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SlicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slice_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.SliceContext)
            else:
                return self.getTypedRuleContext(PythonParser.SliceContext,i)


        def starred_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Starred_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Starred_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_slices

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlices" ):
                listener.enterSlices(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlices" ):
                listener.exitSlices(self)




    def slices(self):

        localctx = PythonParser.SlicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_slices)
        self._la = 0 # Token type
        try:
            self.state = 1591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1573
                self.slice_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1576
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 48, 51, 52, 65, 86, 89, 90, 91]:
                    self.state = 1574
                    self.slice_()
                    pass
                elif token in [53]:
                    self.state = 1575
                    self.starred_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1585
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,184,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1578
                        self.match(PythonParser.COMMA)
                        self.state = 1581
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 48, 51, 52, 65, 86, 89, 90, 91]:
                            self.state = 1579
                            self.slice_()
                            pass
                        elif token in [53]:
                            self.state = 1580
                            self.starred_expression()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1587
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,184,self._ctx)

                self.state = 1589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1588
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COLON)
            else:
                return self.getToken(PythonParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_slice

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSlice" ):
                listener.enterSlice(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSlice" ):
                listener.exitSlice(self)




    def slice_(self):

        localctx = PythonParser.SliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_slice)
        self._la = 0 # Token type
        try:
            self.state = 1607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1593
                    self.expression()


                self.state = 1596
                self.match(PythonParser.COLON)
                self.state = 1598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1597
                    self.expression()


                self.state = 1604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==48:
                    self.state = 1600
                    self.match(PythonParser.COLON)
                    self.state = 1602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                        self.state = 1601
                        self.expression()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1606
                self.named_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def tuple_(self):
            return self.getTypedRuleContext(PythonParser.TupleContext,0)


        def group(self):
            return self.getTypedRuleContext(PythonParser.GroupContext,0)


        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def list_(self):
            return self.getTypedRuleContext(PythonParser.ListContext,0)


        def listcomp(self):
            return self.getTypedRuleContext(PythonParser.ListcompContext,0)


        def dict_(self):
            return self.getTypedRuleContext(PythonParser.DictContext,0)


        def set_(self):
            return self.getTypedRuleContext(PythonParser.SetContext,0)


        def dictcomp(self):
            return self.getTypedRuleContext(PythonParser.DictcompContext,0)


        def setcomp(self):
            return self.getTypedRuleContext(PythonParser.SetcompContext,0)


        def ELLIPSIS(self):
            return self.getToken(PythonParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)




    def atom(self):

        localctx = PythonParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_atom)
        try:
            self.state = 1631
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1609
                self.match(PythonParser.NAME)
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1610
                self.match(PythonParser.TRUE)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1611
                self.match(PythonParser.FALSE)
                pass
            elif token in [11]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1612
                self.match(PythonParser.NONE)
                pass
            elif token in [3, 91]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1613
                self.strings()
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1614
                self.match(PythonParser.NUMBER)
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1618
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1615
                    self.tuple_()
                    pass

                elif la_ == 2:
                    self.state = 1616
                    self.group()
                    pass

                elif la_ == 3:
                    self.state = 1617
                    self.genexp()
                    pass


                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1622
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                if la_ == 1:
                    self.state = 1620
                    self.list_()
                    pass

                elif la_ == 2:
                    self.state = 1621
                    self.listcomp()
                    pass


                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1628
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1624
                    self.dict_()
                    pass

                elif la_ == 2:
                    self.state = 1625
                    self.set_()
                    pass

                elif la_ == 3:
                    self.state = 1626
                    self.dictcomp()
                    pass

                elif la_ == 4:
                    self.state = 1627
                    self.setcomp()
                    pass


                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1630
                self.match(PythonParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)




    def group(self):

        localctx = PythonParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1633
            self.match(PythonParser.LPAR)
            self.state = 1636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.state = 1634
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.state = 1635
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1638
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def lambda_params(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)




    def lambdef(self):

        localctx = PythonParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1640
            self.match(PythonParser.LAMBDA)
            self.state = 1642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & 68719542273) != 0):
                self.state = 1641
                self.lambda_params()


            self.state = 1644
            self.match(PythonParser.COLON)
            self.state = 1645
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_parameters(self):
            return self.getTypedRuleContext(PythonParser.Lambda_parametersContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_params

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_params" ):
                listener.enterLambda_params(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_params" ):
                listener.exitLambda_params(self)




    def lambda_params(self):

        localctx = PythonParser.Lambda_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_lambda_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.lambda_parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_slash_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_slash_no_defaultContext,0)


        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def lambda_param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_with_defaultContext,i)


        def lambda_star_etc(self):
            return self.getTypedRuleContext(PythonParser.Lambda_star_etcContext,0)


        def lambda_slash_with_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_slash_with_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_parameters" ):
                listener.enterLambda_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_parameters" ):
                listener.exitLambda_parameters(self)




    def lambda_parameters(self):

        localctx = PythonParser.Lambda_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_lambda_parameters)
        self._la = 0 # Token type
        try:
            self.state = 1698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1649
                self.lambda_slash_no_default()
                self.state = 1653
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,198,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1650
                        self.lambda_param_no_default() 
                    self.state = 1655
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,198,self._ctx)

                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 1656
                    self.lambda_param_with_default()
                    self.state = 1661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 1662
                    self.lambda_star_etc()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1665
                self.lambda_slash_with_default()
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 1666
                    self.lambda_param_with_default()
                    self.state = 1671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 1672
                    self.lambda_star_etc()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1676 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1675
                        self.lambda_param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1678 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,203,self._ctx)

                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 1680
                    self.lambda_param_with_default()
                    self.state = 1685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 1686
                    self.lambda_star_etc()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1690 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1689
                    self.lambda_param_with_default()
                    self.state = 1692 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==89):
                        break

                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53 or _la==69:
                    self.state = 1694
                    self.lambda_star_etc()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1697
                self.lambda_star_etc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_slash_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_slash_no_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_slash_no_default" ):
                listener.enterLambda_slash_no_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_slash_no_default" ):
                listener.exitLambda_slash_no_default(self)




    def lambda_slash_no_default(self):

        localctx = PythonParser.Lambda_slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_lambda_slash_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1701 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1700
                self.lambda_param_no_default()
                self.state = 1703 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==89):
                    break

            self.state = 1705
            self.match(PythonParser.SLASH)
            self.state = 1707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1706
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_slash_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def lambda_param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_with_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_slash_with_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_slash_with_default" ):
                listener.enterLambda_slash_with_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_slash_with_default" ):
                listener.exitLambda_slash_with_default(self)




    def lambda_slash_with_default(self):

        localctx = PythonParser.Lambda_slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_lambda_slash_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1709
                    self.lambda_param_no_default() 
                self.state = 1714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

            self.state = 1716 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1715
                self.lambda_param_with_default()
                self.state = 1718 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==89):
                    break

            self.state = 1720
            self.match(PythonParser.SLASH)
            self.state = 1722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1721
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_star_etcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,0)


        def lambda_param_maybe_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_maybe_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_maybe_defaultContext,i)


        def lambda_kwds(self):
            return self.getTypedRuleContext(PythonParser.Lambda_kwdsContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_star_etc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_star_etc" ):
                listener.enterLambda_star_etc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_star_etc" ):
                listener.exitLambda_star_etc(self)




    def lambda_star_etc(self):

        localctx = PythonParser.Lambda_star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_lambda_star_etc)
        self._la = 0 # Token type
        try:
            self.state = 1746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1724
                self.match(PythonParser.STAR)
                self.state = 1725
                self.lambda_param_no_default()
                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==89:
                    self.state = 1726
                    self.lambda_param_maybe_default()
                    self.state = 1731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1732
                    self.lambda_kwds()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.match(PythonParser.STAR)
                self.state = 1736
                self.match(PythonParser.COMMA)
                self.state = 1738 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1737
                    self.lambda_param_maybe_default()
                    self.state = 1740 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==89):
                        break

                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1742
                    self.lambda_kwds()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1745
                self.lambda_kwds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_kwdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_kwds

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_kwds" ):
                listener.enterLambda_kwds(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_kwds" ):
                listener.exitLambda_kwds(self)




    def lambda_kwds(self):

        localctx = PythonParser.Lambda_kwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_lambda_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.match(PythonParser.DOUBLESTAR)
            self.state = 1749
            self.lambda_param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_no_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_param_no_default" ):
                listener.enterLambda_param_no_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_param_no_default" ):
                listener.exitLambda_param_no_default(self)




    def lambda_param_no_default(self):

        localctx = PythonParser.Lambda_param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_lambda_param_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1751
            self.lambda_param()
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1752
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_with_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_param_with_default" ):
                listener.enterLambda_param_with_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_param_with_default" ):
                listener.exitLambda_param_with_default(self)




    def lambda_param_with_default(self):

        localctx = PythonParser.Lambda_param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_lambda_param_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self.lambda_param()
            self.state = 1756
            self.default_assignment()
            self.state = 1758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1757
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_maybe_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_maybe_default

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_param_maybe_default" ):
                listener.enterLambda_param_maybe_default(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_param_maybe_default" ):
                listener.exitLambda_param_maybe_default(self)




    def lambda_param_maybe_default(self):

        localctx = PythonParser.Lambda_param_maybe_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_lambda_param_maybe_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1760
            self.lambda_param()
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1761
                self.default_assignment()


            self.state = 1765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1764
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambda_param" ):
                listener.enterLambda_param(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambda_param" ):
                listener.exitLambda_param(self)




    def lambda_param(self):

        localctx = PythonParser.Lambda_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_lambda_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1767
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_middleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(PythonParser.Fstring_replacement_fieldContext,0)


        def FSTRING_MIDDLE(self):
            return self.getToken(PythonParser.FSTRING_MIDDLE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_fstring_middle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFstring_middle" ):
                listener.enterFstring_middle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFstring_middle" ):
                listener.exitFstring_middle(self)




    def fstring_middle(self):

        localctx = PythonParser.Fstring_middleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_fstring_middle)
        try:
            self.state = 1771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1769
                self.fstring_replacement_field()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1770
                self.match(PythonParser.FSTRING_MIDDLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_replacement_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def fstring_conversion(self):
            return self.getTypedRuleContext(PythonParser.Fstring_conversionContext,0)


        def fstring_full_format_spec(self):
            return self.getTypedRuleContext(PythonParser.Fstring_full_format_specContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_replacement_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFstring_replacement_field" ):
                listener.enterFstring_replacement_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFstring_replacement_field" ):
                listener.exitFstring_replacement_field(self)




    def fstring_replacement_field(self):

        localctx = PythonParser.Fstring_replacement_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_fstring_replacement_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1773
            self.match(PythonParser.LBRACE)
            self.state = 1776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [40]:
                self.state = 1774
                self.yield_expr()
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 53, 65, 86, 89, 90, 91]:
                self.state = 1775
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 1778
                self.match(PythonParser.EQUAL)


            self.state = 1782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==88:
                self.state = 1781
                self.fstring_conversion()


            self.state = 1785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 1784
                self.fstring_full_format_spec()


            self.state = 1787
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION(self):
            return self.getToken(PythonParser.EXCLAMATION, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_fstring_conversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFstring_conversion" ):
                listener.enterFstring_conversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFstring_conversion" ):
                listener.exitFstring_conversion(self)




    def fstring_conversion(self):

        localctx = PythonParser.Fstring_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_fstring_conversion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1789
            self.match(PythonParser.EXCLAMATION)
            self.state = 1790
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_full_format_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def fstring_format_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Fstring_format_specContext)
            else:
                return self.getTypedRuleContext(PythonParser.Fstring_format_specContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_full_format_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFstring_full_format_spec" ):
                listener.enterFstring_full_format_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFstring_full_format_spec" ):
                listener.exitFstring_full_format_spec(self)




    def fstring_full_format_spec(self):

        localctx = PythonParser.Fstring_full_format_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_fstring_full_format_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.match(PythonParser.COLON)
            self.state = 1796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==43:
                self.state = 1793
                self.fstring_format_spec()
                self.state = 1798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_format_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_MIDDLE(self):
            return self.getToken(PythonParser.FSTRING_MIDDLE, 0)

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(PythonParser.Fstring_replacement_fieldContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_format_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFstring_format_spec" ):
                listener.enterFstring_format_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFstring_format_spec" ):
                listener.exitFstring_format_spec(self)




    def fstring_format_spec(self):

        localctx = PythonParser.Fstring_format_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_fstring_format_spec)
        try:
            self.state = 1801
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1799
                self.match(PythonParser.FSTRING_MIDDLE)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1800
                self.fstring_replacement_field()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FstringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_START(self):
            return self.getToken(PythonParser.FSTRING_START, 0)

        def FSTRING_END(self):
            return self.getToken(PythonParser.FSTRING_END, 0)

        def fstring_middle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Fstring_middleContext)
            else:
                return self.getTypedRuleContext(PythonParser.Fstring_middleContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFstring" ):
                listener.enterFstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFstring" ):
                listener.exitFstring(self)




    def fstring(self):

        localctx = PythonParser.FstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_fstring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(PythonParser.FSTRING_START)
            self.state = 1807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4 or _la==43:
                self.state = 1804
                self.fstring_middle()
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1810
            self.match(PythonParser.FSTRING_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(PythonParser.STRING, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString" ):
                listener.enterString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString" ):
                listener.exitString(self)




    def string(self):

        localctx = PythonParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.match(PythonParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.FstringContext)
            else:
                return self.getTypedRuleContext(PythonParser.FstringContext,i)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonParser.StringContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_strings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrings" ):
                listener.enterStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrings" ):
                listener.exitStrings(self)




    def strings(self):

        localctx = PythonParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_strings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1816 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1816
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3]:
                        self.state = 1814
                        self.fstring()
                        pass
                    elif token in [91]:
                        self.state = 1815
                        self.string()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1818 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)




    def list_(self):

        localctx = PythonParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            self.match(PythonParser.LSQB)
            self.state = 1822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 1821
                self.star_named_expressions()


            self.state = 1824
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def star_named_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = PythonParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(PythonParser.LPAR)
            self.state = 1832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                self.state = 1827
                self.star_named_expression()
                self.state = 1828
                self.match(PythonParser.COMMA)
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537665) != 0):
                    self.state = 1829
                    self.star_named_expressions()




            self.state = 1834
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)




    def set_(self):

        localctx = PythonParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1836
            self.match(PythonParser.LBRACE)
            self.state = 1837
            self.star_named_expressions()
            self.state = 1838
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def double_starred_kvpairs(self):
            return self.getTypedRuleContext(PythonParser.Double_starred_kvpairsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)




    def dict_(self):

        localctx = PythonParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1840
            self.match(PythonParser.LBRACE)
            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 6770809800558792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                self.state = 1841
                self.double_starred_kvpairs()


            self.state = 1844
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_starred_kvpairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def double_starred_kvpair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Double_starred_kvpairContext)
            else:
                return self.getTypedRuleContext(PythonParser.Double_starred_kvpairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_double_starred_kvpairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_starred_kvpairs" ):
                listener.enterDouble_starred_kvpairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_starred_kvpairs" ):
                listener.exitDouble_starred_kvpairs(self)




    def double_starred_kvpairs(self):

        localctx = PythonParser.Double_starred_kvpairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_double_starred_kvpairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1846
            self.double_starred_kvpair()
            self.state = 1851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1847
                    self.match(PythonParser.COMMA)
                    self.state = 1848
                    self.double_starred_kvpair() 
                self.state = 1853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

            self.state = 1855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1854
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_starred_kvpairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def kvpair(self):
            return self.getTypedRuleContext(PythonParser.KvpairContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_double_starred_kvpair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDouble_starred_kvpair" ):
                listener.enterDouble_starred_kvpair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDouble_starred_kvpair" ):
                listener.exitDouble_starred_kvpair(self)




    def double_starred_kvpair(self):

        localctx = PythonParser.Double_starred_kvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_double_starred_kvpair)
        try:
            self.state = 1860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1857
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1858
                self.bitwise_or(0)
                pass
            elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1859
                self.kvpair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvpairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_kvpair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKvpair" ):
                listener.enterKvpair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKvpair" ):
                listener.exitKvpair(self)




    def kvpair(self):

        localctx = PythonParser.KvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_kvpair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1862
            self.expression()
            self.state = 1863
            self.match(PythonParser.COLON)
            self.state = 1864
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_if_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_if_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.For_if_clauseContext)
            else:
                return self.getTypedRuleContext(PythonParser.For_if_clauseContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_for_if_clauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_if_clauses" ):
                listener.enterFor_if_clauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_if_clauses" ):
                listener.exitFor_if_clauses(self)




    def for_if_clauses(self):

        localctx = PythonParser.For_if_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_for_if_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1866
                self.for_if_clause()
                self.state = 1869 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==23 or _la==36):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_if_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(PythonParser.Star_targetsContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.DisjunctionContext,i)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.IF)
            else:
                return self.getToken(PythonParser.IF, i)

        def getRuleIndex(self):
            return PythonParser.RULE_for_if_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_if_clause" ):
                listener.enterFor_if_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_if_clause" ):
                listener.exitFor_if_clause(self)




    def for_if_clause(self):

        localctx = PythonParser.For_if_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_for_if_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==36:
                self.state = 1871
                self.match(PythonParser.ASYNC)


            self.state = 1874
            self.match(PythonParser.FOR)
            self.state = 1875
            self.star_targets()
            self.state = 1876
            self.match(PythonParser.IN)
            self.state = 1877
            self.disjunction()
            self.state = 1882
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==38:
                self.state = 1878
                self.match(PythonParser.IF)
                self.state = 1879
                self.disjunction()
                self.state = 1884
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_listcomp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListcomp" ):
                listener.enterListcomp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListcomp" ):
                listener.exitListcomp(self)




    def listcomp(self):

        localctx = PythonParser.ListcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_listcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            self.match(PythonParser.LSQB)
            self.state = 1886
            self.named_expression()
            self.state = 1887
            self.for_if_clauses()
            self.state = 1888
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_setcomp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetcomp" ):
                listener.enterSetcomp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetcomp" ):
                listener.exitSetcomp(self)




    def setcomp(self):

        localctx = PythonParser.SetcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_setcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1890
            self.match(PythonParser.LBRACE)
            self.state = 1891
            self.named_expression()
            self.state = 1892
            self.for_if_clauses()
            self.state = 1893
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_genexp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenexp" ):
                listener.enterGenexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenexp" ):
                listener.exitGenexp(self)




    def genexp(self):

        localctx = PythonParser.GenexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_genexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.match(PythonParser.LPAR)
            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 1896
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.state = 1897
                self.expression()
                pass


            self.state = 1900
            self.for_if_clauses()
            self.state = 1901
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def kvpair(self):
            return self.getTypedRuleContext(PythonParser.KvpairContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dictcomp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictcomp" ):
                listener.enterDictcomp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictcomp" ):
                listener.exitDictcomp(self)




    def dictcomp(self):

        localctx = PythonParser.DictcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_dictcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1903
            self.match(PythonParser.LBRACE)
            self.state = 1904
            self.kvpair()
            self.state = 1905
            self.for_if_clauses()
            self.state = 1906
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(PythonParser.ArgsContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = PythonParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1908
            self.args()
            self.state = 1910
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1909
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def starred_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Starred_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Starred_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def kwargs(self):
            return self.getTypedRuleContext(PythonParser.KwargsContext,0)


        def assignment_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Assignment_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)




    def args(self):

        localctx = PythonParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_args)
        try:
            self.state = 1937
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1917
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53]:
                    self.state = 1912
                    self.starred_expression()
                    pass
                elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                    self.state = 1915
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                    if la_ == 1:
                        self.state = 1913
                        self.assignment_expression()
                        pass

                    elif la_ == 2:
                        self.state = 1914
                        self.expression()
                        pass


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1919
                        self.match(PythonParser.COMMA)
                        self.state = 1925
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [53]:
                            self.state = 1920
                            self.starred_expression()
                            pass
                        elif token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                            self.state = 1923
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
                            if la_ == 1:
                                self.state = 1921
                                self.assignment_expression()
                                pass

                            elif la_ == 2:
                                self.state = 1922
                                self.expression()
                                pass


                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1931
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

                self.state = 1934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 1932
                    self.match(PythonParser.COMMA)
                    self.state = 1933
                    self.kwargs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1936
                self.kwargs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kwarg_or_starred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Kwarg_or_starredContext)
            else:
                return self.getTypedRuleContext(PythonParser.Kwarg_or_starredContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def kwarg_or_double_starred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Kwarg_or_double_starredContext)
            else:
                return self.getTypedRuleContext(PythonParser.Kwarg_or_double_starredContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)




    def kwargs(self):

        localctx = PythonParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_kwargs)
        try:
            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1939
                self.kwarg_or_starred()
                self.state = 1944
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1940
                        self.match(PythonParser.COMMA)
                        self.state = 1941
                        self.kwarg_or_starred() 
                    self.state = 1946
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                self.state = 1956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 1947
                    self.match(PythonParser.COMMA)
                    self.state = 1948
                    self.kwarg_or_double_starred()
                    self.state = 1953
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1949
                            self.match(PythonParser.COMMA)
                            self.state = 1950
                            self.kwarg_or_double_starred() 
                        self.state = 1955
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,253,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1958
                self.kwarg_or_double_starred()
                self.state = 1963
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1959
                        self.match(PythonParser.COMMA)
                        self.state = 1960
                        self.kwarg_or_double_starred() 
                    self.state = 1965
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Starred_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_starred_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStarred_expression" ):
                listener.enterStarred_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStarred_expression" ):
                listener.exitStarred_expression(self)




    def starred_expression(self):

        localctx = PythonParser.Starred_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_starred_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1968
            self.match(PythonParser.STAR)
            self.state = 1969
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwarg_or_starredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def starred_expression(self):
            return self.getTypedRuleContext(PythonParser.Starred_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwarg_or_starred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwarg_or_starred" ):
                listener.enterKwarg_or_starred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwarg_or_starred" ):
                listener.exitKwarg_or_starred(self)




    def kwarg_or_starred(self):

        localctx = PythonParser.Kwarg_or_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_kwarg_or_starred)
        try:
            self.state = 1975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1971
                self.match(PythonParser.NAME)
                self.state = 1972
                self.match(PythonParser.EQUAL)
                self.state = 1973
                self.expression()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1974
                self.starred_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwarg_or_double_starredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_kwarg_or_double_starred

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwarg_or_double_starred" ):
                listener.enterKwarg_or_double_starred(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwarg_or_double_starred" ):
                listener.exitKwarg_or_double_starred(self)




    def kwarg_or_double_starred(self):

        localctx = PythonParser.Kwarg_or_double_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_kwarg_or_double_starred)
        try:
            self.state = 1982
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1977
                self.match(PythonParser.NAME)
                self.state = 1978
                self.match(PythonParser.EQUAL)
                self.state = 1979
                self.expression()
                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1980
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1981
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_targets" ):
                listener.enterStar_targets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_targets" ):
                listener.exitStar_targets(self)




    def star_targets(self):

        localctx = PythonParser.Star_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_star_targets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            self.star_target()
            self.state = 1989
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1985
                    self.match(PythonParser.COMMA)
                    self.state = 1986
                    self.star_target() 
                self.state = 1991
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

            self.state = 1993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1992
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targets_list_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets_list_seq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_targets_list_seq" ):
                listener.enterStar_targets_list_seq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_targets_list_seq" ):
                listener.exitStar_targets_list_seq(self)




    def star_targets_list_seq(self):

        localctx = PythonParser.Star_targets_list_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_star_targets_list_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1995
            self.star_target()
            self.state = 1998 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1996
                    self.match(PythonParser.COMMA)
                    self.state = 1997
                    self.star_target()

                else:
                    raise NoViableAltException(self)
                self.state = 2000 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,261,self._ctx)

            self.state = 2003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 2002
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targets_tuple_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets_tuple_seq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_targets_tuple_seq" ):
                listener.enterStar_targets_tuple_seq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_targets_tuple_seq" ):
                listener.exitStar_targets_tuple_seq(self)




    def star_targets_tuple_seq(self):

        localctx = PythonParser.Star_targets_tuple_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_star_targets_tuple_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2005
            self.star_target()
            self.state = 2016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.state = 2006
                self.match(PythonParser.COMMA)
                pass

            elif la_ == 2:
                self.state = 2009 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2007
                        self.match(PythonParser.COMMA)
                        self.state = 2008
                        self.star_target()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2011 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,263,self._ctx)

                self.state = 2014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 2013
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def star_target(self):
            return self.getTypedRuleContext(PythonParser.Star_targetContext,0)


        def target_with_star_atom(self):
            return self.getTypedRuleContext(PythonParser.Target_with_star_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_target" ):
                listener.enterStar_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_target" ):
                listener.exitStar_target(self)




    def star_target(self):

        localctx = PythonParser.Star_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_star_target)
        try:
            self.state = 2021
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2018
                self.match(PythonParser.STAR)

                self.state = 2019
                self.star_target()
                pass
            elif token in [3, 6, 11, 16, 41, 42, 43, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2020
                self.target_with_star_atom()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_with_star_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_atom(self):
            return self.getTypedRuleContext(PythonParser.Star_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_target_with_star_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_with_star_atom" ):
                listener.enterTarget_with_star_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_with_star_atom" ):
                listener.exitTarget_with_star_atom(self)




    def target_with_star_atom(self):

        localctx = PythonParser.Target_with_star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_target_with_star_atom)
        try:
            self.state = 2033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2023
                self.t_primary(0)
                self.state = 2030
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [47]:
                    self.state = 2024
                    self.match(PythonParser.DOT)
                    self.state = 2025
                    self.match(PythonParser.NAME)
                    pass
                elif token in [42]:
                    self.state = 2026
                    self.match(PythonParser.LSQB)
                    self.state = 2027
                    self.slices()
                    self.state = 2028
                    self.match(PythonParser.RSQB)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2032
                self.star_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def target_with_star_atom(self):
            return self.getTypedRuleContext(PythonParser.Target_with_star_atomContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def star_targets_tuple_seq(self):
            return self.getTypedRuleContext(PythonParser.Star_targets_tuple_seqContext,0)


        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_targets_list_seq(self):
            return self.getTypedRuleContext(PythonParser.Star_targets_list_seqContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_atom" ):
                listener.enterStar_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_atom" ):
                listener.exitStar_atom(self)




    def star_atom(self):

        localctx = PythonParser.Star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_star_atom)
        self._la = 0 # Token type
        try:
            self.state = 2050
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2035
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2036
                self.match(PythonParser.LPAR)
                self.state = 2037
                self.target_with_star_atom()
                self.state = 2038
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2040
                self.match(PythonParser.LPAR)
                self.state = 2042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9022592417597512) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 57) != 0):
                    self.state = 2041
                    self.star_targets_tuple_seq()


                self.state = 2044
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2045
                self.match(PythonParser.LSQB)
                self.state = 2047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 9022592417597512) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 57) != 0):
                    self.state = 2046
                    self.star_targets_list_seq()


                self.state = 2049
                self.match(PythonParser.RSQB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(PythonParser.Single_subscript_attribute_targetContext,0)


        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def single_target(self):
            return self.getTypedRuleContext(PythonParser.Single_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_single_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_target" ):
                listener.enterSingle_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_target" ):
                listener.exitSingle_target(self)




    def single_target(self):

        localctx = PythonParser.Single_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_single_target)
        try:
            self.state = 2058
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2052
                self.single_subscript_attribute_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2053
                self.match(PythonParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2054
                self.match(PythonParser.LPAR)
                self.state = 2055
                self.single_target()
                self.state = 2056
                self.match(PythonParser.RPAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_subscript_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_single_subscript_attribute_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_subscript_attribute_target" ):
                listener.enterSingle_subscript_attribute_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_subscript_attribute_target" ):
                listener.exitSingle_subscript_attribute_target(self)




    def single_subscript_attribute_target(self):

        localctx = PythonParser.Single_subscript_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_single_subscript_attribute_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2060
            self.t_primary(0)
            self.state = 2067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.state = 2061
                self.match(PythonParser.DOT)
                self.state = 2062
                self.match(PythonParser.NAME)
                pass
            elif token in [42]:
                self.state = 2063
                self.match(PythonParser.LSQB)
                self.state = 2064
                self.slices()
                self.state = 2065
                self.match(PythonParser.RSQB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class T_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_t_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterT_primary" ):
                listener.enterT_primary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitT_primary" ):
                listener.exitT_primary(self)



    def t_primary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.T_primaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 374
        self.enterRecursionRule(localctx, 374, self.RULE_t_primary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2089
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,276,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.T_primaryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_t_primary)
                    self.state = 2072
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2085
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                    if la_ == 1:
                        self.state = 2073
                        self.match(PythonParser.DOT)
                        self.state = 2074
                        self.match(PythonParser.NAME)
                        pass

                    elif la_ == 2:
                        self.state = 2075
                        self.match(PythonParser.LSQB)
                        self.state = 2076
                        self.slices()
                        self.state = 2077
                        self.match(PythonParser.RSQB)
                        pass

                    elif la_ == 3:
                        self.state = 2079
                        self.genexp()
                        pass

                    elif la_ == 4:
                        self.state = 2080
                        self.match(PythonParser.LPAR)
                        self.state = 2082
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15778009055299784) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 119537681) != 0):
                            self.state = 2081
                            self.arguments()


                        self.state = 2084
                        self.match(PythonParser.RPAR)
                        pass

             
                self.state = 2091
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,276,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Del_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def del_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Del_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Del_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_del_targets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_targets" ):
                listener.enterDel_targets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_targets" ):
                listener.exitDel_targets(self)




    def del_targets(self):

        localctx = PythonParser.Del_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_del_targets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2092
            self.del_target()
            self.state = 2097
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,277,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2093
                    self.match(PythonParser.COMMA)
                    self.state = 2094
                    self.del_target() 
                self.state = 2099
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,277,self._ctx)

            self.state = 2101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 2100
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def del_t_atom(self):
            return self.getTypedRuleContext(PythonParser.Del_t_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_del_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_target" ):
                listener.enterDel_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_target" ):
                listener.exitDel_target(self)




    def del_target(self):

        localctx = PythonParser.Del_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_del_target)
        try:
            self.state = 2113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,280,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2103
                self.t_primary(0)
                self.state = 2110
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [47]:
                    self.state = 2104
                    self.match(PythonParser.DOT)
                    self.state = 2105
                    self.match(PythonParser.NAME)
                    pass
                elif token in [42]:
                    self.state = 2106
                    self.match(PythonParser.LSQB)
                    self.state = 2107
                    self.slices()
                    self.state = 2108
                    self.match(PythonParser.RSQB)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2112
                self.del_t_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_t_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def del_target(self):
            return self.getTypedRuleContext(PythonParser.Del_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def del_targets(self):
            return self.getTypedRuleContext(PythonParser.Del_targetsContext,0)


        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_del_t_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_t_atom" ):
                listener.enterDel_t_atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_t_atom" ):
                listener.exitDel_t_atom(self)




    def del_t_atom(self):

        localctx = PythonParser.Del_t_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_del_t_atom)
        self._la = 0 # Token type
        try:
            self.state = 2130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2115
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2116
                self.match(PythonParser.LPAR)
                self.state = 2117
                self.del_target()
                self.state = 2118
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2120
                self.match(PythonParser.LPAR)
                self.state = 2122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162856520) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 57) != 0):
                    self.state = 2121
                    self.del_targets()


                self.state = 2124
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2125
                self.match(PythonParser.LSQB)
                self.state = 2127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 15393162856520) != 0) or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 57) != 0):
                    self.state = 2126
                    self.del_targets()


                self.state = 2129
                self.match(PythonParser.RSQB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_expressions" ):
                listener.enterType_expressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_expressions" ):
                listener.exitType_expressions(self)




    def type_expressions(self):

        localctx = PythonParser.Type_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_type_expressions)
        self._la = 0 # Token type
        try:
            self.state = 2163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3, 6, 7, 11, 16, 24, 34, 41, 42, 43, 51, 52, 65, 86, 89, 90, 91]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2132
                self.expression()
                self.state = 2137
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,284,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2133
                        self.match(PythonParser.COMMA)
                        self.state = 2134
                        self.expression() 
                    self.state = 2139
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,284,self._ctx)

                self.state = 2152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 2140
                    self.match(PythonParser.COMMA)
                    self.state = 2150
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [53]:
                        self.state = 2141
                        self.match(PythonParser.STAR)
                        self.state = 2142
                        self.expression()
                        self.state = 2146
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==49:
                            self.state = 2143
                            self.match(PythonParser.COMMA)
                            self.state = 2144
                            self.match(PythonParser.DOUBLESTAR)
                            self.state = 2145
                            self.expression()


                        pass
                    elif token in [69]:
                        self.state = 2148
                        self.match(PythonParser.DOUBLESTAR)
                        self.state = 2149
                        self.expression()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2154
                self.match(PythonParser.STAR)
                self.state = 2155
                self.expression()
                self.state = 2159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 2156
                    self.match(PythonParser.COMMA)
                    self.state = 2157
                    self.match(PythonParser.DOUBLESTAR)
                    self.state = 2158
                    self.expression()


                pass
            elif token in [69]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2161
                self.match(PythonParser.DOUBLESTAR)
                self.state = 2162
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_type_commentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_func_type_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunc_type_comment" ):
                listener.enterFunc_type_comment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunc_type_comment" ):
                listener.exitFunc_type_comment(self)




    def func_type_comment(self):

        localctx = PythonParser.Func_type_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_func_type_comment)
        try:
            self.state = 2168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2165
                self.match(PythonParser.NEWLINE)
                self.state = 2166
                self.match(PythonParser.TYPE_COMMENT)
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2167
                self.match(PythonParser.TYPE_COMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoft_kw_match" ):
                listener.enterSoft_kw_match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoft_kw_match" ):
                listener.exitSoft_kw_match(self)




    def soft_kw_match(self):

        localctx = PythonParser.Soft_kw_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_soft_kw_match)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2170
            if not self.isEqualCurrentTokenText("match"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualCurrentTokenText(\"match\")")
            self.state = 2171
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_case

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoft_kw_case" ):
                listener.enterSoft_kw_case(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoft_kw_case" ):
                listener.exitSoft_kw_case(self)




    def soft_kw_case(self):

        localctx = PythonParser.Soft_kw_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_soft_kw_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2173
            if not self.isEqualCurrentTokenText("case"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualCurrentTokenText(\"case\")")
            self.state = 2174
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_wildcard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoft_kw_wildcard" ):
                listener.enterSoft_kw_wildcard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoft_kw_wildcard" ):
                listener.exitSoft_kw_wildcard(self)




    def soft_kw_wildcard(self):

        localctx = PythonParser.Soft_kw_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_soft_kw_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2176
            if not self.isEqualCurrentTokenText("_"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualCurrentTokenText(\"_\")")
            self.state = 2177
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoft_kw_type" ):
                listener.enterSoft_kw_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoft_kw_type" ):
                listener.exitSoft_kw_type(self)




    def soft_kw_type(self):

        localctx = PythonParser.Soft_kw_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_soft_kw_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2179
            if not self.isEqualCurrentTokenText("type"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "self.isEqualCurrentTokenText(\"type\")")
            self.state = 2180
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[29] = self.dotted_name_sempred
        self._predicates[79] = self.pattern_capture_target_sempred
        self._predicates[127] = self.bitwise_or_sempred
        self._predicates[128] = self.bitwise_xor_sempred
        self._predicates[129] = self.bitwise_and_sempred
        self._predicates[130] = self.shift_expr_sempred
        self._predicates[131] = self.sum_sempred
        self._predicates[132] = self.term_sempred
        self._predicates[136] = self.primary_sempred
        self._predicates[187] = self.t_primary_sempred
        self._predicates[193] = self.soft_kw_match_sempred
        self._predicates[194] = self.soft_kw_case_sempred
        self._predicates[195] = self.soft_kw_wildcard_sempred
        self._predicates[196] = self.soft_kw_type_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def pattern_capture_target_sempred(self, localctx:Pattern_capture_targetContext, predIndex:int):
            if predIndex == 1:
                return self.isnotEqualCurrentTokenText("_")
         

    def bitwise_or_sempred(self, localctx:Bitwise_orContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def bitwise_xor_sempred(self, localctx:Bitwise_xorContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def bitwise_and_sempred(self, localctx:Bitwise_andContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def shift_expr_sempred(self, localctx:Shift_exprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def sum_sempred(self, localctx:SumContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def primary_sempred(self, localctx:PrimaryContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def t_primary_sempred(self, localctx:T_primaryContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

    def soft_kw_match_sempred(self, localctx:Soft_kw_matchContext, predIndex:int):
            if predIndex == 10:
                return self.isEqualCurrentTokenText("match")
         

    def soft_kw_case_sempred(self, localctx:Soft_kw_caseContext, predIndex:int):
            if predIndex == 11:
                return self.isEqualCurrentTokenText("case")
         

    def soft_kw_wildcard_sempred(self, localctx:Soft_kw_wildcardContext, predIndex:int):
            if predIndex == 12:
                return self.isEqualCurrentTokenText("_")
         

    def soft_kw_type_sempred(self, localctx:Soft_kw_typeContext, predIndex:int):
            if predIndex == 13:
                return self.isEqualCurrentTokenText("type")
         




PythonParserBase.py
##
## Project      : a helper class to implement specific PEG grammar expressions in an ANTLR4 grammar
##
## Developed by : Robert Einhorn
##

## Related PEG grammar expressions:
## &e
## https://peps.python.org/pep-0617/#e-3
##
## !e
## https://peps.python.org/pep-0617/#e-4

from antlr4 import InputStream, Parser
from typing import TextIO
import sys

class PythonParserBase(Parser):
    def __init__(self, input: InputStream, output: TextIO = sys.stdout):
        super().__init__(input, output)

    def isEqualCurrentTokenText(self, tokenText: str) -> bool:
        return self.getCurrentToken().text == tokenText

    def isnotEqualCurrentTokenText(self, tokenText: str) -> bool:
        return not self.isEqualCurrentTokenText(tokenText) # for compatibility with the '!' logical operator in other languages


PythonParserListener.py
# Generated from PythonParser.g4 by ANTLR 4.13.1
from antlr4 import *

if "." in __name__:
    from .PythonParser import PythonParser
else:
    from PythonParser import PythonParser


# This class defines a complete listener for a parse tree produced by PythonParser.
class PythonParserListener(ParseTreeListener):

    # Enter a parse tree produced by PythonParser#file_input.
    def enterFile_input(self, ctx: PythonParser.File_inputContext):
        pass

    # Exit a parse tree produced by PythonParser#file_input.
    def exitFile_input(self, ctx: PythonParser.File_inputContext):
        pass

    # Enter a parse tree produced by PythonParser#interactive.
    def enterInteractive(self, ctx: PythonParser.InteractiveContext):
        pass

    # Exit a parse tree produced by PythonParser#interactive.
    def exitInteractive(self, ctx: PythonParser.InteractiveContext):
        pass

    # Enter a parse tree produced by PythonParser#eval.
    def enterEval(self, ctx: PythonParser.EvalContext):
        pass

    # Exit a parse tree produced by PythonParser#eval.
    def exitEval(self, ctx: PythonParser.EvalContext):
        pass

    # Enter a parse tree produced by PythonParser#func_type.
    def enterFunc_type(self, ctx: PythonParser.Func_typeContext):
        pass

    # Exit a parse tree produced by PythonParser#func_type.
    def exitFunc_type(self, ctx: PythonParser.Func_typeContext):
        pass

    # Enter a parse tree produced by PythonParser#fstring_input.
    def enterFstring_input(self, ctx: PythonParser.Fstring_inputContext):
        pass

    # Exit a parse tree produced by PythonParser#fstring_input.
    def exitFstring_input(self, ctx: PythonParser.Fstring_inputContext):
        pass

    # Enter a parse tree produced by PythonParser#statements.
    def enterStatements(self, ctx: PythonParser.StatementsContext):
        pass

    # Exit a parse tree produced by PythonParser#statements.
    def exitStatements(self, ctx: PythonParser.StatementsContext):
        pass

    # Enter a parse tree produced by PythonParser#statement.
    def enterStatement(self, ctx: PythonParser.StatementContext):
        pass

    # Exit a parse tree produced by PythonParser#statement.
    def exitStatement(self, ctx: PythonParser.StatementContext):
        pass

    # Enter a parse tree produced by PythonParser#statement_newline.
    def enterStatement_newline(self, ctx: PythonParser.Statement_newlineContext):
        pass

    # Exit a parse tree produced by PythonParser#statement_newline.
    def exitStatement_newline(self, ctx: PythonParser.Statement_newlineContext):
        pass

    # Enter a parse tree produced by PythonParser#simple_stmts.
    def enterSimple_stmts(self, ctx: PythonParser.Simple_stmtsContext):
        pass

    # Exit a parse tree produced by PythonParser#simple_stmts.
    def exitSimple_stmts(self, ctx: PythonParser.Simple_stmtsContext):
        pass

    # Enter a parse tree produced by PythonParser#simple_stmt.
    def enterSimple_stmt(self, ctx: PythonParser.Simple_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#simple_stmt.
    def exitSimple_stmt(self, ctx: PythonParser.Simple_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#compound_stmt.
    def enterCompound_stmt(self, ctx: PythonParser.Compound_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#compound_stmt.
    def exitCompound_stmt(self, ctx: PythonParser.Compound_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#assignment.
    def enterAssignment(self, ctx: PythonParser.AssignmentContext):
        pass

    # Exit a parse tree produced by PythonParser#assignment.
    def exitAssignment(self, ctx: PythonParser.AssignmentContext):
        pass

    # Enter a parse tree produced by PythonParser#annotated_rhs.
    def enterAnnotated_rhs(self, ctx: PythonParser.Annotated_rhsContext):
        pass

    # Exit a parse tree produced by PythonParser#annotated_rhs.
    def exitAnnotated_rhs(self, ctx: PythonParser.Annotated_rhsContext):
        pass

    # Enter a parse tree produced by PythonParser#augassign.
    def enterAugassign(self, ctx: PythonParser.AugassignContext):
        pass

    # Exit a parse tree produced by PythonParser#augassign.
    def exitAugassign(self, ctx: PythonParser.AugassignContext):
        pass

    # Enter a parse tree produced by PythonParser#return_stmt.
    def enterReturn_stmt(self, ctx: PythonParser.Return_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#return_stmt.
    def exitReturn_stmt(self, ctx: PythonParser.Return_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#raise_stmt.
    def enterRaise_stmt(self, ctx: PythonParser.Raise_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#raise_stmt.
    def exitRaise_stmt(self, ctx: PythonParser.Raise_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#global_stmt.
    def enterGlobal_stmt(self, ctx: PythonParser.Global_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#global_stmt.
    def exitGlobal_stmt(self, ctx: PythonParser.Global_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#nonlocal_stmt.
    def enterNonlocal_stmt(self, ctx: PythonParser.Nonlocal_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#nonlocal_stmt.
    def exitNonlocal_stmt(self, ctx: PythonParser.Nonlocal_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#del_stmt.
    def enterDel_stmt(self, ctx: PythonParser.Del_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#del_stmt.
    def exitDel_stmt(self, ctx: PythonParser.Del_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#yield_stmt.
    def enterYield_stmt(self, ctx: PythonParser.Yield_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#yield_stmt.
    def exitYield_stmt(self, ctx: PythonParser.Yield_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#assert_stmt.
    def enterAssert_stmt(self, ctx: PythonParser.Assert_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#assert_stmt.
    def exitAssert_stmt(self, ctx: PythonParser.Assert_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#import_stmt.
    def enterImport_stmt(self, ctx: PythonParser.Import_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#import_stmt.
    def exitImport_stmt(self, ctx: PythonParser.Import_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#import_name.
    def enterImport_name(self, ctx: PythonParser.Import_nameContext):
        pass

    # Exit a parse tree produced by PythonParser#import_name.
    def exitImport_name(self, ctx: PythonParser.Import_nameContext):
        pass

    # Enter a parse tree produced by PythonParser#import_from.
    def enterImport_from(self, ctx: PythonParser.Import_fromContext):
        pass

    # Exit a parse tree produced by PythonParser#import_from.
    def exitImport_from(self, ctx: PythonParser.Import_fromContext):
        pass

    # Enter a parse tree produced by PythonParser#import_from_targets.
    def enterImport_from_targets(self, ctx: PythonParser.Import_from_targetsContext):
        pass

    # Exit a parse tree produced by PythonParser#import_from_targets.
    def exitImport_from_targets(self, ctx: PythonParser.Import_from_targetsContext):
        pass

    # Enter a parse tree produced by PythonParser#import_from_as_names.
    def enterImport_from_as_names(self, ctx: PythonParser.Import_from_as_namesContext):
        pass

    # Exit a parse tree produced by PythonParser#import_from_as_names.
    def exitImport_from_as_names(self, ctx: PythonParser.Import_from_as_namesContext):
        pass

    # Enter a parse tree produced by PythonParser#import_from_as_name.
    def enterImport_from_as_name(self, ctx: PythonParser.Import_from_as_nameContext):
        pass

    # Exit a parse tree produced by PythonParser#import_from_as_name.
    def exitImport_from_as_name(self, ctx: PythonParser.Import_from_as_nameContext):
        pass

    # Enter a parse tree produced by PythonParser#dotted_as_names.
    def enterDotted_as_names(self, ctx: PythonParser.Dotted_as_namesContext):
        pass

    # Exit a parse tree produced by PythonParser#dotted_as_names.
    def exitDotted_as_names(self, ctx: PythonParser.Dotted_as_namesContext):
        pass

    # Enter a parse tree produced by PythonParser#dotted_as_name.
    def enterDotted_as_name(self, ctx: PythonParser.Dotted_as_nameContext):
        pass

    # Exit a parse tree produced by PythonParser#dotted_as_name.
    def exitDotted_as_name(self, ctx: PythonParser.Dotted_as_nameContext):
        pass

    # Enter a parse tree produced by PythonParser#dotted_name.
    def enterDotted_name(self, ctx: PythonParser.Dotted_nameContext):
        pass

    # Exit a parse tree produced by PythonParser#dotted_name.
    def exitDotted_name(self, ctx: PythonParser.Dotted_nameContext):
        pass

    # Enter a parse tree produced by PythonParser#block.
    def enterBlock(self, ctx: PythonParser.BlockContext):
        pass

    # Exit a parse tree produced by PythonParser#block.
    def exitBlock(self, ctx: PythonParser.BlockContext):
        pass

    # Enter a parse tree produced by PythonParser#decorators.
    def enterDecorators(self, ctx: PythonParser.DecoratorsContext):
        pass

    # Exit a parse tree produced by PythonParser#decorators.
    def exitDecorators(self, ctx: PythonParser.DecoratorsContext):
        pass

    # Enter a parse tree produced by PythonParser#class_def.
    def enterClass_def(self, ctx: PythonParser.Class_defContext):
        pass

    # Exit a parse tree produced by PythonParser#class_def.
    def exitClass_def(self, ctx: PythonParser.Class_defContext):
        pass

    # Enter a parse tree produced by PythonParser#class_def_raw.
    def enterClass_def_raw(self, ctx: PythonParser.Class_def_rawContext):
        pass

    # Exit a parse tree produced by PythonParser#class_def_raw.
    def exitClass_def_raw(self, ctx: PythonParser.Class_def_rawContext):
        pass

    # Enter a parse tree produced by PythonParser#function_def.
    def enterFunction_def(self, ctx: PythonParser.Function_defContext):
        pass

    # Exit a parse tree produced by PythonParser#function_def.
    def exitFunction_def(self, ctx: PythonParser.Function_defContext):
        pass

    # Enter a parse tree produced by PythonParser#function_def_raw.
    def enterFunction_def_raw(self, ctx: PythonParser.Function_def_rawContext):
        pass

    # Exit a parse tree produced by PythonParser#function_def_raw.
    def exitFunction_def_raw(self, ctx: PythonParser.Function_def_rawContext):
        pass

    # Enter a parse tree produced by PythonParser#params.
    def enterParams(self, ctx: PythonParser.ParamsContext):
        pass

    # Exit a parse tree produced by PythonParser#params.
    def exitParams(self, ctx: PythonParser.ParamsContext):
        pass

    # Enter a parse tree produced by PythonParser#parameters.
    def enterParameters(self, ctx: PythonParser.ParametersContext):
        pass

    # Exit a parse tree produced by PythonParser#parameters.
    def exitParameters(self, ctx: PythonParser.ParametersContext):
        pass

    # Enter a parse tree produced by PythonParser#slash_no_default.
    def enterSlash_no_default(self, ctx: PythonParser.Slash_no_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#slash_no_default.
    def exitSlash_no_default(self, ctx: PythonParser.Slash_no_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#slash_with_default.
    def enterSlash_with_default(self, ctx: PythonParser.Slash_with_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#slash_with_default.
    def exitSlash_with_default(self, ctx: PythonParser.Slash_with_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#star_etc.
    def enterStar_etc(self, ctx: PythonParser.Star_etcContext):
        pass

    # Exit a parse tree produced by PythonParser#star_etc.
    def exitStar_etc(self, ctx: PythonParser.Star_etcContext):
        pass

    # Enter a parse tree produced by PythonParser#kwds.
    def enterKwds(self, ctx: PythonParser.KwdsContext):
        pass

    # Exit a parse tree produced by PythonParser#kwds.
    def exitKwds(self, ctx: PythonParser.KwdsContext):
        pass

    # Enter a parse tree produced by PythonParser#param_no_default.
    def enterParam_no_default(self, ctx: PythonParser.Param_no_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#param_no_default.
    def exitParam_no_default(self, ctx: PythonParser.Param_no_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#param_no_default_star_annotation.
    def enterParam_no_default_star_annotation(self, ctx: PythonParser.Param_no_default_star_annotationContext):
        pass

    # Exit a parse tree produced by PythonParser#param_no_default_star_annotation.
    def exitParam_no_default_star_annotation(self, ctx: PythonParser.Param_no_default_star_annotationContext):
        pass

    # Enter a parse tree produced by PythonParser#param_with_default.
    def enterParam_with_default(self, ctx: PythonParser.Param_with_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#param_with_default.
    def exitParam_with_default(self, ctx: PythonParser.Param_with_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#param_maybe_default.
    def enterParam_maybe_default(self, ctx: PythonParser.Param_maybe_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#param_maybe_default.
    def exitParam_maybe_default(self, ctx: PythonParser.Param_maybe_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#param.
    def enterParam(self, ctx: PythonParser.ParamContext):
        pass

    # Exit a parse tree produced by PythonParser#param.
    def exitParam(self, ctx: PythonParser.ParamContext):
        pass

    # Enter a parse tree produced by PythonParser#param_star_annotation.
    def enterParam_star_annotation(self, ctx: PythonParser.Param_star_annotationContext):
        pass

    # Exit a parse tree produced by PythonParser#param_star_annotation.
    def exitParam_star_annotation(self, ctx: PythonParser.Param_star_annotationContext):
        pass

    # Enter a parse tree produced by PythonParser#annotation.
    def enterAnnotation(self, ctx: PythonParser.AnnotationContext):
        pass

    # Exit a parse tree produced by PythonParser#annotation.
    def exitAnnotation(self, ctx: PythonParser.AnnotationContext):
        pass

    # Enter a parse tree produced by PythonParser#star_annotation.
    def enterStar_annotation(self, ctx: PythonParser.Star_annotationContext):
        pass

    # Exit a parse tree produced by PythonParser#star_annotation.
    def exitStar_annotation(self, ctx: PythonParser.Star_annotationContext):
        pass

    # Enter a parse tree produced by PythonParser#default_assignment.
    def enterDefault_assignment(self, ctx: PythonParser.Default_assignmentContext):
        pass

    # Exit a parse tree produced by PythonParser#default_assignment.
    def exitDefault_assignment(self, ctx: PythonParser.Default_assignmentContext):
        pass

    # Enter a parse tree produced by PythonParser#if_stmt.
    def enterIf_stmt(self, ctx: PythonParser.If_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#if_stmt.
    def exitIf_stmt(self, ctx: PythonParser.If_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#elif_stmt.
    def enterElif_stmt(self, ctx: PythonParser.Elif_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#elif_stmt.
    def exitElif_stmt(self, ctx: PythonParser.Elif_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#else_block.
    def enterElse_block(self, ctx: PythonParser.Else_blockContext):
        pass

    # Exit a parse tree produced by PythonParser#else_block.
    def exitElse_block(self, ctx: PythonParser.Else_blockContext):
        pass

    # Enter a parse tree produced by PythonParser#while_stmt.
    def enterWhile_stmt(self, ctx: PythonParser.While_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#while_stmt.
    def exitWhile_stmt(self, ctx: PythonParser.While_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#for_stmt.
    def enterFor_stmt(self, ctx: PythonParser.For_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#for_stmt.
    def exitFor_stmt(self, ctx: PythonParser.For_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#with_stmt.
    def enterWith_stmt(self, ctx: PythonParser.With_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#with_stmt.
    def exitWith_stmt(self, ctx: PythonParser.With_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#with_item.
    def enterWith_item(self, ctx: PythonParser.With_itemContext):
        pass

    # Exit a parse tree produced by PythonParser#with_item.
    def exitWith_item(self, ctx: PythonParser.With_itemContext):
        pass

    # Enter a parse tree produced by PythonParser#try_stmt.
    def enterTry_stmt(self, ctx: PythonParser.Try_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#try_stmt.
    def exitTry_stmt(self, ctx: PythonParser.Try_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#except_block.
    def enterExcept_block(self, ctx: PythonParser.Except_blockContext):
        pass

    # Exit a parse tree produced by PythonParser#except_block.
    def exitExcept_block(self, ctx: PythonParser.Except_blockContext):
        pass

    # Enter a parse tree produced by PythonParser#except_star_block.
    def enterExcept_star_block(self, ctx: PythonParser.Except_star_blockContext):
        pass

    # Exit a parse tree produced by PythonParser#except_star_block.
    def exitExcept_star_block(self, ctx: PythonParser.Except_star_blockContext):
        pass

    # Enter a parse tree produced by PythonParser#finally_block.
    def enterFinally_block(self, ctx: PythonParser.Finally_blockContext):
        pass

    # Exit a parse tree produced by PythonParser#finally_block.
    def exitFinally_block(self, ctx: PythonParser.Finally_blockContext):
        pass

    # Enter a parse tree produced by PythonParser#match_stmt.
    def enterMatch_stmt(self, ctx: PythonParser.Match_stmtContext):
        pass

    # Exit a parse tree produced by PythonParser#match_stmt.
    def exitMatch_stmt(self, ctx: PythonParser.Match_stmtContext):
        pass

    # Enter a parse tree produced by PythonParser#subject_expr.
    def enterSubject_expr(self, ctx: PythonParser.Subject_exprContext):
        pass

    # Exit a parse tree produced by PythonParser#subject_expr.
    def exitSubject_expr(self, ctx: PythonParser.Subject_exprContext):
        pass

    # Enter a parse tree produced by PythonParser#case_block.
    def enterCase_block(self, ctx: PythonParser.Case_blockContext):
        pass

    # Exit a parse tree produced by PythonParser#case_block.
    def exitCase_block(self, ctx: PythonParser.Case_blockContext):
        pass

    # Enter a parse tree produced by PythonParser#guard.
    def enterGuard(self, ctx: PythonParser.GuardContext):
        pass

    # Exit a parse tree produced by PythonParser#guard.
    def exitGuard(self, ctx: PythonParser.GuardContext):
        pass

    # Enter a parse tree produced by PythonParser#patterns.
    def enterPatterns(self, ctx: PythonParser.PatternsContext):
        pass

    # Exit a parse tree produced by PythonParser#patterns.
    def exitPatterns(self, ctx: PythonParser.PatternsContext):
        pass

    # Enter a parse tree produced by PythonParser#pattern.
    def enterPattern(self, ctx: PythonParser.PatternContext):
        pass

    # Exit a parse tree produced by PythonParser#pattern.
    def exitPattern(self, ctx: PythonParser.PatternContext):
        pass

    # Enter a parse tree produced by PythonParser#as_pattern.
    def enterAs_pattern(self, ctx: PythonParser.As_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#as_pattern.
    def exitAs_pattern(self, ctx: PythonParser.As_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#or_pattern.
    def enterOr_pattern(self, ctx: PythonParser.Or_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#or_pattern.
    def exitOr_pattern(self, ctx: PythonParser.Or_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#closed_pattern.
    def enterClosed_pattern(self, ctx: PythonParser.Closed_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#closed_pattern.
    def exitClosed_pattern(self, ctx: PythonParser.Closed_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#literal_pattern.
    def enterLiteral_pattern(self, ctx: PythonParser.Literal_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#literal_pattern.
    def exitLiteral_pattern(self, ctx: PythonParser.Literal_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#literal_expr.
    def enterLiteral_expr(self, ctx: PythonParser.Literal_exprContext):
        pass

    # Exit a parse tree produced by PythonParser#literal_expr.
    def exitLiteral_expr(self, ctx: PythonParser.Literal_exprContext):
        pass

    # Enter a parse tree produced by PythonParser#complex_number.
    def enterComplex_number(self, ctx: PythonParser.Complex_numberContext):
        pass

    # Exit a parse tree produced by PythonParser#complex_number.
    def exitComplex_number(self, ctx: PythonParser.Complex_numberContext):
        pass

    # Enter a parse tree produced by PythonParser#signed_number.
    def enterSigned_number(self, ctx: PythonParser.Signed_numberContext):
        pass

    # Exit a parse tree produced by PythonParser#signed_number.
    def exitSigned_number(self, ctx: PythonParser.Signed_numberContext):
        pass

    # Enter a parse tree produced by PythonParser#signed_real_number.
    def enterSigned_real_number(self, ctx: PythonParser.Signed_real_numberContext):
        pass

    # Exit a parse tree produced by PythonParser#signed_real_number.
    def exitSigned_real_number(self, ctx: PythonParser.Signed_real_numberContext):
        pass

    # Enter a parse tree produced by PythonParser#real_number.
    def enterReal_number(self, ctx: PythonParser.Real_numberContext):
        pass

    # Exit a parse tree produced by PythonParser#real_number.
    def exitReal_number(self, ctx: PythonParser.Real_numberContext):
        pass

    # Enter a parse tree produced by PythonParser#imaginary_number.
    def enterImaginary_number(self, ctx: PythonParser.Imaginary_numberContext):
        pass

    # Exit a parse tree produced by PythonParser#imaginary_number.
    def exitImaginary_number(self, ctx: PythonParser.Imaginary_numberContext):
        pass

    # Enter a parse tree produced by PythonParser#capture_pattern.
    def enterCapture_pattern(self, ctx: PythonParser.Capture_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#capture_pattern.
    def exitCapture_pattern(self, ctx: PythonParser.Capture_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#pattern_capture_target.
    def enterPattern_capture_target(self, ctx: PythonParser.Pattern_capture_targetContext):
        pass

    # Exit a parse tree produced by PythonParser#pattern_capture_target.
    def exitPattern_capture_target(self, ctx: PythonParser.Pattern_capture_targetContext):
        pass

    # Enter a parse tree produced by PythonParser#wildcard_pattern.
    def enterWildcard_pattern(self, ctx: PythonParser.Wildcard_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#wildcard_pattern.
    def exitWildcard_pattern(self, ctx: PythonParser.Wildcard_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#value_pattern.
    def enterValue_pattern(self, ctx: PythonParser.Value_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#value_pattern.
    def exitValue_pattern(self, ctx: PythonParser.Value_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#attr.
    def enterAttr(self, ctx: PythonParser.AttrContext):
        pass

    # Exit a parse tree produced by PythonParser#attr.
    def exitAttr(self, ctx: PythonParser.AttrContext):
        pass

    # Enter a parse tree produced by PythonParser#name_or_attr.
    def enterName_or_attr(self, ctx: PythonParser.Name_or_attrContext):
        pass

    # Exit a parse tree produced by PythonParser#name_or_attr.
    def exitName_or_attr(self, ctx: PythonParser.Name_or_attrContext):
        pass

    # Enter a parse tree produced by PythonParser#group_pattern.
    def enterGroup_pattern(self, ctx: PythonParser.Group_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#group_pattern.
    def exitGroup_pattern(self, ctx: PythonParser.Group_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#sequence_pattern.
    def enterSequence_pattern(self, ctx: PythonParser.Sequence_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#sequence_pattern.
    def exitSequence_pattern(self, ctx: PythonParser.Sequence_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#open_sequence_pattern.
    def enterOpen_sequence_pattern(self, ctx: PythonParser.Open_sequence_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#open_sequence_pattern.
    def exitOpen_sequence_pattern(self, ctx: PythonParser.Open_sequence_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#maybe_sequence_pattern.
    def enterMaybe_sequence_pattern(self, ctx: PythonParser.Maybe_sequence_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#maybe_sequence_pattern.
    def exitMaybe_sequence_pattern(self, ctx: PythonParser.Maybe_sequence_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#maybe_star_pattern.
    def enterMaybe_star_pattern(self, ctx: PythonParser.Maybe_star_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#maybe_star_pattern.
    def exitMaybe_star_pattern(self, ctx: PythonParser.Maybe_star_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#star_pattern.
    def enterStar_pattern(self, ctx: PythonParser.Star_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#star_pattern.
    def exitStar_pattern(self, ctx: PythonParser.Star_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#mapping_pattern.
    def enterMapping_pattern(self, ctx: PythonParser.Mapping_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#mapping_pattern.
    def exitMapping_pattern(self, ctx: PythonParser.Mapping_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#items_pattern.
    def enterItems_pattern(self, ctx: PythonParser.Items_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#items_pattern.
    def exitItems_pattern(self, ctx: PythonParser.Items_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#key_value_pattern.
    def enterKey_value_pattern(self, ctx: PythonParser.Key_value_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#key_value_pattern.
    def exitKey_value_pattern(self, ctx: PythonParser.Key_value_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#double_star_pattern.
    def enterDouble_star_pattern(self, ctx: PythonParser.Double_star_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#double_star_pattern.
    def exitDouble_star_pattern(self, ctx: PythonParser.Double_star_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#class_pattern.
    def enterClass_pattern(self, ctx: PythonParser.Class_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#class_pattern.
    def exitClass_pattern(self, ctx: PythonParser.Class_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#positional_patterns.
    def enterPositional_patterns(self, ctx: PythonParser.Positional_patternsContext):
        pass

    # Exit a parse tree produced by PythonParser#positional_patterns.
    def exitPositional_patterns(self, ctx: PythonParser.Positional_patternsContext):
        pass

    # Enter a parse tree produced by PythonParser#keyword_patterns.
    def enterKeyword_patterns(self, ctx: PythonParser.Keyword_patternsContext):
        pass

    # Exit a parse tree produced by PythonParser#keyword_patterns.
    def exitKeyword_patterns(self, ctx: PythonParser.Keyword_patternsContext):
        pass

    # Enter a parse tree produced by PythonParser#keyword_pattern.
    def enterKeyword_pattern(self, ctx: PythonParser.Keyword_patternContext):
        pass

    # Exit a parse tree produced by PythonParser#keyword_pattern.
    def exitKeyword_pattern(self, ctx: PythonParser.Keyword_patternContext):
        pass

    # Enter a parse tree produced by PythonParser#type_alias.
    def enterType_alias(self, ctx: PythonParser.Type_aliasContext):
        pass

    # Exit a parse tree produced by PythonParser#type_alias.
    def exitType_alias(self, ctx: PythonParser.Type_aliasContext):
        pass

    # Enter a parse tree produced by PythonParser#type_params.
    def enterType_params(self, ctx: PythonParser.Type_paramsContext):
        pass

    # Exit a parse tree produced by PythonParser#type_params.
    def exitType_params(self, ctx: PythonParser.Type_paramsContext):
        pass

    # Enter a parse tree produced by PythonParser#type_param_seq.
    def enterType_param_seq(self, ctx: PythonParser.Type_param_seqContext):
        pass

    # Exit a parse tree produced by PythonParser#type_param_seq.
    def exitType_param_seq(self, ctx: PythonParser.Type_param_seqContext):
        pass

    # Enter a parse tree produced by PythonParser#type_param.
    def enterType_param(self, ctx: PythonParser.Type_paramContext):
        pass

    # Exit a parse tree produced by PythonParser#type_param.
    def exitType_param(self, ctx: PythonParser.Type_paramContext):
        pass

    # Enter a parse tree produced by PythonParser#type_param_bound.
    def enterType_param_bound(self, ctx: PythonParser.Type_param_boundContext):
        pass

    # Exit a parse tree produced by PythonParser#type_param_bound.
    def exitType_param_bound(self, ctx: PythonParser.Type_param_boundContext):
        pass

    # Enter a parse tree produced by PythonParser#expressions.
    def enterExpressions(self, ctx: PythonParser.ExpressionsContext):
        pass

    # Exit a parse tree produced by PythonParser#expressions.
    def exitExpressions(self, ctx: PythonParser.ExpressionsContext):
        pass

    # Enter a parse tree produced by PythonParser#expression.
    def enterExpression(self, ctx: PythonParser.ExpressionContext):
        pass

    # Exit a parse tree produced by PythonParser#expression.
    def exitExpression(self, ctx: PythonParser.ExpressionContext):
        pass

    # Enter a parse tree produced by PythonParser#yield_expr.
    def enterYield_expr(self, ctx: PythonParser.Yield_exprContext):
        pass

    # Exit a parse tree produced by PythonParser#yield_expr.
    def exitYield_expr(self, ctx: PythonParser.Yield_exprContext):
        pass

    # Enter a parse tree produced by PythonParser#star_expressions.
    def enterStar_expressions(self, ctx: PythonParser.Star_expressionsContext):
        pass

    # Exit a parse tree produced by PythonParser#star_expressions.
    def exitStar_expressions(self, ctx: PythonParser.Star_expressionsContext):
        pass

    # Enter a parse tree produced by PythonParser#star_expression.
    def enterStar_expression(self, ctx: PythonParser.Star_expressionContext):
        pass

    # Exit a parse tree produced by PythonParser#star_expression.
    def exitStar_expression(self, ctx: PythonParser.Star_expressionContext):
        pass

    # Enter a parse tree produced by PythonParser#star_named_expressions.
    def enterStar_named_expressions(self, ctx: PythonParser.Star_named_expressionsContext):
        pass

    # Exit a parse tree produced by PythonParser#star_named_expressions.
    def exitStar_named_expressions(self, ctx: PythonParser.Star_named_expressionsContext):
        pass

    # Enter a parse tree produced by PythonParser#star_named_expression.
    def enterStar_named_expression(self, ctx: PythonParser.Star_named_expressionContext):
        pass

    # Exit a parse tree produced by PythonParser#star_named_expression.
    def exitStar_named_expression(self, ctx: PythonParser.Star_named_expressionContext):
        pass

    # Enter a parse tree produced by PythonParser#assignment_expression.
    def enterAssignment_expression(self, ctx: PythonParser.Assignment_expressionContext):
        pass

    # Exit a parse tree produced by PythonParser#assignment_expression.
    def exitAssignment_expression(self, ctx: PythonParser.Assignment_expressionContext):
        pass

    # Enter a parse tree produced by PythonParser#named_expression.
    def enterNamed_expression(self, ctx: PythonParser.Named_expressionContext):
        pass

    # Exit a parse tree produced by PythonParser#named_expression.
    def exitNamed_expression(self, ctx: PythonParser.Named_expressionContext):
        pass

    # Enter a parse tree produced by PythonParser#disjunction.
    def enterDisjunction(self, ctx: PythonParser.DisjunctionContext):
        pass

    # Exit a parse tree produced by PythonParser#disjunction.
    def exitDisjunction(self, ctx: PythonParser.DisjunctionContext):
        pass

    # Enter a parse tree produced by PythonParser#conjunction.
    def enterConjunction(self, ctx: PythonParser.ConjunctionContext):
        pass

    # Exit a parse tree produced by PythonParser#conjunction.
    def exitConjunction(self, ctx: PythonParser.ConjunctionContext):
        pass

    # Enter a parse tree produced by PythonParser#inversion.
    def enterInversion(self, ctx: PythonParser.InversionContext):
        pass

    # Exit a parse tree produced by PythonParser#inversion.
    def exitInversion(self, ctx: PythonParser.InversionContext):
        pass

    # Enter a parse tree produced by PythonParser#comparison.
    def enterComparison(self, ctx: PythonParser.ComparisonContext):
        pass

    # Exit a parse tree produced by PythonParser#comparison.
    def exitComparison(self, ctx: PythonParser.ComparisonContext):
        pass

    # Enter a parse tree produced by PythonParser#compare_op_bitwise_or_pair.
    def enterCompare_op_bitwise_or_pair(self, ctx: PythonParser.Compare_op_bitwise_or_pairContext):
        pass

    # Exit a parse tree produced by PythonParser#compare_op_bitwise_or_pair.
    def exitCompare_op_bitwise_or_pair(self, ctx: PythonParser.Compare_op_bitwise_or_pairContext):
        pass

    # Enter a parse tree produced by PythonParser#eq_bitwise_or.
    def enterEq_bitwise_or(self, ctx: PythonParser.Eq_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#eq_bitwise_or.
    def exitEq_bitwise_or(self, ctx: PythonParser.Eq_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#noteq_bitwise_or.
    def enterNoteq_bitwise_or(self, ctx: PythonParser.Noteq_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#noteq_bitwise_or.
    def exitNoteq_bitwise_or(self, ctx: PythonParser.Noteq_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#lte_bitwise_or.
    def enterLte_bitwise_or(self, ctx: PythonParser.Lte_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#lte_bitwise_or.
    def exitLte_bitwise_or(self, ctx: PythonParser.Lte_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#lt_bitwise_or.
    def enterLt_bitwise_or(self, ctx: PythonParser.Lt_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#lt_bitwise_or.
    def exitLt_bitwise_or(self, ctx: PythonParser.Lt_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#gte_bitwise_or.
    def enterGte_bitwise_or(self, ctx: PythonParser.Gte_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#gte_bitwise_or.
    def exitGte_bitwise_or(self, ctx: PythonParser.Gte_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#gt_bitwise_or.
    def enterGt_bitwise_or(self, ctx: PythonParser.Gt_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#gt_bitwise_or.
    def exitGt_bitwise_or(self, ctx: PythonParser.Gt_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#notin_bitwise_or.
    def enterNotin_bitwise_or(self, ctx: PythonParser.Notin_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#notin_bitwise_or.
    def exitNotin_bitwise_or(self, ctx: PythonParser.Notin_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#in_bitwise_or.
    def enterIn_bitwise_or(self, ctx: PythonParser.In_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#in_bitwise_or.
    def exitIn_bitwise_or(self, ctx: PythonParser.In_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#isnot_bitwise_or.
    def enterIsnot_bitwise_or(self, ctx: PythonParser.Isnot_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#isnot_bitwise_or.
    def exitIsnot_bitwise_or(self, ctx: PythonParser.Isnot_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#is_bitwise_or.
    def enterIs_bitwise_or(self, ctx: PythonParser.Is_bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#is_bitwise_or.
    def exitIs_bitwise_or(self, ctx: PythonParser.Is_bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#bitwise_or.
    def enterBitwise_or(self, ctx: PythonParser.Bitwise_orContext):
        pass

    # Exit a parse tree produced by PythonParser#bitwise_or.
    def exitBitwise_or(self, ctx: PythonParser.Bitwise_orContext):
        pass

    # Enter a parse tree produced by PythonParser#bitwise_xor.
    def enterBitwise_xor(self, ctx: PythonParser.Bitwise_xorContext):
        pass

    # Exit a parse tree produced by PythonParser#bitwise_xor.
    def exitBitwise_xor(self, ctx: PythonParser.Bitwise_xorContext):
        pass

    # Enter a parse tree produced by PythonParser#bitwise_and.
    def enterBitwise_and(self, ctx: PythonParser.Bitwise_andContext):
        pass

    # Exit a parse tree produced by PythonParser#bitwise_and.
    def exitBitwise_and(self, ctx: PythonParser.Bitwise_andContext):
        pass

    # Enter a parse tree produced by PythonParser#shift_expr.
    def enterShift_expr(self, ctx: PythonParser.Shift_exprContext):
        pass

    # Exit a parse tree produced by PythonParser#shift_expr.
    def exitShift_expr(self, ctx: PythonParser.Shift_exprContext):
        pass

    # Enter a parse tree produced by PythonParser#sum.
    def enterSum(self, ctx: PythonParser.SumContext):
        pass

    # Exit a parse tree produced by PythonParser#sum.
    def exitSum(self, ctx: PythonParser.SumContext):
        pass

    # Enter a parse tree produced by PythonParser#term.
    def enterTerm(self, ctx: PythonParser.TermContext):
        pass

    # Exit a parse tree produced by PythonParser#term.
    def exitTerm(self, ctx: PythonParser.TermContext):
        pass

    # Enter a parse tree produced by PythonParser#factor.
    def enterFactor(self, ctx: PythonParser.FactorContext):
        pass

    # Exit a parse tree produced by PythonParser#factor.
    def exitFactor(self, ctx: PythonParser.FactorContext):
        pass

    # Enter a parse tree produced by PythonParser#power.
    def enterPower(self, ctx: PythonParser.PowerContext):
        pass

    # Exit a parse tree produced by PythonParser#power.
    def exitPower(self, ctx: PythonParser.PowerContext):
        pass

    # Enter a parse tree produced by PythonParser#await_primary.
    def enterAwait_primary(self, ctx: PythonParser.Await_primaryContext):
        pass

    # Exit a parse tree produced by PythonParser#await_primary.
    def exitAwait_primary(self, ctx: PythonParser.Await_primaryContext):
        pass

    # Enter a parse tree produced by PythonParser#primary.
    def enterPrimary(self, ctx: PythonParser.PrimaryContext):
        pass

    # Exit a parse tree produced by PythonParser#primary.
    def exitPrimary(self, ctx: PythonParser.PrimaryContext):
        pass

    # Enter a parse tree produced by PythonParser#slices.
    def enterSlices(self, ctx: PythonParser.SlicesContext):
        pass

    # Exit a parse tree produced by PythonParser#slices.
    def exitSlices(self, ctx: PythonParser.SlicesContext):
        pass

    # Enter a parse tree produced by PythonParser#slice.
    def enterSlice(self, ctx: PythonParser.SliceContext):
        pass

    # Exit a parse tree produced by PythonParser#slice.
    def exitSlice(self, ctx: PythonParser.SliceContext):
        pass

    # Enter a parse tree produced by PythonParser#atom.
    def enterAtom(self, ctx: PythonParser.AtomContext):
        pass

    # Exit a parse tree produced by PythonParser#atom.
    def exitAtom(self, ctx: PythonParser.AtomContext):
        pass

    # Enter a parse tree produced by PythonParser#group.
    def enterGroup(self, ctx: PythonParser.GroupContext):
        pass

    # Exit a parse tree produced by PythonParser#group.
    def exitGroup(self, ctx: PythonParser.GroupContext):
        pass

    # Enter a parse tree produced by PythonParser#lambdef.
    def enterLambdef(self, ctx: PythonParser.LambdefContext):
        pass

    # Exit a parse tree produced by PythonParser#lambdef.
    def exitLambdef(self, ctx: PythonParser.LambdefContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_params.
    def enterLambda_params(self, ctx: PythonParser.Lambda_paramsContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_params.
    def exitLambda_params(self, ctx: PythonParser.Lambda_paramsContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_parameters.
    def enterLambda_parameters(self, ctx: PythonParser.Lambda_parametersContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_parameters.
    def exitLambda_parameters(self, ctx: PythonParser.Lambda_parametersContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_slash_no_default.
    def enterLambda_slash_no_default(self, ctx: PythonParser.Lambda_slash_no_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_slash_no_default.
    def exitLambda_slash_no_default(self, ctx: PythonParser.Lambda_slash_no_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_slash_with_default.
    def enterLambda_slash_with_default(self, ctx: PythonParser.Lambda_slash_with_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_slash_with_default.
    def exitLambda_slash_with_default(self, ctx: PythonParser.Lambda_slash_with_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_star_etc.
    def enterLambda_star_etc(self, ctx: PythonParser.Lambda_star_etcContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_star_etc.
    def exitLambda_star_etc(self, ctx: PythonParser.Lambda_star_etcContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_kwds.
    def enterLambda_kwds(self, ctx: PythonParser.Lambda_kwdsContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_kwds.
    def exitLambda_kwds(self, ctx: PythonParser.Lambda_kwdsContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_param_no_default.
    def enterLambda_param_no_default(self, ctx: PythonParser.Lambda_param_no_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_param_no_default.
    def exitLambda_param_no_default(self, ctx: PythonParser.Lambda_param_no_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_param_with_default.
    def enterLambda_param_with_default(self, ctx: PythonParser.Lambda_param_with_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_param_with_default.
    def exitLambda_param_with_default(self, ctx: PythonParser.Lambda_param_with_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_param_maybe_default.
    def enterLambda_param_maybe_default(self, ctx: PythonParser.Lambda_param_maybe_defaultContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_param_maybe_default.
    def exitLambda_param_maybe_default(self, ctx: PythonParser.Lambda_param_maybe_defaultContext):
        pass

    # Enter a parse tree produced by PythonParser#lambda_param.
    def enterLambda_param(self, ctx: PythonParser.Lambda_paramContext):
        pass

    # Exit a parse tree produced by PythonParser#lambda_param.
    def exitLambda_param(self, ctx: PythonParser.Lambda_paramContext):
        pass

    # Enter a parse tree produced by PythonParser#fstring_middle.
    def enterFstring_middle(self, ctx: PythonParser.Fstring_middleContext):
        pass

    # Exit a parse tree produced by PythonParser#fstring_middle.
    def exitFstring_middle(self, ctx: PythonParser.Fstring_middleContext):
        pass

    # Enter a parse tree produced by PythonParser#fstring_replacement_field.
    def enterFstring_replacement_field(self, ctx: PythonParser.Fstring_replacement_fieldContext):
        pass

    # Exit a parse tree produced by PythonParser#fstring_replacement_field.
    def exitFstring_replacement_field(self, ctx: PythonParser.Fstring_replacement_fieldContext):
        pass

    # Enter a parse tree produced by PythonParser#fstring_conversion.
    def enterFstring_conversion(self, ctx: PythonParser.Fstring_conversionContext):
        pass

    # Exit a parse tree produced by PythonParser#fstring_conversion.
    def exitFstring_conversion(self, ctx: PythonParser.Fstring_conversionContext):
        pass

    # Enter a parse tree produced by PythonParser#fstring_full_format_spec.
    def enterFstring_full_format_spec(self, ctx: PythonParser.Fstring_full_format_specContext):
        pass

    # Exit a parse tree produced by PythonParser#fstring_full_format_spec.
    def exitFstring_full_format_spec(self, ctx: PythonParser.Fstring_full_format_specContext):
        pass

    # Enter a parse tree produced by PythonParser#fstring_format_spec.
    def enterFstring_format_spec(self, ctx: PythonParser.Fstring_format_specContext):
        pass

    # Exit a parse tree produced by PythonParser#fstring_format_spec.
    def exitFstring_format_spec(self, ctx: PythonParser.Fstring_format_specContext):
        pass

    # Enter a parse tree produced by PythonParser#fstring.
    def enterFstring(self, ctx: PythonParser.FstringContext):
        pass

    # Exit a parse tree produced by PythonParser#fstring.
    def exitFstring(self, ctx: PythonParser.FstringContext):
        pass

    # Enter a parse tree produced by PythonParser#string.
    def enterString(self, ctx: PythonParser.StringContext):
        pass

    # Exit a parse tree produced by PythonParser#string.
    def exitString(self, ctx: PythonParser.StringContext):
        pass

    # Enter a parse tree produced by PythonParser#strings.
    def enterStrings(self, ctx: PythonParser.StringsContext):
        pass

    # Exit a parse tree produced by PythonParser#strings.
    def exitStrings(self, ctx: PythonParser.StringsContext):
        pass

    # Enter a parse tree produced by PythonParser#list.
    def enterList(self, ctx: PythonParser.ListContext):
        pass

    # Exit a parse tree produced by PythonParser#list.
    def exitList(self, ctx: PythonParser.ListContext):
        pass

    # Enter a parse tree produced by PythonParser#tuple.
    def enterTuple(self, ctx: PythonParser.TupleContext):
        pass

    # Exit a parse tree produced by PythonParser#tuple.
    def exitTuple(self, ctx: PythonParser.TupleContext):
        pass

    # Enter a parse tree produced by PythonParser#set.
    def enterSet(self, ctx: PythonParser.SetContext):
        pass

    # Exit a parse tree produced by PythonParser#set.
    def exitSet(self, ctx: PythonParser.SetContext):
        pass

    # Enter a parse tree produced by PythonParser#dict.
    def enterDict(self, ctx: PythonParser.DictContext):
        pass

    # Exit a parse tree produced by PythonParser#dict.
    def exitDict(self, ctx: PythonParser.DictContext):
        pass

    # Enter a parse tree produced by PythonParser#double_starred_kvpairs.
    def enterDouble_starred_kvpairs(self, ctx: PythonParser.Double_starred_kvpairsContext):
        pass

    # Exit a parse tree produced by PythonParser#double_starred_kvpairs.
    def exitDouble_starred_kvpairs(self, ctx: PythonParser.Double_starred_kvpairsContext):
        pass

    # Enter a parse tree produced by PythonParser#double_starred_kvpair.
    def enterDouble_starred_kvpair(self, ctx: PythonParser.Double_starred_kvpairContext):
        pass

    # Exit a parse tree produced by PythonParser#double_starred_kvpair.
    def exitDouble_starred_kvpair(self, ctx: PythonParser.Double_starred_kvpairContext):
        pass

    # Enter a parse tree produced by PythonParser#kvpair.
    def enterKvpair(self, ctx: PythonParser.KvpairContext):
        pass

    # Exit a parse tree produced by PythonParser#kvpair.
    def exitKvpair(self, ctx: PythonParser.KvpairContext):
        pass

    # Enter a parse tree produced by PythonParser#for_if_clauses.
    def enterFor_if_clauses(self, ctx: PythonParser.For_if_clausesContext):
        pass

    # Exit a parse tree produced by PythonParser#for_if_clauses.
    def exitFor_if_clauses(self, ctx: PythonParser.For_if_clausesContext):
        pass

    # Enter a parse tree produced by PythonParser#for_if_clause.
    def enterFor_if_clause(self, ctx: PythonParser.For_if_clauseContext):
        pass

    # Exit a parse tree produced by PythonParser#for_if_clause.
    def exitFor_if_clause(self, ctx: PythonParser.For_if_clauseContext):
        pass

    # Enter a parse tree produced by PythonParser#listcomp.
    def enterListcomp(self, ctx: PythonParser.ListcompContext):
        pass

    # Exit a parse tree produced by PythonParser#listcomp.
    def exitListcomp(self, ctx: PythonParser.ListcompContext):
        pass

    # Enter a parse tree produced by PythonParser#setcomp.
    def enterSetcomp(self, ctx: PythonParser.SetcompContext):
        pass

    # Exit a parse tree produced by PythonParser#setcomp.
    def exitSetcomp(self, ctx: PythonParser.SetcompContext):
        pass

    # Enter a parse tree produced by PythonParser#genexp.
    def enterGenexp(self, ctx: PythonParser.GenexpContext):
        pass

    # Exit a parse tree produced by PythonParser#genexp.
    def exitGenexp(self, ctx: PythonParser.GenexpContext):
        pass

    # Enter a parse tree produced by PythonParser#dictcomp.
    def enterDictcomp(self, ctx: PythonParser.DictcompContext):
        pass

    # Exit a parse tree produced by PythonParser#dictcomp.
    def exitDictcomp(self, ctx: PythonParser.DictcompContext):
        pass

    # Enter a parse tree produced by PythonParser#arguments.
    def enterArguments(self, ctx: PythonParser.ArgumentsContext):
        pass

    # Exit a parse tree produced by PythonParser#arguments.
    def exitArguments(self, ctx: PythonParser.ArgumentsContext):
        pass

    # Enter a parse tree produced by PythonParser#args.
    def enterArgs(self, ctx: PythonParser.ArgsContext):
        pass

    # Exit a parse tree produced by PythonParser#args.
    def exitArgs(self, ctx: PythonParser.ArgsContext):
        pass

    # Enter a parse tree produced by PythonParser#kwargs.
    def enterKwargs(self, ctx: PythonParser.KwargsContext):
        pass

    # Exit a parse tree produced by PythonParser#kwargs.
    def exitKwargs(self, ctx: PythonParser.KwargsContext):
        pass

    # Enter a parse tree produced by PythonParser#starred_expression.
    def enterStarred_expression(self, ctx: PythonParser.Starred_expressionContext):
        pass

    # Exit a parse tree produced by PythonParser#starred_expression.
    def exitStarred_expression(self, ctx: PythonParser.Starred_expressionContext):
        pass

    # Enter a parse tree produced by PythonParser#kwarg_or_starred.
    def enterKwarg_or_starred(self, ctx: PythonParser.Kwarg_or_starredContext):
        pass

    # Exit a parse tree produced by PythonParser#kwarg_or_starred.
    def exitKwarg_or_starred(self, ctx: PythonParser.Kwarg_or_starredContext):
        pass

    # Enter a parse tree produced by PythonParser#kwarg_or_double_starred.
    def enterKwarg_or_double_starred(self, ctx: PythonParser.Kwarg_or_double_starredContext):
        pass

    # Exit a parse tree produced by PythonParser#kwarg_or_double_starred.
    def exitKwarg_or_double_starred(self, ctx: PythonParser.Kwarg_or_double_starredContext):
        pass

    # Enter a parse tree produced by PythonParser#star_targets.
    def enterStar_targets(self, ctx: PythonParser.Star_targetsContext):
        pass

    # Exit a parse tree produced by PythonParser#star_targets.
    def exitStar_targets(self, ctx: PythonParser.Star_targetsContext):
        pass

    # Enter a parse tree produced by PythonParser#star_targets_list_seq.
    def enterStar_targets_list_seq(self, ctx: PythonParser.Star_targets_list_seqContext):
        pass

    # Exit a parse tree produced by PythonParser#star_targets_list_seq.
    def exitStar_targets_list_seq(self, ctx: PythonParser.Star_targets_list_seqContext):
        pass

    # Enter a parse tree produced by PythonParser#star_targets_tuple_seq.
    def enterStar_targets_tuple_seq(self, ctx: PythonParser.Star_targets_tuple_seqContext):
        pass

    # Exit a parse tree produced by PythonParser#star_targets_tuple_seq.
    def exitStar_targets_tuple_seq(self, ctx: PythonParser.Star_targets_tuple_seqContext):
        pass

    # Enter a parse tree produced by PythonParser#star_target.
    def enterStar_target(self, ctx: PythonParser.Star_targetContext):
        pass

    # Exit a parse tree produced by PythonParser#star_target.
    def exitStar_target(self, ctx: PythonParser.Star_targetContext):
        pass

    # Enter a parse tree produced by PythonParser#target_with_star_atom.
    def enterTarget_with_star_atom(self, ctx: PythonParser.Target_with_star_atomContext):
        pass

    # Exit a parse tree produced by PythonParser#target_with_star_atom.
    def exitTarget_with_star_atom(self, ctx: PythonParser.Target_with_star_atomContext):
        pass

    # Enter a parse tree produced by PythonParser#star_atom.
    def enterStar_atom(self, ctx: PythonParser.Star_atomContext):
        pass

    # Exit a parse tree produced by PythonParser#star_atom.
    def exitStar_atom(self, ctx: PythonParser.Star_atomContext):
        pass

    # Enter a parse tree produced by PythonParser#single_target.
    def enterSingle_target(self, ctx: PythonParser.Single_targetContext):
        pass

    # Exit a parse tree produced by PythonParser#single_target.
    def exitSingle_target(self, ctx: PythonParser.Single_targetContext):
        pass

    # Enter a parse tree produced by PythonParser#single_subscript_attribute_target.
    def enterSingle_subscript_attribute_target(self, ctx: PythonParser.Single_subscript_attribute_targetContext):
        pass

    # Exit a parse tree produced by PythonParser#single_subscript_attribute_target.
    def exitSingle_subscript_attribute_target(self, ctx: PythonParser.Single_subscript_attribute_targetContext):
        pass

    # Enter a parse tree produced by PythonParser#t_primary.
    def enterT_primary(self, ctx: PythonParser.T_primaryContext):
        pass

    # Exit a parse tree produced by PythonParser#t_primary.
    def exitT_primary(self, ctx: PythonParser.T_primaryContext):
        pass

    # Enter a parse tree produced by PythonParser#del_targets.
    def enterDel_targets(self, ctx: PythonParser.Del_targetsContext):
        pass

    # Exit a parse tree produced by PythonParser#del_targets.
    def exitDel_targets(self, ctx: PythonParser.Del_targetsContext):
        pass

    # Enter a parse tree produced by PythonParser#del_target.
    def enterDel_target(self, ctx: PythonParser.Del_targetContext):
        pass

    # Exit a parse tree produced by PythonParser#del_target.
    def exitDel_target(self, ctx: PythonParser.Del_targetContext):
        pass

    # Enter a parse tree produced by PythonParser#del_t_atom.
    def enterDel_t_atom(self, ctx: PythonParser.Del_t_atomContext):
        pass

    # Exit a parse tree produced by PythonParser#del_t_atom.
    def exitDel_t_atom(self, ctx: PythonParser.Del_t_atomContext):
        pass

    # Enter a parse tree produced by PythonParser#type_expressions.
    def enterType_expressions(self, ctx: PythonParser.Type_expressionsContext):
        pass

    # Exit a parse tree produced by PythonParser#type_expressions.
    def exitType_expressions(self, ctx: PythonParser.Type_expressionsContext):
        pass

    # Enter a parse tree produced by PythonParser#func_type_comment.
    def enterFunc_type_comment(self, ctx: PythonParser.Func_type_commentContext):
        pass

    # Exit a parse tree produced by PythonParser#func_type_comment.
    def exitFunc_type_comment(self, ctx: PythonParser.Func_type_commentContext):
        pass

    # Enter a parse tree produced by PythonParser#soft_kw_match.
    def enterSoft_kw_match(self, ctx: PythonParser.Soft_kw_matchContext):
        pass

    # Exit a parse tree produced by PythonParser#soft_kw_match.
    def exitSoft_kw_match(self, ctx: PythonParser.Soft_kw_matchContext):
        pass

    # Enter a parse tree produced by PythonParser#soft_kw_case.
    def enterSoft_kw_case(self, ctx: PythonParser.Soft_kw_caseContext):
        pass

    # Exit a parse tree produced by PythonParser#soft_kw_case.
    def exitSoft_kw_case(self, ctx: PythonParser.Soft_kw_caseContext):
        pass

    # Enter a parse tree produced by PythonParser#soft_kw_wildcard.
    def enterSoft_kw_wildcard(self, ctx: PythonParser.Soft_kw_wildcardContext):
        pass

    # Exit a parse tree produced by PythonParser#soft_kw_wildcard.
    def exitSoft_kw_wildcard(self, ctx: PythonParser.Soft_kw_wildcardContext):
        pass

    # Enter a parse tree produced by PythonParser#soft_kw_type.
    def enterSoft_kw_type(self, ctx: PythonParser.Soft_kw_typeContext):
        pass

    # Exit a parse tree produced by PythonParser#soft_kw_type.
    def exitSoft_kw_type(self, ctx: PythonParser.Soft_kw_typeContext):
        pass


del PythonParser
